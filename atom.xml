<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BugNull</title>
  
  <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
  <link href="http://bugnull.com/atom.xml" rel="self"/>
  
  <link href="http://bugnull.com/"/>
  <updated>2022-09-21T15:12:21.534Z</updated>
  <id>http://bugnull.com/</id>
  
  <author>
    <name>whppmy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://bugnull.com/uncategorized/"/>
    <id>http://bugnull.com/uncategorized/</id>
    <published>2022-11-06T15:27:55.665Z</published>
    <updated>2022-09-21T15:12:21.534Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Git小结</title>
    <link href="http://bugnull.com/%E6%97%A0%E5%A4%84%E5%AE%89%E6%94%BE/git%E5%B0%8F%E7%BB%93/"/>
    <id>http://bugnull.com/%E6%97%A0%E5%A4%84%E5%AE%89%E6%94%BE/git%E5%B0%8F%E7%BB%93/</id>
    <published>2022-11-06T15:27:55.650Z</published>
    <updated>2022-09-18T15:07:59.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git小结"><a href="#Git小结" class="headerlink" title="Git小结"></a>Git小结</h3><h4 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h4><p>SVN所有东西都存在服务器，不连网不能同步和切换，需要定期备份。</p><h4 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h4><p>Git，每个人保存的都是所有版本</p><h4 id="git组成部分"><a href="#git组成部分" class="headerlink" title="git组成部分"></a>git组成部分</h4><p>工作区 –add-&gt; 暂存区 –commit-&gt; 本地仓库 –push-&gt; 远程<br>工作区 &lt;-checkout– 暂存区 &lt;-reset– 本地仓库 &lt;-fetch/clone– 远程<br>工作区 &lt;-checkout HEAD– 本地仓库<br>工作区 &lt;-pull– 远程</p><h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git config </span><br><span class="line"></span><br><span class="line">--local --global --system  配置影响的范围，本仓库、本用户、本系统</span><br><span class="line"></span><br><span class="line">不加后面具体值表示查看</span><br><span class="line">--list 查看config信息</span><br><span class="line">user.name &quot;&quot; 用户名</span><br><span class="line">user.email &quot;&quot; 用户邮箱</span><br><span class="line">core.autocrlf true\input\false 提交为lf取出改为crlf、提交改为lf、什么也不改</span><br><span class="line">core.safecrlf true\false\warn 拒绝包含混合的文件、允许、给予警告</span><br><span class="line">credential.helper store --file .m_credentials 保存密码存证，Push到https连接时，可不输入密码，--file后面是目录地址</span><br><span class="line">alias 别名 alias.ci &apos;commit&apos; 以后可以用ci表示commit  后面不是git命令 可以用!表示，如&apos;!gitk&apos;</span><br><span class="line">https.proxy http://127.0.0.1:1080 和 --unset https.proxy 设置和取消代理</span><br></pre></td></tr></table></figure><h4 id="git常用"><a href="#git常用" class="headerlink" title="git常用"></a>git常用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HEAD 最后的提交</span><br><span class="line">HEAD^ 倒数第二提交</span><br><span class="line">HEAD^^或者HEAD~2 倒数第三</span><br><span class="line"></span><br><span class="line">init 在工作目录创建主分支</span><br><span class="line">clone 克隆 -b 分支名 --depth 次数（不想把记录也搞下来可以为1） 地址</span><br><span class="line">stash 暂存 save &quot;信息&quot; 暂存且指定名字 list 查看暂存 pop 弹出暂存 apply 类似pop，但是pop会删除暂存 drop 名称 移除 show -p 查看差异，p是详细</span><br></pre></td></tr></table></figure><h4 id="git查看"><a href="#git查看" class="headerlink" title="git查看"></a>git查看</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">log 查看日志 --stat 显示简短内容 --name-only 仅显示文件清单 --name-status 仅显示增删改的文件清单 --author=&quot;author&quot; 列出该用户 --grep=&quot;&quot; 过滤，可加--all--match表示同时满足 file 可以指定文件，查看某文件</span><br><span class="line">status 当前状态</span><br><span class="line">blame -L &lt;start&gt;,&lt;end&gt; 文件名 查看文件历史，从第start行到end行</span><br><span class="line">diff 查看工作与暂存的差异 --cached &lt;reference&gt; 查看暂存和某次提交的差异，默认是HEAD</span><br><span class="line">show &lt;reference&gt;/标签名 查看某提交信息</span><br><span class="line">tag 给提交或者仓库打标签 名/名 &lt;reference&gt; 给当前仓库/提交打标签 -d 名 删除标签 -m &quot;&quot; 注释信息</span><br></pre></td></tr></table></figure><h4 id="git删除"><a href="#git删除" class="headerlink" title="git删除"></a>git删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clean 清除没有被跟踪的文件 -n 查看要清除什么 -f 执行清除 -x 连ingore的都删除 -X 只删除ignore -d 删除目录 path 指定目录，不加则为整仓库</span><br><span class="line">rm 文件名 将文件移除 --cached 从暂存区移除</span><br><span class="line">reset [--soft | --mixed | --hard] [HEAD]  --soft 工作区不变，暂存区不变，本地仓库回滚 --mixed 默认参数，工作区不变，暂存区回滚，本地仓库回滚，需重新add --hard 三个区都回滚</span><br></pre></td></tr></table></figure><h4 id="git拉取提交"><a href="#git拉取提交" class="headerlink" title="git拉取提交"></a>git拉取提交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">add 文件名 添加文件，用.表示所有</span><br><span class="line">commit --amend 结合上次提交一起 -m &quot;&quot; 注释 -a 跳过暂存区，直接到本地仓库</span><br><span class="line">pull &lt;远程主机名&gt;(origin) &lt;远程分支名&gt;:&lt;本地分支名&gt; 拉取远程主机，分支与本地分支合并  --rebase 执行rebase不执行merge  实际该指令大概可以理解为fetch + merge</span><br><span class="line">push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;  -u 名 指定默认主机 --force 强制推送，冲掉差异 --tags 推送标签</span><br><span class="line">fetch &lt;远程主机名&gt; &lt;分支名&gt; 从远程获取最新版本，不指定分支名即全部</span><br><span class="line">merge 分支名 合并该分支到当前分支</span><br><span class="line">rebase 分支名 将另一分支合并到当前，不留痕迹，不像merge那样，将提交合并成patch，然后转到当前分支apply，当有冲突时，解决完用add后，执行--continue则继续执行apply，或者用--abort结束</span><br></pre></td></tr></table></figure><h4 id="git分支"><a href="#git分支" class="headerlink" title="git分支"></a>git分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">branch 列出本地所有分支；分支名 创建分支；-b 分支名 创建并切换分支；-a 列出所有分支；-m 名1 名2 将名1改为名2；-d 名 删除分支</span><br><span class="line">checkout 文件名；分支名 切换分支；-b 名 [commit id] 创建并切换；commit id 切换到某提交； </span><br><span class="line">chrry-pick &lt;commit id&gt;【..&lt;commit id&gt;】 将提交应用到其它分支</span><br><span class="line">remote</span><br></pre></td></tr></table></figure><h4 id="git补丁"><a href="#git补丁" class="headerlink" title="git补丁"></a>git补丁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">format-patch &lt;commit id&gt; -n 打包id和之前n-1个到patch，patch是一个提交一个；&lt;id&gt;..&lt;id&gt; 打包之间的；--stdout &gt; fiilename.patch 指定名字</span><br><span class="line">diff &lt;id&gt; &lt;id&gt; &gt; filename.diff 打包到diff，只有一个</span><br><span class="line">apply --check filename  应用 但是不创建提交</span><br><span class="line">am filename 应用且创建提交</span><br></pre></td></tr></table></figure><h4 id="git文件"><a href="#git文件" class="headerlink" title="git文件"></a>git文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.gitignore</span><br><span class="line">    filename 忽略指定文件</span><br><span class="line">    filepath 忽略指定文件夹</span><br><span class="line">    *   统配符</span><br><span class="line">    !xxx 这xxx文件不忽略</span><br><span class="line">    /xxx 表示忽略最上层的xxx</span><br><span class="line">git check-ignore检查</span><br><span class="line"></span><br><span class="line">..gitmodules</span><br><span class="line">git submodule add &lt;url&gt; &lt;path&gt; 添加子模块，path为保存路径</span><br><span class="line">git submodule update --init --recursive 拉取子模块</span><br><span class="line"></span><br><span class="line">移除子模块-&gt;移除目录、移除.gitmodules信息、移除.git/config信息、移除.git/module/ 对应信息</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Git语法小记</summary>
    
    
    
    <category term="无处安放" scheme="http://bugnull.com/categories/无处安放/"/>
    
    
    <category term="Git" scheme="http://bugnull.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>QtGlobal</title>
    <link href="http://bugnull.com/QT/qtglobal/"/>
    <id>http://bugnull.com/QT/qtglobal/</id>
    <published>2022-11-06T15:27:55.248Z</published>
    <updated>2022-09-18T07:54:37.176Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QtGlobal"><a href="#QtGlobal" class="headerlink" title="QtGlobal"></a>QtGlobal</h3><blockquote><p>Header:  #include <qtglobal></qtglobal></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QGLOBAL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QGLOBAL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ASSEMBLER__</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   QT_VERSION is (major &lt;&lt; 16) + (minor &lt;&lt; 8) + patch.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_VERSION      QT_VERSION_CHECK(QT_VERSION_MAJOR, QT_VERSION_MINOR, QT_VERSION_PATCH)</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   can be used like #if (QT_VERSION &gt;= QT_VERSION_CHECK(4, 4, 0))</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_VERSION_CHECK(major, minor, patch) ((major&lt;&lt;16)|(minor&lt;&lt;8)|(patch))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_BOOTSTRAPPED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qconfig-bootstrapped.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qconfig.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qtcore-config.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The QT_SUPPORTS macro is deprecated. Don't use it in new code.</span></span><br><span class="line"><span class="comment">// Instead, use QT_CONFIG(feature)</span></span><br><span class="line"><span class="comment">// ### Qt6: remove macro</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _MSC_VER</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_SUPPORTS(FEATURE) (!defined QT_NO_##FEATURE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_SUPPORTS(FEATURE) (!defined(QT_NO_##FEATURE))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    The QT_CONFIG macro implements a safe compile time check for features of Qt.</span></span><br><span class="line"><span class="comment">    Features can be in three states:</span></span><br><span class="line"><span class="comment">        0 or undefined: This will lead to a compile error when testing for it</span></span><br><span class="line"><span class="comment">        -1: The feature is not available</span></span><br><span class="line"><span class="comment">        1: The feature is available</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_CONFIG(feature) (1/QT_FEATURE_##feature == 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_REQUIRE_CONFIG(feature) Q_STATIC_ASSERT_X(QT_FEATURE_##feature == 1, <span class="meta-string">"Required feature "</span> #feature <span class="meta-string">" for file "</span> __FILE__ <span class="meta-string">" not available."</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(6,0,0)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_NO_UNSHARABLE_CONTAINERS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT6_VIRTUAL virtual</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT6_NOT_VIRTUAL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT6_VIRTUAL</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT6_NOT_VIRTUAL virtual</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* These two macros makes it possible to turn the builtin line expander into a</span></span><br><span class="line"><span class="comment"> * string literal. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_STRINGIFY2(x) #x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_STRINGIFY(x) QT_STRINGIFY2(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qsystemdetection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qprocessordetection.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qcompilerdetection.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (__ELF__)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_OF_ELF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (__MACH__) &amp;&amp; defined (__APPLE__)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_OF_MACH_O</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Avoid "unused parameter" warnings</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_UNUSED(x) (void)x;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus) &amp;&amp; defined(Q_COMPILER_STATIC_ASSERT)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT(Condition) static_assert(bool(Condition), #Condition)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT_X(Condition, Message) static_assert(bool(Condition), Message)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(Q_COMPILER_STATIC_ASSERT)</span></span><br><span class="line"><span class="comment">// C11 mode - using the _S version in case &lt;assert.h&gt; doesn't do the right thing</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT(Condition) _Static_assert(!!(Condition), #Condition)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT_X(Condition, Message) _Static_assert(!!(Condition), Message)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="comment">// C89 &amp; C99 version</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT_PRIVATE_JOIN(A, B) Q_STATIC_ASSERT_PRIVATE_JOIN_IMPL(A, B)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT_PRIVATE_JOIN_IMPL(A, B) A ## B</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> __COUNTER__</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT(Condition) \</span></span><br><span class="line">    typedef char Q_STATIC_ASSERT_PRIVATE_JOIN(q_static_assert_result, __COUNTER__) [(Condition) ? 1 : -1];</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT(Condition) \</span></span><br><span class="line">    typedef char Q_STATIC_ASSERT_PRIVATE_JOIN(q_static_assert_result, __LINE__) [(Condition) ? 1 : -1];</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span> <span class="comment">/* __COUNTER__ */</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_STATIC_ASSERT_X(Condition, Message) Q_STATIC_ASSERT(Condition)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_NAMESPACE) || defined(Q_MOC_RUN) <span class="comment">/* user namespace */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_PREPEND_NAMESPACE(name) ::name</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_USE_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_INCLUDE_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_INCLUDE_NAMESPACE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_BEGIN_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_END_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_FORWARD_DECLARE_CLASS(name) class name;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_FORWARD_DECLARE_STRUCT(name) struct name;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_MANGLE_NAMESPACE(name) name</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* user namespace */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_PREPEND_NAMESPACE(name) ::QT_NAMESPACE::name</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_USE_NAMESPACE using namespace ::QT_NAMESPACE;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_NAMESPACE namespace QT_NAMESPACE &#123;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_NAMESPACE &#125;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_INCLUDE_NAMESPACE &#125;</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_INCLUDE_NAMESPACE namespace QT_NAMESPACE &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_BEGIN_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_MOC_NAMESPACE QT_USE_NAMESPACE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_END_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_MOC_NAMESPACE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_FORWARD_DECLARE_CLASS(name) \</span></span><br><span class="line">    QT_BEGIN_NAMESPACE <span class="class"><span class="keyword">class</span> <span class="title">name</span>;</span> QT_END_NAMESPACE \</span><br><span class="line">    <span class="function"><span class="keyword">using</span> <span class="title">QT_PREPEND_NAMESPACE</span><span class="params">(name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_FORWARD_DECLARE_STRUCT(name) \</span></span><br><span class="line">    QT_BEGIN_NAMESPACE <span class="class"><span class="keyword">struct</span> <span class="title">name</span>;</span> QT_END_NAMESPACE \</span><br><span class="line">    <span class="function"><span class="keyword">using</span> <span class="title">QT_PREPEND_NAMESPACE</span><span class="params">(name)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_MANGLE_NAMESPACE0(x) x</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_MANGLE_NAMESPACE1(a, b) a##_##b</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_MANGLE_NAMESPACE2(a, b) QT_MANGLE_NAMESPACE1(a,b)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_MANGLE_NAMESPACE(name) QT_MANGLE_NAMESPACE2( \</span></span><br><span class="line">        QT_MANGLE_NAMESPACE0(name), QT_MANGLE_NAMESPACE0(QT_NAMESPACE))</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QT_NAMESPACE &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> QT_BOOTSTRAPPED</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifndef</span> QT_NO_USING_NAMESPACE</span></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    This expands to a "using QT_NAMESPACE" also in _header files_.</span></span><br><span class="line"><span class="comment">    It is the only way the feature can be used without too much</span></span><br><span class="line"><span class="comment">    pain, but if people _really_ do not want it they can add</span></span><br><span class="line"><span class="comment">    DEFINES += QT_NO_USING_NAMESPACE to their .pro files.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   QT_USE_NAMESPACE</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* user namespace */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_USE_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_BEGIN_INCLUDE_NAMESPACE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_END_INCLUDE_NAMESPACE</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ### Qt6: remove me.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_BEGIN_HEADER</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_END_HEADER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_OS_DARWIN) &amp;&amp; !defined(QT_LARGEFILE_SUPPORT)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_LARGEFILE_SUPPORT 64</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ASSEMBLER__</span></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Size-dependent types (architechture-dependent byte order)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Make sure to update QMetaType when changing these typedefs</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">char</span> qint8;         <span class="comment">/* 8 bit signed */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> quint8;      <span class="comment">/* 8 bit unsigned */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">short</span> qint16;              <span class="comment">/* 16 bit signed */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> quint16;    <span class="comment">/* 16 bit unsigned */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> qint32;                <span class="comment">/* 32 bit signed */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> quint32;      <span class="comment">/* 32 bit unsigned */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_OS_WIN) &amp;&amp; !defined(Q_CC_GNU)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_INT64_C(c) c ## i64    <span class="comment">/* signed 64 bit constant */</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_UINT64_C(c) c ## ui64   <span class="comment">/* unsigned 64 bit constant */</span></span></span><br><span class="line"><span class="keyword">typedef</span> __int64 qint64;            <span class="comment">/* 64 bit signed */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int64 quint64;  <span class="comment">/* 64 bit unsigned */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_INT64_C(c) static_cast<span class="meta-string">&lt;long long&gt;(c ## LL)     /* signed 64 bit constant */</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_UINT64_C(c) static_cast<span class="meta-string">&lt;unsigned long long&gt;(c ## ULL) /* unsigned 64 bit constant */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_INT64_C(c) ((long long)(c ## LL))               <span class="comment">/* signed 64 bit constant */</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_UINT64_C(c) ((unsigned long long)(c ## ULL))    <span class="comment">/* unsigned 64 bit constant */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> qint64;           <span class="comment">/* 64 bit signed */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> quint64; <span class="comment">/* 64 bit unsigned */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> qint64 qlonglong;</span><br><span class="line"><span class="keyword">typedef</span> quint64 qulonglong;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __cplusplus</span></span><br><span class="line"><span class="comment">// In C++ mode, we define below using QIntegerForSize template</span></span><br><span class="line">Q_STATIC_ASSERT_X(<span class="keyword">sizeof</span>(<span class="keyword">ptrdiff_t</span>) == <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>), <span class="string">"Weird ptrdiff_t and size_t definitions"</span>);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> qptrdiff;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> qsizetype;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">ptrdiff_t</span> qintptr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">size_t</span> quintptr;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Useful type definitions for Qt</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_INCLUDE_NAMESPACE</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> uchar;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span> ushort;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uint;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> ulong;</span><br><span class="line">QT_END_INCLUDE_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_COORD_TYPE)</span></span><br><span class="line"><span class="keyword">typedef</span> QT_COORD_TYPE qreal;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> qreal;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_NO_DEPRECATED)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_X</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_VARIABLE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_CONSTRUCTOR</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> !defined(QT_NO_DEPRECATED_WARNINGS)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED Q_DECL_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_X</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_X(text) Q_DECL_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_VARIABLE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_VARIABLE Q_DECL_VARIABLE_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_CONSTRUCTOR</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_CONSTRUCTOR explicit Q_DECL_CONSTRUCTOR_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_X</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_VARIABLE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_VARIABLE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_DEPRECATED_CONSTRUCTOR</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_CONSTRUCTOR</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> Q_DECL_ENUMERATOR_DEPRECATED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_DECL_ENUMERATOR_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_DEPRECATED_WARNINGS_SINCE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> QT_DISABLE_DEPRECATED_BEFORE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_WARNINGS_SINCE QT_DISABLE_DEPRECATED_BEFORE</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEPRECATED_WARNINGS_SINCE QT_VERSION</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_DISABLE_DEPRECATED_BEFORE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DISABLE_DEPRECATED_BEFORE QT_VERSION_CHECK(5, 0, 0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    QT_DEPRECATED_SINCE(major, minor) evaluates as true if the Qt version is greater than</span></span><br><span class="line"><span class="comment">    the deprecation point specified.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Use it to specify from which version of Qt a function or class has been deprecated</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Example:</span></span><br><span class="line"><span class="comment">        #if QT_DEPRECATED_SINCE(5,1)</span></span><br><span class="line"><span class="comment">            QT_DEPRECATED void deprecatedFunction(); //function deprecated since Qt 5.1</span></span><br><span class="line"><span class="comment">        #endif</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_SINCE(major, minor) (QT_VERSION_CHECK(major, minor, 0) &gt; QT_DISABLE_DEPRECATED_BEFORE)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_SINCE(major, minor) 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  QT_DEPRECATED_VERSION(major, minor) and QT_DEPRECATED_VERSION_X(major, minor, text)</span></span><br><span class="line"><span class="comment">  outputs a deprecation warning if QT_DEPRECATED_WARNINGS_SINCE is equal or greater</span></span><br><span class="line"><span class="comment">  than the version specified as major, minor. This makes it possible to deprecate a</span></span><br><span class="line"><span class="comment">  function without annoying a user who needs to stick at a specified minimum version</span></span><br><span class="line"><span class="comment">  and therefore can't use the new function.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_WARNINGS_SINCE &gt;= QT_VERSION_CHECK(5, 12, 0)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_12(text) QT_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_12         QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_12(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_12</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_WARNINGS_SINCE &gt;= QT_VERSION_CHECK(5, 13, 0)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_13(text) QT_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_13         QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_13(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_13</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_WARNINGS_SINCE &gt;= QT_VERSION_CHECK(5, 14, 0)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_14(text) QT_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_14         QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_14(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_14</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_WARNINGS_SINCE &gt;= QT_VERSION_CHECK(5, 15, 0)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_15(text) QT_DEPRECATED_X(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_15         QT_DEPRECATED</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5_15(text)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5_15</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X_5(minor, text)      QT_DEPRECATED_VERSION_X_5_##minor(text)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_X(major, minor, text) QT_DEPRECATED_VERSION_X_##major(minor, text)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_VERSION_5(minor)      QT_DEPRECATED_VERSION_5_##minor</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DEPRECATED_VERSION(major, minor) QT_DEPRECATED_VERSION_##major(minor)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="comment">// A tag to help mark stuff deprecated (cf. QStringViewLiteral)</span></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate &#123;</span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Deprecated_t</span> &#123;</span>&#125;;</span><br><span class="line"><span class="keyword">constexpr</span> Q_DECL_UNUSED Deprecated_t Deprecated = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   The Qt modules' export macros.</span></span><br><span class="line"><span class="comment">   The options are:</span></span><br><span class="line"><span class="comment">    - defined(QT_STATIC): Qt was built or is being built in static mode</span></span><br><span class="line"><span class="comment">    - defined(QT_SHARED): Qt was built or is being built in shared/dynamic mode</span></span><br><span class="line"><span class="comment">   If neither was defined, then QT_SHARED is implied. If Qt was compiled in static</span></span><br><span class="line"><span class="comment">   mode, QT_STATIC is defined in qconfig.h. In shared mode, QT_STATIC is implied</span></span><br><span class="line"><span class="comment">   for the bootstrapped tools.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_BOOTSTRAPPED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> QT_SHARED</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">error</span> <span class="meta-string">"QT_SHARED and QT_BOOTSTRAPPED together don't make sense. Please fix the build"</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">elif</span> !defined(QT_STATIC)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_STATIC</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_SHARED) || !defined(QT_STATIC)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> QT_STATIC</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">error</span> <span class="meta-string">"Both QT_SHARED and QT_STATIC defined, please make up your mind"</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifndef</span> QT_SHARED</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_SHARED</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(QT_BUILD_CORE_LIB)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_CORE_EXPORT Q_DECL_EXPORT</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_CORE_EXPORT Q_DECL_IMPORT</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_CORE_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Some classes do not permit copies to be made of an object. These</span></span><br><span class="line"><span class="comment">   classes contains a private copy constructor and assignment</span></span><br><span class="line"><span class="comment">   operator to disable copying (the compiler gives an error message).</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DISABLE_COPY(Class) \</span></span><br><span class="line">    Class(<span class="keyword">const</span> Class &amp;) = <span class="keyword">delete</span>;\</span><br><span class="line">    Class &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Class &amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DISABLE_MOVE(Class) \</span></span><br><span class="line">    Class(Class &amp;&amp;) = <span class="keyword">delete</span>; \</span><br><span class="line">    Class &amp;<span class="keyword">operator</span>=(Class &amp;&amp;) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DISABLE_COPY_MOVE(Class) \</span></span><br><span class="line">    Q_DISABLE_COPY(Class) \</span><br><span class="line">    Q_DISABLE_MOVE(Class)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   No, this is not an evil backdoor. QT_BUILD_INTERNAL just exports more symbols</span></span><br><span class="line"><span class="comment">   for Qt's internal unit tests. If you want slower loading times and more</span></span><br><span class="line"><span class="comment">   symbols that can vanish from version to version, feel free to define QT_BUILD_INTERNAL.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_BUILD_INTERNAL) &amp;&amp; defined(QT_BUILDING_QT) &amp;&amp; defined(QT_SHARED)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_AUTOTEST_EXPORT Q_DECL_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(QT_BUILD_INTERNAL) &amp;&amp; defined(QT_SHARED)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_AUTOTEST_EXPORT Q_DECL_IMPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_AUTOTEST_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_INIT_RESOURCE(name) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">QT_MANGLE_NAMESPACE</span><span class="params">(qInitResources_ ## name)</span> <span class="params">()</span></span>;       \</span><br><span class="line">        QT_MANGLE_NAMESPACE(qInitResources_ ## name) (); &#125; <span class="keyword">while</span> (<span class="literal">false</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_CLEANUP_RESOURCE(name) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="function"><span class="keyword">extern</span> <span class="keyword">int</span> <span class="title">QT_MANGLE_NAMESPACE</span><span class="params">(qCleanupResources_ ## name)</span> <span class="params">()</span></span>;    \</span><br><span class="line">        QT_MANGLE_NAMESPACE(qCleanupResources_ ## name) (); &#125; <span class="keyword">while</span> (<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * If we're compiling C++ code:</span></span><br><span class="line"><span class="comment"> *  - and this is a non-namespace build, declare qVersion as extern "C"</span></span><br><span class="line"><span class="comment"> *  - and this is a namespace build, declare it as a regular function</span></span><br><span class="line"><span class="comment"> *    (we're already inside QT_BEGIN_NAMESPACE / QT_END_NAMESPACE)</span></span><br><span class="line"><span class="comment"> * If we're compiling C code, simply declare the function. If Qt was compiled</span></span><br><span class="line"><span class="comment"> * in a namespace, qVersion isn't callable anyway.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_NAMESPACE) &amp;&amp; defined(__cplusplus) &amp;&amp; !defined(Q_QDOC)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function">Q_CORE_EXPORT Q_DECL_CONST_FUNCTION <span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">qVersion</span><span class="params">(<span class="keyword">void</span>)</span> Q_DECL_NOEXCEPT</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cplusplus)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_CONSTRUCTOR_FUNCTION</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> Q_CONSTRUCTOR_FUNCTION0(AFUNC) \</span></span><br><span class="line">    <span class="keyword">namespace</span> &#123; \</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">AFUNC</span> ## _<span class="title">ctor_class_</span> &#123;</span> \</span><br><span class="line">        <span class="keyword">inline</span> AFUNC ## _ctor_class_() &#123; AFUNC(); &#125; \</span><br><span class="line">    &#125; AFUNC ## _ctor_instance_; \</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> Q_CONSTRUCTOR_FUNCTION(AFUNC) Q_CONSTRUCTOR_FUNCTION0(AFUNC)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_DESTRUCTOR_FUNCTION</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> Q_DESTRUCTOR_FUNCTION0(AFUNC) \</span></span><br><span class="line">    <span class="keyword">namespace</span> &#123; \</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">AFUNC</span> ## _<span class="title">dtor_class_</span> &#123;</span> \</span><br><span class="line">        <span class="keyword">inline</span> AFUNC ## _dtor_class_() &#123; &#125; \</span><br><span class="line">        <span class="keyword">inline</span> ~ AFUNC ## _dtor_class_() &#123; AFUNC(); &#125; \</span><br><span class="line">    &#125; AFUNC ## _dtor_instance_; \</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> Q_DESTRUCTOR_FUNCTION(AFUNC) Q_DESTRUCTOR_FUNCTION0(AFUNC)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate &#123;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">AlignOfHelper</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        T type;</span><br><span class="line"></span><br><span class="line">        AlignOfHelper();</span><br><span class="line">        ~AlignOfHelper();</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">struct</span> <span class="title">AlignOf_Default</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">        <span class="keyword">enum</span> &#123; Value = <span class="keyword">sizeof</span>(AlignOfHelper&lt;T&gt;) - <span class="keyword">sizeof</span>(T) &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">AlignOf</span> :</span> AlignOf_Default&lt;T&gt; &#123; &#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">AlignOf</span>&lt;T &amp;&gt; :</span> AlignOf&lt;T&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">AlignOf</span>&lt;T &amp;&amp;&gt; :</span> AlignOf&lt;T&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">size_t</span> N, <span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">AlignOf</span>&lt;T[N]&gt; :</span> AlignOf&lt;T&gt; &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_PROCESSOR_X86_32) &amp;&amp; !defined(Q_OS_WIN)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">AlignOf_WorkaroundForI386Abi</span> &#123;</span> <span class="keyword">enum</span> &#123; Value = <span class="keyword">sizeof</span>(T) &#125;; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// x86 ABI weirdness</span></span><br><span class="line">    <span class="comment">// Alignment of naked type is 8, but inside struct has alignment 4.</span></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;double&gt;  :</span> AlignOf_WorkaroundForI386Abi&lt;<span class="keyword">double</span>&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;qint64&gt;  :</span> AlignOf_WorkaroundForI386Abi&lt;qint64&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;quint64&gt; :</span> AlignOf_WorkaroundForI386Abi&lt;quint64&gt; &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CC_CLANG</span></span><br><span class="line">    <span class="comment">// GCC and Clang seem to disagree wrt to alignment of arrays</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">size_t</span> N&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;double[N]&gt;   :</span> AlignOf_Default&lt;<span class="keyword">double</span>&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">size_t</span> N&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;qint64[N]&gt;   :</span> AlignOf_Default&lt;qint64&gt; &#123;&#125;;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">size_t</span> N&gt; <span class="class"><span class="keyword">struct</span> <span class="title">AlignOf</span>&lt;quint64[N]&gt;  :</span> AlignOf_Default&lt;quint64&gt; &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125; <span class="comment">// namespace QtPrivate</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_EMULATED_ALIGNOF(T) \</span></span><br><span class="line">    (<span class="keyword">size_t</span>(QT_PREPEND_NAMESPACE(QtPrivate)::AlignOf&lt;T&gt;::Value))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_ALIGNOF</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_ALIGNOF(T) QT_EMULATED_ALIGNOF(T)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  quintptr and qptrdiff is guaranteed to be the same size as a pointer, i.e.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      sizeof(void *) == sizeof(quintptr)</span></span><br><span class="line"><span class="comment">      &amp;&amp; sizeof(void *) == sizeof(qptrdiff)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  size_t and qsizetype are not guaranteed to be the same size as a pointer, but</span></span><br><span class="line"><span class="comment">  they usually are.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span>&gt; <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>;</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;    <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>&lt;1&gt; &#123;</span> <span class="keyword">typedef</span> quint8  Unsigned; <span class="keyword">typedef</span> qint8  Signed; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;    <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>&lt;2&gt; &#123;</span> <span class="keyword">typedef</span> quint16 Unsigned; <span class="keyword">typedef</span> qint16 Signed; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;    <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>&lt;4&gt; &#123;</span> <span class="keyword">typedef</span> quint32 Unsigned; <span class="keyword">typedef</span> qint32 Signed; &#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;&gt;    <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>&lt;8&gt; &#123;</span> <span class="keyword">typedef</span> quint64 Unsigned; <span class="keyword">typedef</span> qint64 Signed; &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_CC_GNU) &amp;&amp; defined(__SIZEOF_INT128__)</span></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;    <span class="class"><span class="keyword">struct</span> <span class="title">QIntegerForSize</span>&lt;16&gt; &#123;</span> __extension__ <span class="keyword">typedef</span> <span class="keyword">unsigned</span> __int128 Unsigned; __extension__ <span class="keyword">typedef</span> __int128 Signed; &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">struct</span> <span class="title">QIntegerForSizeof</span>:</span> QIntegerForSize&lt;<span class="keyword">sizeof</span>(T)&gt; &#123; &#125;;</span><br><span class="line"><span class="keyword">typedef</span> QIntegerForSize&lt;Q_PROCESSOR_WORDSIZE&gt;::Signed qregisterint;</span><br><span class="line"><span class="keyword">typedef</span> QIntegerForSize&lt;Q_PROCESSOR_WORDSIZE&gt;::Unsigned qregisteruint;</span><br><span class="line"><span class="keyword">typedef</span> QIntegerForSizeof&lt;<span class="keyword">void</span>*&gt;::Unsigned quintptr;</span><br><span class="line"><span class="keyword">typedef</span> QIntegerForSizeof&lt;<span class="keyword">void</span>*&gt;::Signed qptrdiff;</span><br><span class="line"><span class="keyword">typedef</span> qptrdiff qintptr;</span><br><span class="line"><span class="keyword">using</span> qsizetype = QIntegerForSizeof&lt;<span class="built_in">std</span>::<span class="keyword">size_t</span>&gt;::Signed;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* moc compats (signals/slots) */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_MOC_COMPAT</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MOC_COMPAT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">undef</span> QT_MOC_COMPAT</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MOC_COMPAT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_ASCII_CAST_WARNINGS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_ASCII_CAST_WARN Q_DECL_DEPRECATED_X(<span class="meta-string">"Use fromUtf8, QStringLiteral, or QLatin1String"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_ASCII_CAST_WARN</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_PROCESSOR_X86_32</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(Q_CC_GNU)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_FASTCALL __attribute__((regparm(3)))</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">elif</span> defined(Q_CC_MSVC)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_FASTCALL __fastcall</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#     <span class="meta-keyword">define</span> QT_FASTCALL</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_FASTCALL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// enable gcc warnings for printf-style functions</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_CC_GNU) &amp;&amp; !defined(__INSURE__)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(Q_CC_MINGW) &amp;&amp; !defined(Q_CC_CLANG)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ATTRIBUTE_FORMAT_PRINTF(A, B) \</span></span><br><span class="line">         __attribute__((format(gnu_printf, (A), (B))))</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ATTRIBUTE_FORMAT_PRINTF(A, B) \</span></span><br><span class="line">         __attribute__((format(<span class="built_in">printf</span>, (A), (B))))</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_ATTRIBUTE_FORMAT_PRINTF(A, B)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CC_MSVC</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_NEVER_INLINE __declspec(noinline)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_ALWAYS_INLINE __forceinline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(Q_CC_GNU)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_NEVER_INLINE __attribute__((noinline))</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_ALWAYS_INLINE inline __attribute__((always_inline))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_NEVER_INLINE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_ALWAYS_INLINE inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_CC_GNU) &amp;&amp; defined(Q_OS_WIN) &amp;&amp; !defined(QT_NO_DATA_RELOCATION)</span></span><br><span class="line"><span class="comment">// ### Qt6: you can remove me</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_INIT_METAOBJECT __attribute__((init_priority(101)))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_INIT_METAOBJECT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//defines the type for the WNDPROC on windows</span></span><br><span class="line"><span class="comment">//the alignment needs to be forced for sse2 to not crash with mingw</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_OS_WIN)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(Q_CC_MINGW) &amp;&amp; !defined(Q_OS_WIN64)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_ENSURE_STACK_ALIGNED_FOR_SSE __attribute__ ((force_align_arg_pointer))</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_ENSURE_STACK_ALIGNED_FOR_SSE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_WIN_CALLBACK CALLBACK QT_ENSURE_STACK_ALIGNED_FOR_SSE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QNoImplicitBoolCast;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Utility macros and inline functions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> T <span class="title">qAbs</span><span class="params">(<span class="keyword">const</span> T &amp;t)</span> </span>&#123; <span class="keyword">return</span> t &gt;= <span class="number">0</span> ? t : -t; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qRound</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> d &gt;= <span class="number">0.0</span> ? <span class="keyword">int</span>(d + <span class="number">0.5</span>) : <span class="keyword">int</span>(d - <span class="keyword">double</span>(<span class="keyword">int</span>(d<span class="number">-1</span>)) + <span class="number">0.5</span>) + <span class="keyword">int</span>(d<span class="number">-1</span>); &#125;</span><br><span class="line"><span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qRound</span><span class="params">(<span class="keyword">float</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> d &gt;= <span class="number">0.0f</span> ? <span class="keyword">int</span>(d + <span class="number">0.5f</span>) : <span class="keyword">int</span>(d - <span class="keyword">float</span>(<span class="keyword">int</span>(d<span class="number">-1</span>)) + <span class="number">0.5f</span>) + <span class="keyword">int</span>(d<span class="number">-1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> qint64 <span class="title">qRound64</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> d &gt;= <span class="number">0.0</span> ? qint64(d + <span class="number">0.5</span>) : qint64(d - <span class="keyword">double</span>(qint64(d<span class="number">-1</span>)) + <span class="number">0.5</span>) + qint64(d<span class="number">-1</span>); &#125;</span><br><span class="line"><span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> qint64 <span class="title">qRound64</span><span class="params">(<span class="keyword">float</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> d &gt;= <span class="number">0.0f</span> ? qint64(d + <span class="number">0.5f</span>) : qint64(d - <span class="keyword">float</span>(qint64(d<span class="number">-1</span>)) + <span class="number">0.5f</span>) + qint64(d<span class="number">-1</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keyword">const</span> T &amp;<span class="title">qMin</span><span class="params">(<span class="keyword">const</span> T &amp;a, <span class="keyword">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> (a &lt; b) ? a : b; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keyword">const</span> T &amp;<span class="title">qMax</span><span class="params">(<span class="keyword">const</span> T &amp;a, <span class="keyword">const</span> T &amp;b)</span> </span>&#123; <span class="keyword">return</span> (a &lt; b) ? b : a; &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> <span class="keyword">inline</span> <span class="keyword">const</span> T &amp;<span class="title">qBound</span><span class="params">(<span class="keyword">const</span> T &amp;min, <span class="keyword">const</span> T &amp;val, <span class="keyword">const</span> T &amp;max)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> qMax(min, qMin(max, val)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_FORWARD_DECLARE_OBJC_CLASS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> __OBJC__</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_FORWARD_DECLARE_OBJC_CLASS(classname) @class classname</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_FORWARD_DECLARE_OBJC_CLASS(classname) typedef struct objc_object classname</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_FORWARD_DECLARE_CF_TYPE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_FORWARD_DECLARE_CF_TYPE(type) typedef const struct __ ## type * type ## Ref</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_FORWARD_DECLARE_MUTABLE_CF_TYPE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_FORWARD_DECLARE_MUTABLE_CF_TYPE(type) typedef struct __ ## type * type ## Ref</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_FORWARD_DECLARE_CG_TYPE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_FORWARD_DECLARE_CG_TYPE(type) typedef const struct type *type ## Ref;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_FORWARD_DECLARE_MUTABLE_CG_TYPE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_FORWARD_DECLARE_MUTABLE_CG_TYPE(type) typedef struct type *type ## Ref;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_OS_DARWIN</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, ios, tvos, watchos) \</span></span><br><span class="line">    ((defined(__MAC_OS_X_VERSION_MAX_ALLOWED) &amp;&amp; macos != __MAC_NA &amp;&amp; __MAC_OS_X_VERSION_MAX_ALLOWED &gt;= macos) || \</span><br><span class="line">     (defined(__IPHONE_OS_VERSION_MAX_ALLOWED) &amp;&amp; ios != __IPHONE_NA &amp;&amp; __IPHONE_OS_VERSION_MAX_ALLOWED &gt;= ios) || \</span><br><span class="line">     (defined(__TV_OS_VERSION_MAX_ALLOWED) &amp;&amp; tvos != __TVOS_NA &amp;&amp; __TV_OS_VERSION_MAX_ALLOWED &gt;= tvos) || \</span><br><span class="line">     (defined(__WATCH_OS_VERSION_MAX_ALLOWED) &amp;&amp; watchos != __WATCHOS_NA &amp;&amp; __WATCH_OS_VERSION_MAX_ALLOWED &gt;= watchos))</span><br><span class="line"></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DARWIN_DEPLOYMENT_TARGET_BELOW(macos, ios, tvos, watchos) \</span></span><br><span class="line">    ((defined(__MAC_OS_X_VERSION_MIN_REQUIRED) &amp;&amp; macos != __MAC_NA &amp;&amp; __MAC_OS_X_VERSION_MIN_REQUIRED &lt; macos) || \</span><br><span class="line">     (defined(__IPHONE_OS_VERSION_MIN_REQUIRED) &amp;&amp; ios != __IPHONE_NA &amp;&amp; __IPHONE_OS_VERSION_MIN_REQUIRED &lt; ios) || \</span><br><span class="line">     (defined(__TV_OS_VERSION_MIN_REQUIRED) &amp;&amp; tvos != __TVOS_NA &amp;&amp; __TV_OS_VERSION_MIN_REQUIRED &lt; tvos) || \</span><br><span class="line">     (defined(__WATCH_OS_VERSION_MIN_REQUIRED) &amp;&amp; watchos != __WATCHOS_NA &amp;&amp; __WATCH_OS_VERSION_MIN_REQUIRED &lt; watchos))</span><br><span class="line"></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MACOS_IOS_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, ios) \</span></span><br><span class="line">      QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, ios, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(macos) \</span></span><br><span class="line">      QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, __IPHONE_NA, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_IOS_PLATFORM_SDK_EQUAL_OR_ABOVE(ios) \</span></span><br><span class="line">      QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_NA, ios, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_TVOS_PLATFORM_SDK_EQUAL_OR_ABOVE(tvos) \</span></span><br><span class="line">      QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_NA, __IPHONE_NA, tvos, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_WATCHOS_PLATFORM_SDK_EQUAL_OR_ABOVE(watchos) \</span></span><br><span class="line">      QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(__MAC_NA, __IPHONE_NA, __TVOS_NA, watchos)</span><br><span class="line"></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MACOS_IOS_DEPLOYMENT_TARGET_BELOW(macos, ios) \</span></span><br><span class="line">      QT_DARWIN_DEPLOYMENT_TARGET_BELOW(macos, ios, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MACOS_DEPLOYMENT_TARGET_BELOW(macos) \</span></span><br><span class="line">      QT_DARWIN_DEPLOYMENT_TARGET_BELOW(macos, __IPHONE_NA, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_IOS_DEPLOYMENT_TARGET_BELOW(ios) \</span></span><br><span class="line">      QT_DARWIN_DEPLOYMENT_TARGET_BELOW(__MAC_NA, ios, __TVOS_NA, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_TVOS_DEPLOYMENT_TARGET_BELOW(tvos) \</span></span><br><span class="line">      QT_DARWIN_DEPLOYMENT_TARGET_BELOW(__MAC_NA, __IPHONE_NA, tvos, __WATCHOS_NA)</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_WATCHOS_DEPLOYMENT_TARGET_BELOW(watchos) \</span></span><br><span class="line">      QT_DARWIN_DEPLOYMENT_TARGET_BELOW(__MAC_NA, __IPHONE_NA, __TVOS_NA, watchos)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Compatibility synonyms, do not use</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(osx, ios) QT_MACOS_IOS_PLATFORM_SDK_EQUAL_OR_ABOVE(osx, ios)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_MAC_DEPLOYMENT_TARGET_BELOW(osx, ios) QT_MACOS_IOS_DEPLOYMENT_TARGET_BELOW(osx, ios)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(osx) QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(osx)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_OSX_DEPLOYMENT_TARGET_BELOW(osx) QT_MACOS_DEPLOYMENT_TARGET_BELOW(osx)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Implemented in qcore_mac_objc.mm</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QMacAutoReleasePool</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QMacAutoReleasePool();</span><br><span class="line">    ~QMacAutoReleasePool();</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QMacAutoReleasePool)</span><br><span class="line">    <span class="keyword">void</span> *pool;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_DARWIN_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, ios, tvos, watchos) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_MACOS_IOS_PLATFORM_SDK_EQUAL_OR_ABOVE(macos, ios) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_MACOS_PLATFORM_SDK_EQUAL_OR_ABOVE(macos) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_IOS_PLATFORM_SDK_EQUAL_OR_ABOVE(ios) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TVOS_PLATFORM_SDK_EQUAL_OR_ABOVE(tvos) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_WATCHOS_PLATFORM_SDK_EQUAL_OR_ABOVE(watchos) (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_MAC_PLATFORM_SDK_EQUAL_OR_ABOVE(osx, ios) (0)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_OSX_PLATFORM_SDK_EQUAL_OR_ABOVE(osx) (0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// Q_OS_DARWIN</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Data stream functions are provided by many classes (defined in qdatastream.h)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QDataStream</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">qt_noop</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* These wrap try/catch so we can switch off exceptions later.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   Beware - do not use more than one QT_CATCH per QT_TRY, and do not use</span></span><br><span class="line"><span class="comment">   the exception instance in the catch block.</span></span><br><span class="line"><span class="comment">   If you can't live with those constraints, don't use these macros.</span></span><br><span class="line"><span class="comment">   Use the QT_NO_EXCEPTIONS macro to protect your code instead.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_NO_EXCEPTIONS)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> !defined(Q_MOC_RUN)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">if</span> (defined(Q_CC_CLANG) &amp;&amp; !defined(Q_CC_INTEL) &amp;&amp; !__has_feature(cxx_exceptions)) || \</span></span><br><span class="line">        (defined(Q_CC_GNU) &amp;&amp; !defined(__EXCEPTIONS))</span><br><span class="line"><span class="meta">#      <span class="meta-keyword">define</span> QT_NO_EXCEPTIONS</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">elif</span> defined(QT_BOOTSTRAPPED)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_NO_EXCEPTIONS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_NO_EXCEPTIONS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_TRY <span class="meta-keyword">if</span> (true)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_CATCH(A) <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_THROW(A) qt_noop()</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_RETHROW qt_noop()</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_TERMINATE_ON_EXCEPTION(expr) do &#123; expr; &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_TRY try</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_CATCH(A) catch (A)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_THROW(A) throw A</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_RETHROW throw</span></span><br><span class="line"><span class="function">Q_NORETURN Q_DECL_COLD_FUNCTION Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qTerminate</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">ifdef</span> Q_COMPILER_NOEXCEPT</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_TERMINATE_ON_EXCEPTION(expr) do &#123; expr; &#125; while (false)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> QT_TERMINATE_ON_EXCEPTION(expr) do &#123; try &#123; expr; &#125; catch (...) &#123; qTerminate(); &#125; &#125; while (false)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Q_CORE_EXPORT Q_DECL_CONST_FUNCTION <span class="keyword">bool</span> <span class="title">qSharedBuild</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_OUTOFLINE_TEMPLATE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_OUTOFLINE_TEMPLATE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_INLINE_TEMPLATE</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_INLINE_TEMPLATE inline</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Debugging and error handling</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_NO_DEBUG) &amp;&amp; !defined(QT_DEBUG)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// QtPrivate::asString defined in qstring.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> qPrintable</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> qPrintable(string) QtPrivate::asString(string).toLocal8Bit().constData()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> qUtf8Printable</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> qUtf8Printable(string) QtPrivate::asString(string).toUtf8().constData()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Wrap QString::utf16() with enough casts to allow passing it</span></span><br><span class="line"><span class="comment">    to QString::asprintf("%ls") without warnings.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> qUtf16Printable</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> qUtf16Printable(string) \</span></span><br><span class="line">    <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">wchar_t</span>*&gt;(<span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> <span class="keyword">void</span>*&gt;(QString(<span class="built_in">string</span>).utf16()))</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QString</span>;</span></span><br><span class="line">Q_DECL_COLD_FUNCTION</span><br><span class="line"><span class="function">Q_CORE_EXPORT QString <span class="title">qt_error_string</span><span class="params">(<span class="keyword">int</span> errorCode = <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_CC_MSVC</span></span><br><span class="line">Q_NORETURN</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">Q_DECL_COLD_FUNCTION</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_assert</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *assertion, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> line)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(Q_ASSERT)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(QT_NO_DEBUG) &amp;&amp; !defined(QT_FORCE_ASSERTS)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ASSERT(cond) static_cast<span class="meta-string">&lt;void&gt;(false &amp;&amp; (cond))</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ASSERT(cond) ((cond) ? static_cast<span class="meta-string">&lt;void&gt;(0) : qt_assert(#cond, __FILE__, __LINE__))</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_CC_MSVC</span></span><br><span class="line">Q_NORETURN</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">Q_DECL_COLD_FUNCTION</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_assert_x</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *where, <span class="keyword">const</span> <span class="keyword">char</span> *what, <span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> line)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(Q_ASSERT_X)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(QT_NO_DEBUG) &amp;&amp; !defined(QT_FORCE_ASSERTS)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ASSERT_X(cond, where, what) static_cast<span class="meta-string">&lt;void&gt;(false &amp;&amp; (cond))</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_ASSERT_X(cond, where, what) ((cond) ? static_cast<span class="meta-string">&lt;void&gt;(0) : qt_assert_x(where, what, __FILE__, __LINE__))</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Q_NORETURN Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_check_pointer</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *, <span class="keyword">int</span>)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">Q_DECL_COLD_FUNCTION</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qBadAlloc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_NO_EXCEPTIONS</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(QT_NO_DEBUG) &amp;&amp; !defined(QT_FORCE_ASSERTS)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_CHECK_PTR(p) qt_noop()</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> Q_CHECK_PTR(p) do &#123;<span class="meta-keyword">if</span> (!(p)) qt_check_pointer(__FILE__,__LINE__);&#125; while (false)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_CHECK_PTR(p) do &#123; <span class="meta-keyword">if</span> (!(p)) qBadAlloc(); &#125; while (false)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> T *<span class="title">q_check_ptr</span><span class="params">(T *p)</span> </span>&#123; Q_CHECK_PTR(p); <span class="keyword">return</span> p; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*QFunctionPointer)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(Q_UNIMPLEMENTED)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_UNIMPLEMENTED() qWarning(<span class="meta-string">"Unimplemented code."</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED <span class="keyword">bool</span> <span class="title">qFuzzyCompare</span><span class="params">(<span class="keyword">double</span> p1, <span class="keyword">double</span> p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (qAbs(p1 - p2) * <span class="number">1000000000000.</span> &lt;= qMin(qAbs(p1), qAbs(p2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED <span class="keyword">bool</span> <span class="title">qFuzzyCompare</span><span class="params">(<span class="keyword">float</span> p1, <span class="keyword">float</span> p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (qAbs(p1 - p2) * <span class="number">100000.f</span> &lt;= qMin(qAbs(p1), qAbs(p2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED <span class="keyword">bool</span> <span class="title">qFuzzyIsNull</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qAbs(d) &lt;= <span class="number">0.000000000001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED  <span class="keyword">bool</span> <span class="title">qFuzzyIsNull</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> qAbs(f) &lt;= <span class="number">0.00001f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QT_WARNING_PUSH</span><br><span class="line">QT_WARNING_DISABLE_CLANG(<span class="string">"-Wfloat-equal"</span>)</span><br><span class="line">QT_WARNING_DISABLE_GCC(<span class="string">"-Wfloat-equal"</span>)</span><br><span class="line">QT_WARNING_DISABLE_INTEL(<span class="number">1572</span>)</span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED <span class="keyword">bool</span> <span class="title">qIsNull</span><span class="params">(<span class="keyword">double</span> d)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d == <span class="number">0.0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_REQUIRED_RESULT Q_DECL_CONSTEXPR <span class="keyword">static</span> <span class="keyword">inline</span> Q_DECL_UNUSED <span class="keyword">bool</span> <span class="title">qIsNull</span><span class="params">(<span class="keyword">float</span> f)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> f == <span class="number">0.0f</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QT_WARNING_POP</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Compilers which follow outdated template instantiation rules</span></span><br><span class="line"><span class="comment">   require a class to have a comparison operator to exist when</span></span><br><span class="line"><span class="comment">   a QList of this type is instantiated. It's not actually</span></span><br><span class="line"><span class="comment">   used in the list, though. Hence the dummy implementation.</span></span><br><span class="line"><span class="comment">   Just in case other code relies on it we better trigger a warning</span></span><br><span class="line"><span class="comment">   mandating a real implementation.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_FULL_TEMPLATE_INSTANTIATION</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_DUMMY_COMPARISON_OPERATOR(C) \</span></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> C&amp;) <span class="keyword">const</span> &#123; \</span><br><span class="line">        qWarning(#C<span class="string">"::operator==(const "</span>#C<span class="string">"&amp;) was called"</span>); \</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; \</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_DUMMY_COMPARISON_OPERATOR(C)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">QT_WARNING_PUSH</span><br><span class="line"><span class="comment">// warning: noexcept-expression evaluates to 'false' because of a call to 'void swap(..., ...)'</span></span><br><span class="line">QT_WARNING_DISABLE_GCC(<span class="string">"-Wnoexcept"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">namespace</span> SwapExceptionTester &#123; <span class="comment">// insulate users from the "using std::swap" below</span></span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap; <span class="comment">// import std::swap</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">checkSwap</span><span class="params">(T &amp;t)</span></span></span><br><span class="line"><span class="function">        <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(swap(t, t)))</span></span>;</span><br><span class="line">    <span class="comment">// declared, but not implemented (only to be used in unevaluated contexts (noexcept operator))</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="comment">// namespace QtPrivate</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">qSwap</span><span class="params">(T &amp;value1, T &amp;value2)</span></span></span><br><span class="line"><span class="function">    <span class="title">noexcept</span><span class="params">(<span class="keyword">noexcept</span>(QtPrivate::SwapExceptionTester::checkSwap(value1)))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::swap;</span><br><span class="line">    swap(value1, value2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QT_WARNING_POP</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line"><span class="function">Q_CORE_EXPORT QT_DEPRECATED <span class="keyword">void</span> *<span class="title">qMalloc</span><span class="params">(<span class="keyword">size_t</span> size)</span> <span class="title">Q_ALLOC_SIZE</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QT_DEPRECATED <span class="keyword">void</span> <span class="title">qFree</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QT_DEPRECATED <span class="keyword">void</span> *<span class="title">qRealloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span> <span class="title">Q_ALLOC_SIZE</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QT_DEPRECATED <span class="keyword">void</span> *<span class="title">qMemCopy</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">const</span> <span class="keyword">void</span> *src, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QT_DEPRECATED <span class="keyword">void</span> *<span class="title">qMemSet</span><span class="params">(<span class="keyword">void</span> *dest, <span class="keyword">int</span> c, <span class="keyword">size_t</span> n)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> *<span class="title">qMallocAligned</span><span class="params">(<span class="keyword">size_t</span> size, <span class="keyword">size_t</span> alignment)</span> <span class="title">Q_ALLOC_SIZE</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> *<span class="title">qReallocAligned</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> oldsize, <span class="keyword">size_t</span> alignment)</span> <span class="title">Q_ALLOC_SIZE</span><span class="params">(<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qFreeAligned</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   Avoid some particularly useless warnings from some stupid compilers.</span></span><br><span class="line"><span class="comment">   To get ALL C++ compiler warnings, define QT_CC_WARNINGS or comment out</span></span><br><span class="line"><span class="comment">   the line "#define QT_NO_WARNINGS".</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_CC_WARNINGS)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> QT_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_NO_WARNINGS)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">if</span> defined(Q_CC_MSVC)</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4251</span>) <span class="comment">/* class 'type' needs to have dll-interface to be used by clients of class 'type2' */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4244</span>) <span class="comment">/* conversion from 'type1' to 'type2', possible loss of data */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4275</span>) <span class="comment">/* non - DLL-interface classkey 'identifier' used as base for DLL-interface classkey 'identifier' */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4514</span>) <span class="comment">/* unreferenced inline function has been removed */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4800</span>) <span class="comment">/* 'type' : forcing value to bool 'true' or 'false' (performance warning) */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4097</span>) <span class="comment">/* typedef-name 'identifier1' used as synonym for class-name 'identifier2' */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4706</span>) <span class="comment">/* assignment within conditional expression */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4355</span>) <span class="comment">/* 'this' : used in base member initializer list */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4710</span>) <span class="comment">/* function not inlined */</span></span><br><span class="line">QT_WARNING_DISABLE_MSVC(<span class="number">4530</span>) <span class="comment">/* C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc */</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">elif</span> defined(Q_CC_BOR)</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> option -w-inl</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> option -w-aus</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> warn -inl</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> warn -pia</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> warn -ccc</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> warn -rch</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">pragma</span> warn -sig</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Work around MSVC warning about use of 3-arg algorithms</span></span><br><span class="line"><span class="comment">// until we can depend on the C++14 4-arg ones.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// These algortithms do NOT check for equal length.</span></span><br><span class="line"><span class="comment">// They need to be treated as if they called the 3-arg version (which they do)!</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CC_MSVC</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_3ARG_ALG(alg, f1, l1, f2, l2) \</span></span><br><span class="line">    <span class="built_in">std</span>::alg(f1, l1, f2, l2)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_3ARG_ALG(alg, f1, l1, f2, l2)     \</span></span><br><span class="line">    [&amp;f1, &amp;l1, &amp;f2, &amp;l2]() &#123;                  \</span><br><span class="line">        Q_UNUSED(l2);                         \</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::alg(f1, l1, f2);          \</span><br><span class="line">    &#125;()</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ForwardIterator1, <span class="keyword">typename</span> ForwardIterator2&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">qt_is_permutation</span><span class="params">(ForwardIterator1 first1, ForwardIterator1 last1,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ForwardIterator2 first2, ForwardIterator2 last2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QT_3ARG_ALG(is_permutation, first1, last1, first2, last2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> QT_3ARG_ALG</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this adds const to non-const objects (like std::as_const)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">Q_DECL_CONSTEXPR <span class="keyword">typename</span> <span class="built_in">std</span>::add_const&lt;T&gt;::<span class="function">type &amp;<span class="title">qAsConst</span><span class="params">(T &amp;t)</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> t; &#125;</span><br><span class="line"><span class="comment">// prevent rvalue arguments:</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qAsConst</span><span class="params">(<span class="keyword">const</span> T &amp;&amp;)</span> </span>= <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// like std::exchange</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U = T&gt;</span><br><span class="line">Q_DECL_RELAXED_CONSTEXPR T qExchange(T &amp;t, U &amp;&amp;newValue)</span><br><span class="line">&#123;</span><br><span class="line">    T old = <span class="built_in">std</span>::move(t);</span><br><span class="line">    t = <span class="built_in">std</span>::forward&lt;U&gt;(newValue);</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_FOREACH</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QForeachContainer</span> &#123;</span></span><br><span class="line">    Q_DISABLE_COPY(QForeachContainer)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QForeachContainer(<span class="keyword">const</span> T &amp;t) : c(t), i(qAsConst(c).begin()), e(qAsConst(c).end()) &#123;&#125;</span><br><span class="line">    QForeachContainer(T &amp;&amp;t) : c(<span class="built_in">std</span>::move(t)), i(qAsConst(c).begin()), e(qAsConst(c).end())  &#123;&#125;</span><br><span class="line"></span><br><span class="line">    QForeachContainer(QForeachContainer &amp;&amp;other)</span><br><span class="line">        : c(<span class="built_in">std</span>::move(other.c)),</span><br><span class="line">          i(qAsConst(c).begin()),</span><br><span class="line">          e(qAsConst(c).end()),</span><br><span class="line">          control(<span class="built_in">std</span>::move(other.control))</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QForeachContainer &amp;<span class="keyword">operator</span>=(QForeachContainer &amp;&amp;other)</span><br><span class="line">    &#123;</span><br><span class="line">        c = <span class="built_in">std</span>::move(other.c);</span><br><span class="line">        i = qAsConst(c).begin();</span><br><span class="line">        e = qAsConst(c).end();</span><br><span class="line">        control = <span class="built_in">std</span>::move(other.control);</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    T c;</span><br><span class="line">    <span class="keyword">typename</span> T::const_iterator i, e;</span><br><span class="line">    <span class="keyword">int</span> control = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">QForeachContainer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;T&gt;::type&gt; qMakeForeachContainer(T &amp;&amp;t)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> QForeachContainer&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::decay&lt;T&gt;::type&gt;(<span class="built_in">std</span>::forward&lt;T&gt;(t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201703L</span></span><br><span class="line"><span class="comment">// Use C++17 if statement with initializer. User's code ends up in a else so</span></span><br><span class="line"><span class="comment">// scoping of different ifs is not broken</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_FOREACH(variable, container)                                   \</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> _container_ = QtPrivate::qMakeForeachContainer(container);     \</span><br><span class="line">     _container_.i != _container_.e;  ++_container_.i)                   \</span><br><span class="line">    <span class="keyword">if</span> (variable = *_container_.i; <span class="literal">false</span>) &#123;&#125; <span class="keyword">else</span></span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line"><span class="comment">// Explanation of the control word:</span></span><br><span class="line"><span class="comment">//  - it's initialized to 1</span></span><br><span class="line"><span class="comment">//  - that means both the inner and outer loops start</span></span><br><span class="line"><span class="comment">//  - if there were no breaks, at the end of the inner loop, it's set to 0, which</span></span><br><span class="line"><span class="comment">//    causes it to exit (the inner loop is run exactly once)</span></span><br><span class="line"><span class="comment">//  - at the end of the outer loop, it's inverted, so it becomes 1 again, allowing</span></span><br><span class="line"><span class="comment">//    the outer loop to continue executing</span></span><br><span class="line"><span class="comment">//  - if there was a break inside the inner loop, it will exit with control still</span></span><br><span class="line"><span class="comment">//    set to 1; in that case, the outer loop will invert it to 0 and will exit too</span></span><br><span class="line">#define Q_FOREACH(variable, container)                                \</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> _container_ = QtPrivate::qMakeForeachContainer(container); \</span><br><span class="line">     _container_.control &amp;&amp; _container_.i != _container_.e;         \</span><br><span class="line">     ++_container_.i, _container_.control ^= <span class="number">1</span>)                     \</span><br><span class="line">    <span class="keyword">for</span> (variable = *_container_.i; _container_.control; _container_.control = <span class="number">0</span>)</span><br><span class="line">#endif</span><br><span class="line">#endif <span class="comment">// QT_NO_FOREACH</span></span><br><span class="line"></span><br><span class="line">#define Q_FOREVER <span class="keyword">for</span>(;;)</span><br><span class="line">#ifndef QT_NO_KEYWORDS</span><br><span class="line"># ifndef QT_NO_FOREACH</span><br><span class="line">#  ifndef foreach</span><br><span class="line">#    define foreach Q_FOREACH</span><br><span class="line">#  endif</span><br><span class="line"># endif <span class="comment">// QT_NO_FOREACH</span></span><br><span class="line">#  ifndef forever</span><br><span class="line">#    define forever Q_FOREVER</span><br><span class="line">#  endif</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="keyword">inline</span> T *qGetPtrHelper(T *ptr) &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">template &lt;typename Ptr&gt; inline auto qGetPtrHelper(Ptr &amp;ptr) -&gt; decltype(ptr.operator-&gt;()) &#123; return ptr.operator-&gt;(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The body must be a statement:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_CAST_IGNORE_ALIGN(body) QT_WARNING_PUSH QT_WARNING_DISABLE_GCC(<span class="meta-string">"-Wcast-align"</span>) body QT_WARNING_POP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DECLARE_PRIVATE(Class) \</span></span><br><span class="line">    inline Class##Private* d_func() \</span><br><span class="line">    &#123; Q_CAST_IGNORE_ALIGN(<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Class##Private *&gt;(qGetPtrHelper(d_ptr));) &#125; \</span><br><span class="line">    inline const Class##Private* d_func() const \</span><br><span class="line">    &#123; Q_CAST_IGNORE_ALIGN(<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> Class##Private *&gt;(qGetPtrHelper(d_ptr));) &#125; \</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>##<span class="title">Private</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DECLARE_PRIVATE_D(Dptr, Class) \</span></span><br><span class="line">    inline Class##Private* d_func() \</span><br><span class="line">    &#123; Q_CAST_IGNORE_ALIGN(<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Class##Private *&gt;(qGetPtrHelper(Dptr));) &#125; \</span><br><span class="line">    inline const Class##Private* d_func() const \</span><br><span class="line">    &#123; Q_CAST_IGNORE_ALIGN(<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> Class##Private *&gt;(qGetPtrHelper(Dptr));) &#125; \</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>##<span class="title">Private</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_DECLARE_PUBLIC(Class)                                    \</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Class* <span class="title">q_func</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;Class *&gt;(q_ptr); &#125; \</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> Class* <span class="title">q_func</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">const</span> Class *&gt;(q_ptr); &#125; \</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_D(Class) Class##Private * const d = d_func()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_Q(Class) Class * const q = q_func()</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TR_NOOP(x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TR_NOOP_UTF8(x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_NOOP(scope, x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_NOOP_UTF8(scope, x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_NOOP3(scope, x, comment) &#123;x, comment&#125;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_NOOP3_UTF8(scope, x, comment) &#123;x, comment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_TRANSLATION <span class="comment">// ### Qt6: This should enclose the NOOPs above</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TR_N_NOOP(x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_N_NOOP(scope, x) x</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRANSLATE_N_NOOP3(scope, x, comment) &#123;x, comment&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Defined in qcoreapplication.cpp</span></span><br><span class="line"><span class="comment">// The better name qTrId() is reserved for an upcoming function which would</span></span><br><span class="line"><span class="comment">// return a much more powerful QStringFormatter instead of a QString.</span></span><br><span class="line"><span class="function">Q_CORE_EXPORT QString <span class="title">qtTrId</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *id, <span class="keyword">int</span> n = <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_TRID_NOOP(id) id</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_NO_TRANSLATION</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   When RTTI is not available, define this macro to force any uses of</span></span><br><span class="line"><span class="comment">   dynamic_cast to cause a compile failure.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_NO_DYNAMIC_CAST) &amp;&amp; !defined(dynamic_cast)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> dynamic_cast QT_PREPEND_NAMESPACE(qt_dynamic_cast_check)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> X&gt;</span><br><span class="line">  <span class="function">T <span class="title">qt_dynamic_cast_check</span><span class="params">(X, T* = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function">  </span>&#123; <span class="keyword">return</span> T::dynamic_cast_will_always_fail_because_rtti_is_disabled; &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_QDOC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Just for documentation generation</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">qOverload</span><span class="params">(T functionPointer)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">qConstOverload</span><span class="params">(T memberFunctionPointer)</span></span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">qNonConstOverload</span><span class="params">(T memberFunctionPointer)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(Q_COMPILER_VARIADIC_TEMPLATES)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QNonConstOverload</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">    Q_DECL_CONSTEXPR auto operator()(R (T::*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">    static Q_DECL_CONSTEXPR auto of(R (T::*ptr)(Args...)) noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QConstOverload</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">    Q_DECL_CONSTEXPR auto operator()(R (T::*ptr)(Args...) const) const noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R, <span class="keyword">typename</span> T&gt;</span><br><span class="line">    static Q_DECL_CONSTEXPR auto of(R (T::*ptr)(Args...) const) noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QOverload</span> :</span> QConstOverload&lt;Args...&gt;, QNonConstOverload&lt;Args...&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> QConstOverload&lt;Args...&gt;::of;</span><br><span class="line">    <span class="keyword">using</span> QConstOverload&lt;Args...&gt;::<span class="keyword">operator</span>();</span><br><span class="line">    <span class="keyword">using</span> QNonConstOverload&lt;Args...&gt;::of;</span><br><span class="line">    <span class="keyword">using</span> QNonConstOverload&lt;Args...&gt;::<span class="keyword">operator</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line">    Q_DECL_CONSTEXPR auto operator()(R (*ptr)(Args...)) const noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> R&gt;</span><br><span class="line">    static Q_DECL_CONSTEXPR auto of(R (*ptr)(Args...)) noexcept -&gt; decltype(ptr)</span><br><span class="line">    &#123; <span class="keyword">return</span> ptr; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__cpp_variable_templates) &amp;&amp; __cpp_variable_templates &gt;= 201304 <span class="comment">// C++14</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt; Q_CONSTEXPR Q_DECL_UNUSED QOverload&lt;Args...&gt; qOverload = &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt; Q_CONSTEXPR Q_DECL_UNUSED QConstOverload&lt;Args...&gt; qConstOverload = &#123;&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span>... Args&gt; Q_CONSTEXPR Q_DECL_UNUSED QNonConstOverload&lt;Args...&gt; qNonConstOverload = &#123;&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QByteArray</span>;</span></span><br><span class="line"><span class="function">Q_CORE_EXPORT QByteArray <span class="title">qgetenv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName)</span></span>;</span><br><span class="line"><span class="comment">// need it as two functions because QString is only forward-declared here</span></span><br><span class="line"><span class="function">Q_CORE_EXPORT QString <span class="title">qEnvironmentVariable</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QString <span class="title">qEnvironmentVariable</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName, <span class="keyword">const</span> QString &amp;defaultValue)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">bool</span> <span class="title">qputenv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName, <span class="keyword">const</span> QByteArray&amp; value)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">bool</span> <span class="title">qunsetenv</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">bool</span> <span class="title">qEnvironmentVariableIsEmpty</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">bool</span> <span class="title">qEnvironmentVariableIsSet</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">int</span>  <span class="title">qEnvironmentVariableIntValue</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *varName, <span class="keyword">bool</span> *ok=<span class="literal">nullptr</span>)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qIntCast</span><span class="params">(<span class="keyword">double</span> f)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">int</span>(f); &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qIntCast</span><span class="params">(<span class="keyword">float</span> f)</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">int</span>(f); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Reentrant versions of basic rand() functions for random number generation</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 15)</span></span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="title">QT_DEPRECATED_VERSION_X_5_15</span><span class="params">(<span class="string">"use QRandomGenerator instead"</span>)</span> <span class="keyword">void</span> <span class="title">qsrand</span><span class="params">(uint seed)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="title">QT_DEPRECATED_VERSION_X_5_15</span><span class="params">(<span class="string">"use QRandomGenerator instead"</span>)</span> <span class="keyword">int</span> <span class="title">qrand</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QT_MODULE(x)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_BOOTSTRAPPED) &amp;&amp; defined(QT_REDUCE_RELOCATIONS) &amp;&amp; defined(__ELF__) &amp;&amp; \</span></span><br><span class="line">    (!defined(__PIC__) || (defined(__PIE__) &amp;&amp; defined(Q_CC_GNU) &amp;&amp; Q_CC_GNU &gt;= <span class="number">500</span>))</span><br><span class="line"><span class="meta">#  <span class="meta-keyword">error</span> <span class="meta-string">"You must build your code with position independent code if Qt was built with -reduce-relocations. "</span>\</span></span><br><span class="line">         <span class="string">"Compile your code with -fPIC (and not with -fPIE)."</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate &#123;</span><br><span class="line"><span class="comment">//like std::enable_if</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> B, <span class="keyword">typename</span> T = <span class="keyword">void</span>&gt; struct QEnableIf;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">struct</span> <span class="title">QEnableIf</span>&lt;true, T&gt; &#123;</span> <span class="keyword">typedef</span> T Type; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="comment">// We need to keep QTypeInfo, QSysInfo, QFlags, qDebug &amp; family in qglobal.h for compatibility with Qt 4.</span></span><br><span class="line"><span class="comment">// Be careful when changing the order of these files.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qtypeinfo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qsysinfo.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qlogging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qflags.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qatomic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qglobalstatic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qnumeric.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qversiontagging.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __cplusplus */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* !__ASSEMBLER__ */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* QGLOBAL_H */</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2 global宏</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
  </entry>
  
  <entry>
    <title>QObject</title>
    <link href="http://bugnull.com/QT/qobject/"/>
    <id>http://bugnull.com/QT/qobject/</id>
    <published>2022-11-06T15:27:55.215Z</published>
    <updated>2022-09-15T16:35:41.019Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QObject"><a href="#QObject" class="headerlink" title="QObject"></a>QObject</h3><blockquote><p>Header:  #include <qobject><br>qmake: QT += core Inherited By: QAbstractAnimation, QAbstractEventDispatcher, QAbstractItemDelegate, QAbstractItemModel, QAbstractNetworkCache, QAbstractState, QAbstractTextDocumentLayout, QAbstractTransition, QAccessiblePlugin, QAction, QActionGroup, QAxFactory, QAxObject, QAxScript, QAxScriptManager, QButtonGroup, QClipboard, QCompleter, QCoreApplication, QDataWidgetMapper, QDBusAbstractAdaptor, QDBusAbstractInterface, QDBusPendingCallWatcher, QDBusServer, QDBusServiceWatcher, QDBusVirtualObject, QDesignerFormEditorInterface, QDesignerFormWindowManagerInterface, QDnsLookup, QDrag, QDtls, QDtlsClientVerifier, QEventLoop, QExtensionFactory, QExtensionManager, QFileSelector, QFileSystemWatcher, QFutureWatcher, QGenericPlugin, QGesture, QGraphicsAnchor, QGraphicsEffect, QGraphicsItemAnimation, QGraphicsObject, QGraphicsScene, QGraphicsTransform, QHttpMultiPart, QIconEnginePlugin, QImageIOPlugin, QInputMethod, QIODevice, QItemSelectionModel, QJSEngine, QLayout, QLibrary, QLocalServer, QMacToolBar, QMacToolBarItem, QMimeData, QMovie, QNetworkAccessManager, QNetworkConfigurationManager, QNetworkCookieJar, QNetworkSession, QObjectCleanupHandler, QOffscreenSurface, QOpenGLContext, QOpenGLContextGroup, QOpenGLDebugLogger, QOpenGLShader, QOpenGLShaderProgram, QOpenGLTimeMonitor, QOpenGLTimerQuery, QOpenGLVertexArrayObject, QPdfWriter, QPictureFormatPlugin, QPluginLoader, QQmlComponent, QQmlContext, QQmlEngineExtensionPlugin, QQmlExpression, QQmlFileSelector, QQmlPropertyMap, QQuickImageResponse, QQuickItem, QQuickItemGrabResult, QQuickRenderControl, QQuickTextDocument, QQuickTextureFactory, QScreen, QScroller, QSessionManager, QSettings, QSGAbstractRenderer, QSGEngine, QSGTexture, QSGTextureProvider, QSharedMemory, QShortcut, QSignalMapper, QSocketNotifier, QStyle, QStyleHints, QStylePlugin, QSyntaxHighlighter, QSystemTrayIcon, QTcpServer, QTextDocument, QTextObject, QThread, QThreadPool, QTimeLine, QTimer, QTranslator, QUndoGroup, QUndoStack, QValidator, QWidget, QWindow, QWinEventNotifier, QWinJumpList, QWinTaskbarButton, QWinTaskbarProgress, QWinThumbnailToolBar, and QWinThumbnailToolButton</qobject></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QOBJECT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QOBJECT_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_QOBJECT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobjectdefs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qstring.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qbytearray.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qlist.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_INCLUDE_COMPAT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qcoreevent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qscopedpointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qmetatype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobject_impl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_include(<span class="meta-string">&lt;chrono&gt;)</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QTimerEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QChildEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QMetaObject</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QVariant</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QObjectPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QObject</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QThread</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QWidget</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAccessibleWidget</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_REGEXP</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRegExp</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(regularexpression)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRegularExpression</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !QT_DEPRECATED_SINCE(5, 14) || QT_VERSION &gt;= QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> QT_NO_USERDATA</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_USERDATA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QObjectUserData</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QDynamicMetaObjectData</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> QList&lt;QObject*&gt; QObjectList;</span><br><span class="line"></span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_qFindChildren_helper</span><span class="params">(<span class="keyword">const</span> QObject *parent, <span class="keyword">const</span> QString &amp;name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="keyword">const</span> QMetaObject &amp;mo, QList&lt;<span class="keyword">void</span> *&gt; *<span class="built_in">list</span>, Qt::FindChildOptions options)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_qFindChildren_helper</span><span class="params">(<span class="keyword">const</span> QObject *parent, <span class="keyword">const</span> QRegExp &amp;re,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="keyword">const</span> QMetaObject &amp;mo, QList&lt;<span class="keyword">void</span> *&gt; *<span class="built_in">list</span>, Qt::FindChildOptions options)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT <span class="keyword">void</span> <span class="title">qt_qFindChildren_helper</span><span class="params">(<span class="keyword">const</span> QObject *parent, <span class="keyword">const</span> QRegularExpression &amp;re,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           <span class="keyword">const</span> QMetaObject &amp;mo, QList&lt;<span class="keyword">void</span> *&gt; *<span class="built_in">list</span>, Qt::FindChildOptions options)</span></span>;</span><br><span class="line"><span class="function">Q_CORE_EXPORT QObject *<span class="title">qt_qFindChild_helper</span><span class="params">(<span class="keyword">const</span> QObject *parent, <span class="keyword">const</span> QString &amp;name, <span class="keyword">const</span> QMetaObject &amp;mo, Qt::FindChildOptions options)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QObjectData</span> &#123;</span></span><br><span class="line">    Q_DISABLE_COPY(QObjectData)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QObjectData() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QObjectData() = <span class="number">0</span>;</span><br><span class="line">    QObject *q_ptr;</span><br><span class="line">    QObject *parent;</span><br><span class="line">    QObjectList children;</span><br><span class="line"></span><br><span class="line">    uint isWidget : <span class="number">1</span>;</span><br><span class="line">    uint blockSig : <span class="number">1</span>;</span><br><span class="line">    uint wasDeleted : <span class="number">1</span>;</span><br><span class="line">    uint isDeletingChildren : <span class="number">1</span>;</span><br><span class="line">    uint sendChildEvents : <span class="number">1</span>;</span><br><span class="line">    uint receiveChildEvents : <span class="number">1</span>;</span><br><span class="line">    uint isWindow : <span class="number">1</span>; <span class="comment">//for QWindow</span></span><br><span class="line">    uint deleteLaterCalled : <span class="number">1</span>;</span><br><span class="line">    uint unused : <span class="number">24</span>;</span><br><span class="line">    <span class="keyword">int</span> postedEvents;</span><br><span class="line">    QDynamicMetaObjectData *metaObject;</span><br><span class="line">    <span class="function">QMetaObject *<span class="title">dynamicMetaObject</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> QT_DEBUG</span></span><br><span class="line">    <span class="keyword">enum</span> &#123; CheckForParentChildLoopsWarnDepth = <span class="number">4096</span> &#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QObject</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">    Q_PROPERTY(QString objectName READ objectName WRITE setObjectName NOTIFY objectNameChanged)</span><br><span class="line">    Q_DECLARE_PRIVATE(QObject)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">explicit</span> <span class="title">QObject</span><span class="params">(QObject *parent=<span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QObject();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *watched, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(QT_NO_TRANSLATION) || defined(Q_CLANG_QDOC)</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> QString <span class="title">tr</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *sourceText, <span class="keyword">const</span> <span class="keyword">char</span> * = <span class="literal">nullptr</span>, <span class="keyword">int</span> = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> QString::fromUtf8(sourceText); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">static</span> QString <span class="title">trUtf8</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *sourceText, <span class="keyword">const</span> <span class="keyword">char</span> * = <span class="literal">nullptr</span>, <span class="keyword">int</span> = <span class="number">-1</span>)</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> QString::fromUtf8(sourceText); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//QT_NO_TRANSLATION</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">objectName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setObjectName</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isWidgetType</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> d_ptr-&gt;isWidget; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isWindowType</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> d_ptr-&gt;isWindow; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">signalsBlocked</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> d_ptr-&gt;blockSig; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">blockSignals</span><span class="params">(<span class="keyword">bool</span> b)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QThread *<span class="title">thread</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveToThread</span><span class="params">(QThread *thread)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">startTimer</span><span class="params">(<span class="keyword">int</span> interval, Qt::TimerType timerType = Qt::CoarseTimer)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __has_include(<span class="meta-string">&lt;chrono&gt;)</span></span></span><br><span class="line">    Q_ALWAYS_INLINE</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">startTimer</span><span class="params">(<span class="built_in">std</span>::chrono::milliseconds time, Qt::TimerType timerType = Qt::CoarseTimer)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> startTimer(<span class="keyword">int</span>(time.count()), timerType);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">killTimer</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> T <span class="title">findChild</span><span class="params">(<span class="keyword">const</span> QString &amp;aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T&gt;(qt_qFindChild_helper(<span class="keyword">this</span>, aName, ObjType::staticMetaObject, options));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">inline</span> QList&lt;T&gt; findChildren(<span class="keyword">const</span> QString &amp;aName = QString(), Qt::FindChildOptions options = Qt::FindChildrenRecursively) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">        QList&lt;T&gt; <span class="built_in">list</span>;</span><br><span class="line">        qt_qFindChildren_helper(<span class="keyword">this</span>, aName, ObjType::staticMetaObject,</span><br><span class="line">                                <span class="keyword">reinterpret_cast</span>&lt;QList&lt;<span class="keyword">void</span> *&gt; *&gt;(&amp;<span class="built_in">list</span>), options);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_REGEXP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use findChildren(const QRegularExpression &amp;, ...) instead."</span>)</span><br><span class="line">    <span class="keyword">inline</span> QList&lt;T&gt; findChildren(<span class="keyword">const</span> QRegExp &amp;re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">        QList&lt;T&gt; <span class="built_in">list</span>;</span><br><span class="line">        qt_qFindChildren_helper(<span class="keyword">this</span>, re, ObjType::staticMetaObject,</span><br><span class="line">                                <span class="keyword">reinterpret_cast</span>&lt;QList&lt;<span class="keyword">void</span> *&gt; *&gt;(&amp;<span class="built_in">list</span>), options);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(regularexpression)</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">    <span class="keyword">inline</span> QList&lt;T&gt; findChildren(<span class="keyword">const</span> QRegularExpression &amp;re, Qt::FindChildOptions options = Qt::FindChildrenRecursively) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">        QList&lt;T&gt; <span class="built_in">list</span>;</span><br><span class="line">        qt_qFindChildren_helper(<span class="keyword">this</span>, re, ObjType::staticMetaObject,</span><br><span class="line">                                <span class="keyword">reinterpret_cast</span>&lt;QList&lt;<span class="keyword">void</span> *&gt; *&gt;(&amp;<span class="built_in">list</span>), options);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_CONFIG(regularexpression)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> QObjectList &amp;<span class="title">children</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> d_ptr-&gt;children; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParent</span><span class="params">(QObject *parent)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installEventFilter</span><span class="params">(QObject *filterObj)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeEventFilter</span><span class="params">(QObject *obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member, Qt::ConnectionType = Qt::AutoConnection)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> QMetaMethod &amp;signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> QMetaMethod &amp;method,</span></span></span><br><span class="line"><span class="function"><span class="params">                        Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">inline</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> <span class="keyword">char</span> *member, Qt::ConnectionType type = Qt::AutoConnection)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CLANG_QDOC</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> PointerToMemberFunction&gt;</span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, <span class="keyword">const</span> QObject *receiver, PointerToMemberFunction method, Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> PointerToMemberFunction, <span class="keyword">typename</span> Functor&gt;</span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, Functor functor)</span></span>;</span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> PointerToMemberFunction, <span class="keyword">typename</span> Functor&gt;</span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, <span class="keyword">const</span> QObject *context, Functor functor, Qt::ConnectionType type = Qt::AutoConnection)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="comment">//Connect a signal to a pointer to qobject member function</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> QMetaObject::<span class="function">Connection <span class="title">connect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     <span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func2&gt;::Object *receiver, Func2 slot,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Qt::ConnectionType type = Qt::AutoConnection)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func1&gt; SignalType;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func2&gt; SlotType;</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;<span class="keyword">typename</span> SignalType::Object&gt;::Value,</span><br><span class="line">                          <span class="string">"No Q_OBJECT in the class with the signal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compilation error if the arguments does not match.</span></span><br><span class="line">        Q_STATIC_ASSERT_X(<span class="keyword">int</span>(SignalType::ArgumentCount) &gt;= <span class="keyword">int</span>(SlotType::ArgumentCount),</span><br><span class="line">                          <span class="string">"The slot requires more arguments than the signal provides."</span>);</span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::CheckCompatibleArguments&lt;<span class="keyword">typename</span> SignalType::Arguments, <span class="keyword">typename</span> SlotType::Arguments&gt;::value),</span><br><span class="line">                          <span class="string">"Signal and slot arguments are not compatible."</span>);</span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::AreArgumentsCompatible&lt;<span class="keyword">typename</span> SlotType::ReturnType, <span class="keyword">typename</span> SignalType::ReturnType&gt;::value),</span><br><span class="line">                          <span class="string">"Return type of the slot is not compatible with the return type of the signal."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> *types = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)</span><br><span class="line">            types = QtPrivate::ConnectionTypes&lt;<span class="keyword">typename</span> SignalType::Arguments&gt;::types();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectImpl(sender, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;signal),</span><br><span class="line">                           receiver, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;slot),</span><br><span class="line">                           <span class="keyword">new</span> QtPrivate::QSlotObject&lt;Func2, <span class="keyword">typename</span> QtPrivate::List_Left&lt;<span class="keyword">typename</span> SignalType::Arguments, SlotType::ArgumentCount&gt;::Value,</span><br><span class="line">                                           <span class="keyword">typename</span> SignalType::ReturnType&gt;(slot),</span><br><span class="line">                            type, types, &amp;SignalType::Object::staticMetaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connect to a function pointer  (not a member)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;<span class="keyword">int</span>(QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount) &gt;= <span class="number">0</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">            connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, Func2 slot)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> connect(sender, signal, sender, slot, Qt::DirectConnection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connect to a function pointer  (not a member)</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;<span class="keyword">int</span>(QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                          !QtPrivate::FunctionPointer&lt;Func2&gt;::IsPointerToMemberFunction, QMetaObject::Connection&gt;::type</span><br><span class="line">            connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, <span class="keyword">const</span> QObject *context, Func2 slot,</span><br><span class="line">                    Qt::ConnectionType type = Qt::AutoConnection)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func1&gt; SignalType;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func2&gt; SlotType;</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;<span class="keyword">typename</span> SignalType::Object&gt;::Value,</span><br><span class="line">                          <span class="string">"No Q_OBJECT in the class with the signal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compilation error if the arguments does not match.</span></span><br><span class="line">        Q_STATIC_ASSERT_X(<span class="keyword">int</span>(SignalType::ArgumentCount) &gt;= <span class="keyword">int</span>(SlotType::ArgumentCount),</span><br><span class="line">                          <span class="string">"The slot requires more arguments than the signal provides."</span>);</span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::CheckCompatibleArguments&lt;<span class="keyword">typename</span> SignalType::Arguments, <span class="keyword">typename</span> SlotType::Arguments&gt;::value),</span><br><span class="line">                          <span class="string">"Signal and slot arguments are not compatible."</span>);</span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::AreArgumentsCompatible&lt;<span class="keyword">typename</span> SlotType::ReturnType, <span class="keyword">typename</span> SignalType::ReturnType&gt;::value),</span><br><span class="line">                          <span class="string">"Return type of the slot is not compatible with the return type of the signal."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> *types = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)</span><br><span class="line">            types = QtPrivate::ConnectionTypes&lt;<span class="keyword">typename</span> SignalType::Arguments&gt;::types();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectImpl(sender, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;signal), context, <span class="literal">nullptr</span>,</span><br><span class="line">                           <span class="keyword">new</span> QtPrivate::QStaticSlotObject&lt;Func2,</span><br><span class="line">                                                 <span class="keyword">typename</span> QtPrivate::List_Left&lt;<span class="keyword">typename</span> SignalType::Arguments, SlotType::ArgumentCount&gt;::Value,</span><br><span class="line">                                                 <span class="keyword">typename</span> SignalType::ReturnType&gt;(slot),</span><br><span class="line">                           type, types, &amp;SignalType::Object::staticMetaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connect to a functor</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount == <span class="number">-1</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">            connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, Func2 slot)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> connect(sender, signal, sender, <span class="built_in">std</span>::move(slot), Qt::DirectConnection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//connect to a functor, with a "context" object defining in which event loop is going to be executed</span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">typename</span> <span class="built_in">std</span>::enable_if&lt;QtPrivate::FunctionPointer&lt;Func2&gt;::ArgumentCount == <span class="number">-1</span>, QMetaObject::Connection&gt;::type</span><br><span class="line">            connect(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal, <span class="keyword">const</span> QObject *context, Func2 slot,</span><br><span class="line">                    Qt::ConnectionType type = Qt::AutoConnection)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func1&gt; SignalType;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> FunctorArgumentCount = QtPrivate::ComputeFunctorArgumentCount&lt;Func2 , <span class="keyword">typename</span> SignalType::Arguments&gt;::Value;</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X((FunctorArgumentCount &gt;= <span class="number">0</span>),</span><br><span class="line">                          <span class="string">"Signal and slot arguments are not compatible."</span>);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> SlotArgumentCount = (FunctorArgumentCount &gt;= <span class="number">0</span>) ? FunctorArgumentCount : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">typedef</span> <span class="keyword">typename</span> QtPrivate::FunctorReturnType&lt;Func2, <span class="keyword">typename</span> QtPrivate::List_Left&lt;<span class="keyword">typename</span> SignalType::Arguments, SlotArgumentCount&gt;::Value&gt;::Value SlotReturnType;</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::AreArgumentsCompatible&lt;SlotReturnType, <span class="keyword">typename</span> SignalType::ReturnType&gt;::value),</span><br><span class="line">                          <span class="string">"Return type of the slot is not compatible with the return type of the signal."</span>);</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;<span class="keyword">typename</span> SignalType::Object&gt;::Value,</span><br><span class="line">                          <span class="string">"No Q_OBJECT in the class with the signal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> *types = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">if</span> (type == Qt::QueuedConnection || type == Qt::BlockingQueuedConnection)</span><br><span class="line">            types = QtPrivate::ConnectionTypes&lt;<span class="keyword">typename</span> SignalType::Arguments&gt;::types();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> connectImpl(sender, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;signal), context, <span class="literal">nullptr</span>,</span><br><span class="line">                           <span class="keyword">new</span> QtPrivate::QFunctorSlotObject&lt;Func2, SlotArgumentCount,</span><br><span class="line">                                <span class="keyword">typename</span> QtPrivate::List_Left&lt;<span class="keyword">typename</span> SignalType::Arguments, SlotArgumentCount&gt;::Value,</span><br><span class="line">                                <span class="keyword">typename</span> SignalType::ReturnType&gt;(<span class="built_in">std</span>::move(slot)),</span><br><span class="line">                           type, types, &amp;SignalType::Object::staticMetaObject);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//Q_CLANG_QDOC</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> <span class="keyword">char</span> *signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">const</span> QMetaMethod &amp;signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> QMetaMethod &amp;member)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *signal = <span class="literal">nullptr</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QObject *receiver = <span class="literal">nullptr</span>, <span class="keyword">const</span> <span class="keyword">char</span> *member = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> disconnect(<span class="keyword">this</span>, signal, receiver, member); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> QObject *receiver, <span class="keyword">const</span> <span class="keyword">char</span> *member = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> disconnect(<span class="keyword">this</span>, <span class="literal">nullptr</span>, receiver, member); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> QMetaObject::Connection &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Q_CLANG_QDOC</span></span><br><span class="line">    <span class="keyword">template</span>&lt;<span class="keyword">typename</span> PointerToMemberFunction&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> QObject *sender, PointerToMemberFunction signal, <span class="keyword">const</span> QObject *receiver, PointerToMemberFunction method)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1, <span class="keyword">typename</span> Func2&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func2&gt;::Object *receiver, Func2 slot)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func1&gt; SignalType;</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func2&gt; SlotType;</span><br><span class="line"></span><br><span class="line">        Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;<span class="keyword">typename</span> SignalType::Object&gt;::Value,</span><br><span class="line">                          <span class="string">"No Q_OBJECT in the class with the signal"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//compilation error if the arguments does not match.</span></span><br><span class="line">        Q_STATIC_ASSERT_X((QtPrivate::CheckCompatibleArguments&lt;<span class="keyword">typename</span> SignalType::Arguments, <span class="keyword">typename</span> SlotType::Arguments&gt;::value),</span><br><span class="line">                          <span class="string">"Signal and slot arguments are not compatible."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> disconnectImpl(sender, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;signal), receiver, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;slot),</span><br><span class="line">                              &amp;SignalType::Object::staticMetaObject);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> Func1&gt;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">typename</span> QtPrivate::FunctionPointer&lt;Func1&gt;::Object *sender, Func1 signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> QObject *receiver, <span class="keyword">void</span> **zero)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// This is the overload for when one wish to disconnect a signal from any slot. (slot=nullptr)</span></span><br><span class="line">        <span class="comment">// Since the function template parameter cannot be deduced from '0', we use a</span></span><br><span class="line">        <span class="comment">// dummy void ** parameter that must be equal to 0</span></span><br><span class="line">        Q_ASSERT(!zero);</span><br><span class="line">        <span class="keyword">typedef</span> QtPrivate::FunctionPointer&lt;Func1&gt; SignalType;</span><br><span class="line">        <span class="keyword">return</span> disconnectImpl(sender, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span> **&gt;(&amp;signal), receiver, zero,</span><br><span class="line">                              &amp;SignalType::Object::staticMetaObject);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//Q_CLANG_QDOC</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &lt; QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dumpObjectTree</span><span class="params">()</span></span>; <span class="comment">// ### Qt 6: remove</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dumpObjectInfo</span><span class="params">()</span></span>; <span class="comment">// ### Qt 6: remove</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dumpObjectTree</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dumpObjectInfo</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_PROPERTIES</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">setProperty</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> QVariant &amp;value)</span></span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">property</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    QList&lt;QByteArray&gt; dynamicPropertyNames() <span class="keyword">const</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_NO_PROPERTIES</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_USERDATA</span></span><br><span class="line">    QT_DEPRECATED_VERSION_5_14</span><br><span class="line">    <span class="function"><span class="keyword">static</span> uint <span class="title">registerUserData</span><span class="params">()</span></span>;</span><br><span class="line">    QT_DEPRECATED_VERSION_X_5_14(<span class="string">"Use setProperty()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUserData</span><span class="params">(uint id, QObjectUserData* data)</span></span>;</span><br><span class="line">    QT_DEPRECATED_VERSION_X_5_14(<span class="string">"Use property()"</span>)</span><br><span class="line">    <span class="function">QObjectUserData* <span class="title">userData</span><span class="params">(uint id)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_NO_USERDATA</span></span></span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroyed</span><span class="params">(QObject * = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">objectNameChanged</span><span class="params">(<span class="keyword">const</span> QString &amp;objectName, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QObject *<span class="title">parent</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> d_ptr-&gt;parent; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">inherits</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *classname)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> <span class="keyword">const_cast</span>&lt;QObject *&gt;(<span class="keyword">this</span>)-&gt;qt_metacast(classname) != <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deleteLater</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function">QObject *<span class="title">sender</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">senderSignalIndex</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">receivers</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* signal)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSignalConnected</span><span class="params">(<span class="keyword">const</span> QMetaMethod &amp;signal)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">childEvent</span><span class="params">(QChildEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">customEvent</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">connectNotify</span><span class="params">(<span class="keyword">const</span> QMetaMethod &amp;signal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">disconnectNotify</span><span class="params">(<span class="keyword">const</span> QMetaMethod &amp;signal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QObject(QObjectPrivate &amp;dd, QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QScopedPointer&lt;QObjectData&gt; d_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> QMetaObject staticQtMetaObject;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">inline</span> <span class="keyword">const</span> QMetaObject *<span class="title">qt_getQtMetaObject</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> <span class="title">QMetaObject</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">struct</span> <span class="title">QMetaObjectPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QMetaCallEvent</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QApplication</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QApplicationPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QCoreApplication</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QCoreApplicationPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QWidget</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QAccessibleWidget</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QThreadData</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QObject)</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_reregisterTimers(<span class="keyword">void</span> *))</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> QMetaObject::<span class="function">Connection <span class="title">connectImpl</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">void</span> **signal,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">const</span> QObject *receiver, <span class="keyword">void</span> **slotPtr,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               QtPrivate::QSlotObjectBase *slot, Qt::ConnectionType type,</span></span></span><br><span class="line"><span class="function"><span class="params">                                               <span class="keyword">const</span> <span class="keyword">int</span> *types, <span class="keyword">const</span> QMetaObject *senderMetaObject)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">disconnectImpl</span><span class="params">(<span class="keyword">const</span> QObject *sender, <span class="keyword">void</span> **signal, <span class="keyword">const</span> QObject *receiver, <span class="keyword">void</span> **slot,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">const</span> QMetaObject *senderMetaObject)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QMetaObject::Connection QObject::connect(<span class="keyword">const</span> QObject *asender, <span class="keyword">const</span> <span class="keyword">char</span> *asignal,</span><br><span class="line">                                            <span class="keyword">const</span> <span class="keyword">char</span> *amember, Qt::ConnectionType atype) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> connect(asender, asignal, <span class="keyword">this</span>, amember, atype); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">const</span> QMetaObject *<span class="title">qt_getQtMetaObject</span><span class="params">()</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> &amp;QObject::staticQtMetaObject; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_USERDATA</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QObjectUserData</span> &#123;</span></span><br><span class="line">    Q_DISABLE_COPY(QObjectUserData)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QObjectUserData() = <span class="keyword">default</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QObjectUserData();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> QT_DEPRECATED T <span class="title">qFindChild</span><span class="params">(<span class="keyword">const</span> QObject *o, <span class="keyword">const</span> QString &amp;name = QString())</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> o-&gt;findChild&lt;T&gt;(name); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">inline</span> QT_DEPRECATED QList&lt;T&gt; qFindChildren(<span class="keyword">const</span> QObject *o, <span class="keyword">const</span> QString &amp;name = QString())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> o-&gt;findChildren&lt;T&gt;(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !defined(QT_NO_REGEXP) || defined(Q_CLANG_QDOC)</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">inline</span> QT_DEPRECATED QList&lt;T&gt; qFindChildren(<span class="keyword">const</span> QObject *o, <span class="keyword">const</span> QRegExp &amp;re)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> o-&gt;findChildren&lt;T&gt;(re);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//QT_DEPRECATED</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">qobject_cast</span>(<span class="title">QObject</span> *<span class="title">object</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">    Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;ObjType&gt;::Value,</span><br><span class="line">                    <span class="string">"qobject_cast requires the type to have a Q_OBJECT macro"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T&gt;(ObjType::staticMetaObject.cast(object));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">inline</span> <span class="title">T</span> <span class="title">qobject_cast</span>(<span class="title">const</span> <span class="title">QObject</span> *<span class="title">object</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type ObjType;</span><br><span class="line">    Q_STATIC_ASSERT_X(QtPrivate::HasQ_OBJECT_Macro&lt;ObjType&gt;::Value,</span><br><span class="line">                      <span class="string">"qobject_cast requires the type to have a Q_OBJECT macro"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T&gt;(ObjType::staticMetaObject.cast(object));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">const</span> <span class="title">char</span> * <span class="title">qobject_interface_iid</span>()</span></span><br><span class="line"><span class="class">&#123;</span> <span class="keyword">return</span> <span class="literal">nullptr</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(Q_CLANG_QDOC)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_DECLARE_INTERFACE(IFace, IId)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> !defined(Q_MOC_RUN)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> Q_DECLARE_INTERFACE(IFace, IId) \</span></span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> <span class="keyword">const</span> <span class="keyword">char</span> *qobject_interface_iid&lt;IFace *&gt;() \</span><br><span class="line">    &#123; <span class="keyword">return</span> IId; &#125; \</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> IFace *qobject_cast&lt;IFace *&gt;(QObject *object) \</span><br><span class="line">    &#123; <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;IFace *&gt;((object ? object-&gt;qt_metacast(IId) : <span class="literal">nullptr</span>)); &#125; \</span><br><span class="line">    <span class="keyword">template</span> &lt;&gt; <span class="keyword">inline</span> IFace *qobject_cast&lt;IFace *&gt;(<span class="keyword">const</span> QObject *object) \</span><br><span class="line">    &#123; <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;IFace *&gt;((object ? <span class="keyword">const_cast</span>&lt;QObject *&gt;(object)-&gt;qt_metacast(IId) : <span class="literal">nullptr</span>)); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// Q_MOC_RUN</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_DEBUG_STREAM</span></span><br><span class="line">Q_CORE_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug, <span class="keyword">const</span> QObject *);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSignalBlocker</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">explicit</span> <span class="title">QSignalBlocker</span><span class="params">(QObject *o)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">explicit</span> <span class="title">QSignalBlocker</span><span class="params">(QObject &amp;o)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="keyword">inline</span> ~QSignalBlocker();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">QSignalBlocker</span><span class="params">(QSignalBlocker &amp;&amp;other)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="keyword">inline</span> QSignalBlocker &amp;<span class="keyword">operator</span>=(QSignalBlocker &amp;&amp;other) <span class="keyword">noexcept</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reblock</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">unblock</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QSignalBlocker)</span><br><span class="line">    QObject * m_o;</span><br><span class="line">    <span class="keyword">bool</span> m_blocked;</span><br><span class="line">    <span class="keyword">bool</span> m_inhibited;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">QSignalBlocker::QSignalBlocker(QObject *o) <span class="keyword">noexcept</span></span><br><span class="line">    : m_o(o),</span><br><span class="line">      m_blocked(o &amp;&amp; o-&gt;blockSignals(<span class="literal">true</span>)),</span><br><span class="line">      m_inhibited(<span class="literal">false</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">QSignalBlocker::QSignalBlocker(QObject &amp;o) <span class="keyword">noexcept</span></span><br><span class="line">    : m_o(&amp;o),</span><br><span class="line">      m_blocked(o.blockSignals(<span class="literal">true</span>)),</span><br><span class="line">      m_inhibited(<span class="literal">false</span>)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line">QSignalBlocker::QSignalBlocker(QSignalBlocker &amp;&amp;other) <span class="keyword">noexcept</span></span><br><span class="line">    : m_o(other.m_o),</span><br><span class="line">      m_blocked(other.m_blocked),</span><br><span class="line">      m_inhibited(other.m_inhibited)</span><br><span class="line">&#123;</span><br><span class="line">    other.m_o = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QSignalBlocker &amp;QSignalBlocker::<span class="keyword">operator</span>=(QSignalBlocker &amp;&amp;other) <span class="keyword">noexcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> != &amp;other) &#123;</span><br><span class="line">        <span class="comment">// if both *this and other block the same object's signals:</span></span><br><span class="line">        <span class="comment">// unblock *this iff our dtor would unblock, but other's wouldn't</span></span><br><span class="line">        <span class="keyword">if</span> (m_o != other.m_o || (!m_inhibited &amp;&amp; other.m_inhibited))</span><br><span class="line">            unblock();</span><br><span class="line">        m_o = other.m_o;</span><br><span class="line">        m_blocked = other.m_blocked;</span><br><span class="line">        m_inhibited = other.m_inhibited;</span><br><span class="line">        <span class="comment">// disable other:</span></span><br><span class="line">        other.m_o = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">QSignalBlocker::~QSignalBlocker()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_o &amp;&amp; !m_inhibited)</span><br><span class="line">        m_o-&gt;blockSignals(m_blocked);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> QSignalBlocker::reblock() <span class="keyword">noexcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_o) m_o-&gt;blockSignals(<span class="literal">true</span>);</span><br><span class="line">    m_inhibited = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> QSignalBlocker::unblock() <span class="keyword">noexcept</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (m_o) m_o-&gt;blockSignals(m_blocked);</span><br><span class="line">    m_inhibited = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> QtPrivate &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QObject &amp; <span class="title">deref_for_methodcall</span><span class="params">(QObject &amp;o)</span> </span>&#123; <span class="keyword">return</span>  o; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QObject &amp; <span class="title">deref_for_methodcall</span><span class="params">(QObject *o)</span> </span>&#123; <span class="keyword">return</span> *o; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Q_SET_OBJECT_NAME(obj) QT_PREPEND_NAMESPACE(QtPrivate)::deref_for_methodcall(obj).setObjectName(QLatin1String(#obj))</span></span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QOBJECT_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2 QObject解读</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
  </entry>
  
  <entry>
    <title>QGraphicsView</title>
    <link href="http://bugnull.com/QT/qgraphicsview/"/>
    <id>http://bugnull.com/QT/qgraphicsview/</id>
    <published>2022-11-06T15:27:55.193Z</published>
    <updated>2022-09-15T16:30:10.580Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QGraphicsView"><a href="#QGraphicsView" class="headerlink" title="QGraphicsView"></a>QGraphicsView</h3><blockquote><p>Header:  #include <qgraphicsview><br>qmake: QT += widgets Since: Qt 4.2 Inherits: QAbstractScrollArea</qgraphicsview></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QGRAPHICSVIEW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QGRAPHICSVIEW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qtwidgetsglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qmetatype.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qpainter.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qscrollarea.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qgraphicsscene.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(graphicsview);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPainterPath</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPolygonF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QStyleOptionGraphicsItem</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsViewPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsView</span> :</span> <span class="keyword">public</span> QAbstractScrollArea</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_FLAGS(QPainter::RenderHints CacheMode OptimizationFlags)</span><br><span class="line">    Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)</span><br><span class="line">    Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> interactive READ isInteractive WRITE setInteractive)</span><br><span class="line">    Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)</span><br><span class="line">    Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)</span><br><span class="line">    Q_PROPERTY(QPainter::RenderHints renderHints READ renderHints WRITE setRenderHints)</span><br><span class="line">    Q_PROPERTY(DragMode dragMode READ dragMode WRITE setDragMode)</span><br><span class="line">    Q_PROPERTY(CacheMode cacheMode READ cacheMode WRITE setCacheMode)</span><br><span class="line">    Q_PROPERTY(ViewportAnchor transformationAnchor READ transformationAnchor WRITE setTransformationAnchor)</span><br><span class="line">    Q_PROPERTY(ViewportAnchor resizeAnchor READ resizeAnchor WRITE setResizeAnchor)</span><br><span class="line">    Q_PROPERTY(ViewportUpdateMode viewportUpdateMode READ viewportUpdateMode WRITE setViewportUpdateMode)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(rubberband)</span></span><br><span class="line">    Q_PROPERTY(Qt::ItemSelectionMode rubberBandSelectionMode READ rubberBandSelectionMode WRITE setRubberBandSelectionMode)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Q_PROPERTY(OptimizationFlags optimizationFlags READ optimizationFlags WRITE setOptimizationFlags)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> ViewportAnchor &#123;</span><br><span class="line">        NoAnchor,</span><br><span class="line">        AnchorViewCenter,</span><br><span class="line">        AnchorUnderMouse</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(ViewportAnchor)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> CacheModeFlag &#123;</span><br><span class="line">        CacheNone = <span class="number">0x0</span>,</span><br><span class="line">        CacheBackground = <span class="number">0x1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_DECLARE_FLAGS(CacheMode, CacheModeFlag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> DragMode &#123;</span><br><span class="line">        NoDrag,</span><br><span class="line">        ScrollHandDrag,</span><br><span class="line">        RubberBandDrag</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(DragMode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> ViewportUpdateMode &#123;</span><br><span class="line">        FullViewportUpdate,</span><br><span class="line">        MinimalViewportUpdate,</span><br><span class="line">        SmartViewportUpdate,</span><br><span class="line">        NoViewportUpdate,</span><br><span class="line">        BoundingRectViewportUpdate</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(ViewportUpdateMode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> OptimizationFlag &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 14)</span></span><br><span class="line">        <span class="function">DontClipPainter <span class="title">Q_DECL_ENUMERATOR_DEPRECATED_X</span><span class="params">(<span class="string">"This flag is unused"</span>)</span> </span>= <span class="number">0x1</span>, <span class="comment">// obsolete</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        DontSavePainterState = <span class="number">0x2</span>,</span><br><span class="line">        DontAdjustForAntialiasing = <span class="number">0x4</span>,</span><br><span class="line">        IndirectPainting = <span class="number">0x8</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_DECLARE_FLAGS(OptimizationFlags, OptimizationFlag)</span><br><span class="line"></span><br><span class="line">    QGraphicsView(QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    QGraphicsView(QGraphicsScene *scene, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    ~QGraphicsView();</span><br><span class="line"></span><br><span class="line">    <span class="function">QSize <span class="title">sizeHint</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    QPainter::<span class="function">RenderHints <span class="title">renderHints</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRenderHint</span><span class="params">(QPainter::RenderHint hint, <span class="keyword">bool</span> enabled = <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRenderHints</span><span class="params">(QPainter::RenderHints hints)</span></span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">Alignment <span class="title">alignment</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAlignment</span><span class="params">(Qt::Alignment alignment)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ViewportAnchor <span class="title">transformationAnchor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransformationAnchor</span><span class="params">(ViewportAnchor anchor)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ViewportAnchor <span class="title">resizeAnchor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setResizeAnchor</span><span class="params">(ViewportAnchor anchor)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ViewportUpdateMode <span class="title">viewportUpdateMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setViewportUpdateMode</span><span class="params">(ViewportUpdateMode mode)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">OptimizationFlags <span class="title">optimizationFlags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOptimizationFlag</span><span class="params">(OptimizationFlag flag, <span class="keyword">bool</span> enabled = <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOptimizationFlags</span><span class="params">(OptimizationFlags flags)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">DragMode <span class="title">dragMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDragMode</span><span class="params">(DragMode mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(rubberband)</span></span><br><span class="line">    Qt::<span class="function">ItemSelectionMode <span class="title">rubberBandSelectionMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRubberBandSelectionMode</span><span class="params">(Qt::ItemSelectionMode mode)</span></span>;</span><br><span class="line">    <span class="function">QRect <span class="title">rubberBandRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">CacheMode <span class="title">cacheMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCacheMode</span><span class="params">(CacheMode mode)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetCachedContent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isInteractive</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInteractive</span><span class="params">(<span class="keyword">bool</span> allowed)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsScene *<span class="title">scene</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setScene</span><span class="params">(QGraphicsScene *scene)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">sceneRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSceneRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setSceneRect</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 15)</span></span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use transform()"</span>) <span class="function">QMatrix <span class="title">matrix</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use setTransform()"</span>) <span class="function"><span class="keyword">void</span> <span class="title">setMatrix</span><span class="params">(<span class="keyword">const</span> QMatrix &amp;matrix, <span class="keyword">bool</span> combine = <span class="literal">false</span>)</span></span>;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use resetTransform()"</span>) <span class="function"><span class="keyword">void</span> <span class="title">resetMatrix</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_DEPRECATED_SINCE(5, 15)</span></span></span><br><span class="line">    <span class="function">QTransform <span class="title">transform</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QTransform <span class="title">viewportTransform</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isTransformed</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransform</span><span class="params">(<span class="keyword">const</span> QTransform &amp;matrix, <span class="keyword">bool</span> combine = <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetTransform</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(qreal angle)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scale</span><span class="params">(qreal sx, qreal sy)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shear</span><span class="params">(qreal sh, qreal sv)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">translate</span><span class="params">(qreal dx, qreal dy)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">centerOn</span><span class="params">(<span class="keyword">const</span> QPointF &amp;pos)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">centerOn</span><span class="params">(qreal x, qreal y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">centerOn</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, <span class="keyword">int</span> xmargin = <span class="number">50</span>, <span class="keyword">int</span> ymargin = <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(qreal x, qreal y, qreal w, qreal h, <span class="keyword">int</span> xmargin = <span class="number">50</span>, <span class="keyword">int</span> ymargin = <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">int</span> xmargin = <span class="number">50</span>, <span class="keyword">int</span> ymargin = <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fitInView</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">fitInView</span><span class="params">(qreal x, qreal y, qreal w, qreal h,</span></span></span><br><span class="line"><span class="function"><span class="params">                          Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fitInView</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item,</span></span></span><br><span class="line"><span class="function"><span class="params">                   Qt::AspectRatioMode aspectRadioMode = Qt::IgnoreAspectRatio)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QRectF &amp;target = QRectF(), <span class="keyword">const</span> QRect &amp;source = QRect(),</span></span></span><br><span class="line"><span class="function"><span class="params">                Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio)</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items() <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPoint &amp;pos) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; items(<span class="keyword">int</span> x, <span class="keyword">int</span> y) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QRect &amp;rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; items(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPolygon &amp;polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPainterPath &amp;path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">itemAt</span><span class="params">(<span class="keyword">const</span> QPoint &amp;pos)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QGraphicsItem *<span class="title">itemAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPointF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPoint &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QRect &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPolygon &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPoint <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygon <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygon <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapToScene</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapToScene</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPoint <span class="title">mapFromScene</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygon <span class="title">mapFromScene</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QVariant <span class="title">inputMethodQuery</span><span class="params">(Qt::InputMethodQuery query)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QBrush <span class="title">backgroundBrush</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBackgroundBrush</span><span class="params">(<span class="keyword">const</span> QBrush &amp;brush)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QBrush <span class="title">foregroundBrush</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setForegroundBrush</span><span class="params">(<span class="keyword">const</span> QBrush &amp;brush)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateScene</span><span class="params">(<span class="keyword">const</span> QList&lt;QRectF&gt; &amp;rects)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidateScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF(), QGraphicsScene::SceneLayers layers = QGraphicsScene::AllLayers)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateSceneRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(rubberband)</span></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rubberBandChanged</span><span class="params">(QRect viewportRect, QPointF fromScenePoint, QPointF toScenePoint)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setupViewport</span><span class="params">(QWidget *widget)</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QGraphicsView(QGraphicsViewPrivate &amp;, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">viewportEvent</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_CONTEXTMENU</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextMenuEvent</span><span class="params">(QContextMenuEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QDragEnterEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QDragLeaveEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QDragMoveEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QDropEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusInEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">focusNextPrevChild</span><span class="params">(<span class="keyword">bool</span> next)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusOutEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(wheelevent)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QWheelEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paintEvent</span><span class="params">(QPaintEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scrollContentsBy</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showEvent</span><span class="params">(QShowEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inputMethodEvent</span><span class="params">(QInputMethodEvent *event)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawForeground</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawItems</span><span class="params">(QPainter *painter, <span class="keyword">int</span> numItems,</span></span></span><br><span class="line"><span class="function"><span class="params">                           QGraphicsItem *items[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QStyleOptionGraphicsItem options[])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsView)</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsView)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_CURSOR</span></span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_setViewportCursor(<span class="keyword">const</span> QCursor &amp;))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_unsetViewportCursor())</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneWidget</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScene</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScenePrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemPrivate</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QGraphicsView::CacheMode)</span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QGraphicsView::OptimizationFlags)</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsView::setSceneRect(qreal ax, qreal ay, qreal aw, qreal ah)</span><br><span class="line">&#123; setSceneRect(QRectF(ax, ay, aw, ah)); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsView::centerOn(qreal ax, qreal ay)</span><br><span class="line">&#123; centerOn(QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsView::ensureVisible(qreal ax, qreal ay, qreal aw, qreal ah, <span class="keyword">int</span> xmargin, <span class="keyword">int</span> ymargin)</span><br><span class="line">&#123; ensureVisible(QRectF(ax, ay, aw, ah), xmargin, ymargin); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsView::fitInView(qreal ax, qreal ay, qreal w, qreal h, Qt::AspectRatioMode mode)</span><br><span class="line">&#123; fitInView(QRectF(ax, ay, w, h), mode); &#125;</span><br><span class="line"><span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; QGraphicsView::items(<span class="keyword">int</span> ax, <span class="keyword">int</span> ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> items(QPoint(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; QGraphicsView::items(<span class="keyword">int</span> ax, <span class="keyword">int</span> ay, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Qt::ItemSelectionMode mode) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> items(QRect(ax, ay, w, h), mode); &#125;</span><br><span class="line"><span class="keyword">inline</span> QGraphicsItem *QGraphicsView::itemAt(<span class="keyword">int</span> ax, <span class="keyword">int</span> ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> itemAt(QPoint(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsView::mapToScene(<span class="keyword">int</span> ax, <span class="keyword">int</span> ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToScene(QPoint(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsView::mapToScene(<span class="keyword">int</span> ax, <span class="keyword">int</span> ay, <span class="keyword">int</span> w, <span class="keyword">int</span> h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToScene(QRect(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPoint QGraphicsView::mapFromScene(qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromScene(QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygon QGraphicsView::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromScene(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QGRAPHICSVIEW_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2图形视图</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtGraphics" scheme="http://bugnull.com/tags/QtGraphics/"/>
    
  </entry>
  
  <entry>
    <title>QGraphicsScene</title>
    <link href="http://bugnull.com/QT/qgraphicsscene/"/>
    <id>http://bugnull.com/QT/qgraphicsscene/</id>
    <published>2022-11-06T15:27:55.186Z</published>
    <updated>2022-09-15T16:31:41.547Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QGraphicsScene"><a href="#QGraphicsScene" class="headerlink" title="QGraphicsScene"></a>QGraphicsScene</h3><blockquote><p>Header:  #include <qgraphicsscene><br>qmake: QT += widgets Since: Qt 4.2 Inherits: QObject</qgraphicsscene></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QGRAPHICSSCENE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QGRAPHICSSCENE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qtwidgetsglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qpoint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qrect.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qbrush.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qfont.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qtransform.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qpen.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(graphicsview);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">QList</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFocusEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFont</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFontMetrics</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsEllipseItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemGroup</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsLineItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPathItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPixmapItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPolygonItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsProxyWidget</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsRectItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneContextMenuEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneDragDropEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneHelpEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneHoverEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneMouseEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneWheelEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSimpleTextItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsTextItem</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsView</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidget</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneIndex</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QHelpEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QInputMethodEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QKeyEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QLineF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPainterPath</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPixmap</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPointF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPolygonF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRectF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QSizeF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QStyle</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QStyleOptionGraphicsItem</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScenePrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsScene</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(QBrush backgroundBrush READ backgroundBrush WRITE setBackgroundBrush)</span><br><span class="line">    Q_PROPERTY(QBrush foregroundBrush READ foregroundBrush WRITE setForegroundBrush)</span><br><span class="line">    Q_PROPERTY(ItemIndexMethod itemIndexMethod READ itemIndexMethod WRITE setItemIndexMethod)</span><br><span class="line">    Q_PROPERTY(QRectF sceneRect READ sceneRect WRITE setSceneRect)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">int</span> bspTreeDepth READ bspTreeDepth WRITE setBspTreeDepth)</span><br><span class="line">    Q_PROPERTY(QPalette palette READ palette WRITE setPalette)</span><br><span class="line">    Q_PROPERTY(QFont font READ font WRITE setFont)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> sortCacheEnabled READ isSortCacheEnabled WRITE setSortCacheEnabled)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> stickyFocus READ stickyFocus WRITE setStickyFocus)</span><br><span class="line">    Q_PROPERTY(qreal minimumRenderSize READ minimumRenderSize WRITE setMinimumRenderSize)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> focusOnTouch READ focusOnTouch WRITE setFocusOnTouch)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> ItemIndexMethod &#123;</span><br><span class="line">        BspTreeIndex,</span><br><span class="line">        NoIndex = <span class="number">-1</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(ItemIndexMethod)</span><br><span class="line">    <span class="keyword">enum</span> SceneLayer &#123;</span><br><span class="line">        ItemLayer = <span class="number">0x1</span>,</span><br><span class="line">        BackgroundLayer = <span class="number">0x2</span>,</span><br><span class="line">        ForegroundLayer = <span class="number">0x4</span>,</span><br><span class="line">        AllLayers = <span class="number">0xffff</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_DECLARE_FLAGS(SceneLayers, SceneLayer)</span><br><span class="line"></span><br><span class="line">    QGraphicsScene(QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    QGraphicsScene(<span class="keyword">const</span> QRectF &amp;sceneRect, QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    QGraphicsScene(qreal x, qreal y, qreal width, qreal height, QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line">    <span class="keyword">virtual</span> ~QGraphicsScene();</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">sceneRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> qreal <span class="title">width</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> sceneRect().width(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> qreal <span class="title">height</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> sceneRect().height(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSceneRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setSceneRect</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span></span></span><br><span class="line"><span class="function">    </span>&#123; setSceneRect(QRectF(x, y, w, h)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">(QPainter *painter,</span></span></span><br><span class="line"><span class="function"><span class="params">                <span class="keyword">const</span> QRectF &amp;target = QRectF(), <span class="keyword">const</span> QRectF &amp;source = QRectF(),</span></span></span><br><span class="line"><span class="function"><span class="params">                Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ItemIndexMethod <span class="title">itemIndexMethod</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setItemIndexMethod</span><span class="params">(ItemIndexMethod method)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">bool</span> <span class="title">isSortCacheEnabled</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">setSortCacheEnabled</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">bspTreeDepth</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBspTreeDepth</span><span class="params">(<span class="keyword">int</span> depth)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">itemsBoundingRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(Qt::SortOrder order = Qt::DescendingOrder) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPointF &amp;pos, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform()) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QRectF &amp;rect, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform()) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPolygonF &amp;polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform()) <span class="keyword">const</span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; items(<span class="keyword">const</span> QPainterPath &amp;path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, Qt::SortOrder order = Qt::DescendingOrder, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform()) <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; collidingItems(<span class="keyword">const</span> QGraphicsItem *item, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> QGraphicsItem *<span class="title">itemAt</span><span class="params">(<span class="keyword">const</span> QPointF &amp;position)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        QList&lt;QGraphicsItem *&gt; itemsAtPoint = items(position);</span><br><span class="line">        <span class="keyword">return</span> itemsAtPoint.isEmpty() ? <span class="literal">nullptr</span> : itemsAtPoint.first();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">itemAt</span><span class="params">(<span class="keyword">const</span> QPointF &amp;pos, <span class="keyword">const</span> QTransform &amp;deviceTransform)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    QT_DEPRECATED <span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; items(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> items(QRectF(x, y, w, h), mode); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; items(qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode, Qt::SortOrder order,</span><br><span class="line">                                        <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform()) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> items(QRectF(x, y, w, h), mode, order, deviceTransform); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> QGraphicsItem *<span class="title">itemAt</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        QList&lt;QGraphicsItem *&gt; itemsAtPoint = items(QPointF(x, y));</span><br><span class="line">        <span class="keyword">return</span> itemsAtPoint.isEmpty() ? <span class="literal">nullptr</span> : itemsAtPoint.first();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QGraphicsItem *<span class="title">itemAt</span><span class="params">(qreal x, qreal y, <span class="keyword">const</span> QTransform &amp;deviceTransform)</span> <span class="keyword">const</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> itemAt(QPointF(x, y), deviceTransform); &#125;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; selectedItems() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">selectionArea</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelectionArea</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, <span class="keyword">const</span> QTransform &amp;deviceTransform)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelectionArea</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelectionArea</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, Qt::ItemSelectionOperation selectionOperation, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape, <span class="keyword">const</span> QTransform &amp;deviceTransform = QTransform())</span></span>;</span><br><span class="line">    <span class="comment">// ### Qt6 merge the last 2 functions and add a default: Qt::ItemSelectionOperation selectionOperation = Qt::ReplaceSelection</span></span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItemGroup *<span class="title">createItemGroup</span><span class="params">(<span class="keyword">const</span> QList&lt;QGraphicsItem *&gt; &amp;items)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroyItemGroup</span><span class="params">(QGraphicsItemGroup *group)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line">    <span class="function">QGraphicsEllipseItem *<span class="title">addEllipse</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsLineItem *<span class="title">addLine</span><span class="params">(<span class="keyword">const</span> QLineF &amp;line, <span class="keyword">const</span> QPen &amp;pen = QPen())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsPathItem *<span class="title">addPath</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsPixmapItem *<span class="title">addPixmap</span><span class="params">(<span class="keyword">const</span> QPixmap &amp;pixmap)</span></span>;</span><br><span class="line">    <span class="function">QGraphicsPolygonItem *<span class="title">addPolygon</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsRectItem *<span class="title">addRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsTextItem *<span class="title">addText</span><span class="params">(<span class="keyword">const</span> QString &amp;text, <span class="keyword">const</span> QFont &amp;font = QFont())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsSimpleTextItem *<span class="title">addSimpleText</span><span class="params">(<span class="keyword">const</span> QString &amp;text, <span class="keyword">const</span> QFont &amp;font = QFont())</span></span>;</span><br><span class="line">    <span class="function">QGraphicsProxyWidget *<span class="title">addWidget</span><span class="params">(QWidget *widget, Qt::WindowFlags wFlags = Qt::WindowFlags())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QGraphicsEllipseItem *<span class="title">addEllipse</span><span class="params">(qreal x, qreal y, qreal w, qreal h, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> addEllipse(QRectF(x, y, w, h), pen, brush); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QGraphicsLineItem *<span class="title">addLine</span><span class="params">(qreal x1, qreal y1, qreal x2, qreal y2, <span class="keyword">const</span> QPen &amp;pen = QPen())</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> addLine(QLineF(x1, y1, x2, y2), pen); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QGraphicsRectItem *<span class="title">addRect</span><span class="params">(qreal x, qreal y, qreal w, qreal h, <span class="keyword">const</span> QPen &amp;pen = QPen(), <span class="keyword">const</span> QBrush &amp;brush = QBrush())</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="keyword">return</span> addRect(QRectF(x, y, w, h), pen, brush); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">focusItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFocusItem</span><span class="params">(QGraphicsItem *item, Qt::FocusReason focusReason = Qt::OtherFocusReason)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasFocus</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFocus</span><span class="params">(Qt::FocusReason focusReason = Qt::OtherFocusReason)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearFocus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStickyFocus</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">stickyFocus</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">mouseGrabberItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QBrush <span class="title">backgroundBrush</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBackgroundBrush</span><span class="params">(<span class="keyword">const</span> QBrush &amp;brush)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QBrush <span class="title">foregroundBrush</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setForegroundBrush</span><span class="params">(<span class="keyword">const</span> QBrush &amp;brush)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">inputMethodQuery</span><span class="params">(Qt::InputMethodQuery query)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    QList &lt;QGraphicsView *&gt; views() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span></span></span><br><span class="line"><span class="function">    </span>&#123; update(QRectF(x, y, w, h)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(qreal x, qreal y, qreal w, qreal h, SceneLayers layers = AllLayers)</span></span></span><br><span class="line"><span class="function">    </span>&#123; invalidate(QRectF(x, y, w, h), layers); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QStyle *<span class="title">style</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStyle</span><span class="params">(QStyle *style)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(<span class="keyword">const</span> QFont &amp;font)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPalette <span class="title">palette</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPalette</span><span class="params">(<span class="keyword">const</span> QPalette &amp;palette)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isActive</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">activePanel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setActivePanel</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line">    <span class="function">QGraphicsWidget *<span class="title">activeWindow</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setActiveWindow</span><span class="params">(QGraphicsWidget *widget)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">sendEvent</span><span class="params">(QGraphicsItem *item, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">qreal <span class="title">minimumRenderSize</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMinimumRenderSize</span><span class="params">(qreal minSize)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">focusOnTouch</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFocusOnTouch</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF(), SceneLayers layers = AllLayers)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">advance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearSelection</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *watched, QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">contextMenuEvent</span><span class="params">(QGraphicsSceneContextMenuEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">focusInEvent</span><span class="params">(QFocusEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">focusOutEvent</span><span class="params">(QFocusEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">helpEvent</span><span class="params">(QGraphicsSceneHelpEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QGraphicsSceneWheelEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">inputMethodEvent</span><span class="params">(QInputMethodEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawBackground</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawForeground</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drawItems</span><span class="params">(QPainter *painter, <span class="keyword">int</span> numItems,</span></span></span><br><span class="line"><span class="function"><span class="params">                           QGraphicsItem *items[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QStyleOptionGraphicsItem options[],</span></span></span><br><span class="line"><span class="function"><span class="params">                           QWidget *widget = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Q_SLOTS:</span><br><span class="line">    <span class="function">QT6_VIRTUAL <span class="keyword">bool</span> <span class="title">focusNextPrevChild</span><span class="params">(<span class="keyword">bool</span> next)</span></span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changed</span><span class="params">(<span class="keyword">const</span> QList&lt;QRectF&gt; &amp;region)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sceneRectChanged</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">selectionChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusItemChanged</span><span class="params">(QGraphicsItem *newFocus, QGraphicsItem *oldFocus, Qt::FocusReason reason)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsScene)</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsScene)</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_emitUpdated())</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_polishItems())</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_processDirtyItems())</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_updateScenePosDescendants())</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItem</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsObject</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsView</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsViewPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidget</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidgetPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsEffect</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneIndex</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneIndexPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneBspTreeIndex</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneBspTreeIndexPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemEffectSourcePrivate</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_GESTURES</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGesture</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QGraphicsScene::SceneLayers)</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2图形视图</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtGraphics" scheme="http://bugnull.com/tags/QtGraphics/"/>
    
  </entry>
  
  <entry>
    <title>QGraphicsItem</title>
    <link href="http://bugnull.com/QT/qgraphicsitem/"/>
    <id>http://bugnull.com/QT/qgraphicsitem/</id>
    <published>2022-11-06T15:27:55.177Z</published>
    <updated>2022-09-15T16:33:23.658Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QGraphicsItem"><a href="#QGraphicsItem" class="headerlink" title="QGraphicsItem"></a>QGraphicsItem</h3><blockquote><p>Header:  #include <qgraphicsitem><br>qmake: QT += widgets Since: Qt 4.2 Inherited By: QAbstractGraphicsShapeItem, QGraphicsItemGroup, QGraphicsLineItem, QGraphicsObject, and QGraphicsPixmapItem</qgraphicsitem></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QGRAPHICSITEM_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QGRAPHICSITEM_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qtwidgetsglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qvariant.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qrect.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qscopedpointer.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qpainterpath.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtGui/qpixmap.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tst_QGraphicsItem</span>;</span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(graphicsview);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QBrush</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QCursor</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QFocusEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsEffect</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemGroup</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsObject</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneContextMenuEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneDragDropEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneHoverEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneMouseEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneWheelEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScene</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsTransform</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidget</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QInputMethodEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QKeyEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMatrix</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMenu</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPainter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPen</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPointF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QRectF</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QStyleOptionGraphicsItem</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsItem</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> GraphicsItemFlag &#123;</span><br><span class="line">        ItemIsMovable = <span class="number">0x1</span>,</span><br><span class="line">        ItemIsSelectable = <span class="number">0x2</span>,</span><br><span class="line">        ItemIsFocusable = <span class="number">0x4</span>,</span><br><span class="line">        ItemClipsToShape = <span class="number">0x8</span>,</span><br><span class="line">        ItemClipsChildrenToShape = <span class="number">0x10</span>,</span><br><span class="line">        ItemIgnoresTransformations = <span class="number">0x20</span>,</span><br><span class="line">        ItemIgnoresParentOpacity = <span class="number">0x40</span>,</span><br><span class="line">        ItemDoesntPropagateOpacityToChildren = <span class="number">0x80</span>,</span><br><span class="line">        ItemStacksBehindParent = <span class="number">0x100</span>,</span><br><span class="line">        ItemUsesExtendedStyleOption = <span class="number">0x200</span>,</span><br><span class="line">        ItemHasNoContents = <span class="number">0x400</span>,</span><br><span class="line">        ItemSendsGeometryChanges = <span class="number">0x800</span>,</span><br><span class="line">        ItemAcceptsInputMethod = <span class="number">0x1000</span>,</span><br><span class="line">        ItemNegativeZStacksBehindParent = <span class="number">0x2000</span>,</span><br><span class="line">        ItemIsPanel = <span class="number">0x4000</span>,</span><br><span class="line">        ItemIsFocusScope = <span class="number">0x8000</span>, <span class="comment">// internal</span></span><br><span class="line">        ItemSendsScenePositionChanges = <span class="number">0x10000</span>,</span><br><span class="line">        ItemStopsClickFocusPropagation = <span class="number">0x20000</span>,</span><br><span class="line">        ItemStopsFocusHandling = <span class="number">0x40000</span>,</span><br><span class="line">        ItemContainsChildrenInShape = <span class="number">0x80000</span></span><br><span class="line">        <span class="comment">// NB! Don't forget to increase the d_ptr-&gt;flags bit field by 1 when adding a new flag.</span></span><br><span class="line">    &#125;;</span><br><span class="line">    Q_DECLARE_FLAGS(GraphicsItemFlags, GraphicsItemFlag)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> GraphicsItemChange &#123;</span><br><span class="line">        ItemPositionChange,</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 14)</span></span><br><span class="line">        ItemMatrixChange Q_DECL_ENUMERATOR_DEPRECATED_X("Use ItemTransformChange instead"),</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        ItemVisibleChange = <span class="number">2</span>,</span><br><span class="line">        ItemEnabledChange,</span><br><span class="line">        ItemSelectedChange,</span><br><span class="line">        ItemParentChange,</span><br><span class="line">        ItemChildAddedChange,</span><br><span class="line">        ItemChildRemovedChange,</span><br><span class="line">        ItemTransformChange,</span><br><span class="line">        ItemPositionHasChanged,</span><br><span class="line">        ItemTransformHasChanged,</span><br><span class="line">        ItemSceneChange,</span><br><span class="line">        ItemVisibleHasChanged,</span><br><span class="line">        ItemEnabledHasChanged,</span><br><span class="line">        ItemSelectedHasChanged,</span><br><span class="line">        ItemParentHasChanged,</span><br><span class="line">        ItemSceneHasChanged,</span><br><span class="line">        ItemCursorChange,</span><br><span class="line">        ItemCursorHasChanged,</span><br><span class="line">        ItemToolTipChange,</span><br><span class="line">        ItemToolTipHasChanged,</span><br><span class="line">        ItemFlagsChange,</span><br><span class="line">        ItemFlagsHaveChanged,</span><br><span class="line">        ItemZValueChange,</span><br><span class="line">        ItemZValueHasChanged,</span><br><span class="line">        ItemOpacityChange,</span><br><span class="line">        ItemOpacityHasChanged,</span><br><span class="line">        ItemScenePositionHasChanged,</span><br><span class="line">        ItemRotationChange,</span><br><span class="line">        ItemRotationHasChanged,</span><br><span class="line">        ItemScaleChange,</span><br><span class="line">        ItemScaleHasChanged,</span><br><span class="line">        ItemTransformOriginPointChange,</span><br><span class="line">        ItemTransformOriginPointHasChanged</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> CacheMode &#123;</span><br><span class="line">        NoCache,</span><br><span class="line">        ItemCoordinateCache,</span><br><span class="line">        DeviceCoordinateCache</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> PanelModality</span><br><span class="line">    &#123;</span><br><span class="line">        NonModal,</span><br><span class="line">        PanelModal,</span><br><span class="line">        SceneModal</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QGraphicsItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsScene *<span class="title">scene</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">parentItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">topLevelItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsObject *<span class="title">parentObject</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsWidget *<span class="title">parentWidget</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsWidget *<span class="title">topLevelWidget</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsWidget *<span class="title">window</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">panel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setParentItem</span><span class="params">(QGraphicsItem *parent)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    QT_DEPRECATED <span class="keyword">inline</span> QList&lt;QGraphicsItem *&gt; children() <span class="keyword">const</span> &#123; <span class="keyword">return</span> childItems(); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    QList&lt;QGraphicsItem *&gt; childItems() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isWidget</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isWindow</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPanel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsObject *<span class="title">toGraphicsObject</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> QGraphicsObject *<span class="title">toGraphicsObject</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItemGroup *<span class="title">group</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGroup</span><span class="params">(QGraphicsItemGroup *group)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">GraphicsItemFlags <span class="title">flags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(GraphicsItemFlag flag, <span class="keyword">bool</span> enabled = <span class="literal">true</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFlags</span><span class="params">(GraphicsItemFlags flags)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">CacheMode <span class="title">cacheMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCacheMode</span><span class="params">(CacheMode mode, <span class="keyword">const</span> QSize &amp;cacheSize = QSize())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">PanelModality <span class="title">panelModality</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPanelModality</span><span class="params">(PanelModality panelModality)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isBlockedByModalPanel</span><span class="params">(QGraphicsItem **blockingPanel = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_TOOLTIP</span></span><br><span class="line">    <span class="function">QString <span class="title">toolTip</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setToolTip</span><span class="params">(<span class="keyword">const</span> QString &amp;toolTip)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_CURSOR</span></span><br><span class="line">    <span class="function">QCursor <span class="title">cursor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCursor</span><span class="params">(<span class="keyword">const</span> QCursor &amp;cursor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasCursor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unsetCursor</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isVisible</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isVisibleTo</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *parent)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVisible</span><span class="params">(<span class="keyword">bool</span> visible)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">hide</span><span class="params">()</span> </span>&#123; setVisible(<span class="literal">false</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; setVisible(<span class="literal">true</span>); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEnabled</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEnabled</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSelected</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelected</span><span class="params">(<span class="keyword">bool</span> selected)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">acceptDrops</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAcceptDrops</span><span class="params">(<span class="keyword">bool</span> on)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">qreal <span class="title">opacity</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">qreal <span class="title">effectiveOpacity</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOpacity</span><span class="params">(qreal opacity)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(graphicseffect)</span></span><br><span class="line">    <span class="comment">// Effect</span></span><br><span class="line">    <span class="function">QGraphicsEffect *<span class="title">graphicsEffect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGraphicsEffect</span><span class="params">(QGraphicsEffect *effect)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QT_CONFIG(graphicseffect)</span></span></span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">MouseButtons <span class="title">acceptedMouseButtons</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAcceptedMouseButtons</span><span class="params">(Qt::MouseButtons buttons)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">acceptsHoverEvents</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> acceptHoverEvents(); &#125;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setAcceptsHoverEvents</span><span class="params">(<span class="keyword">bool</span> enabled)</span> </span>&#123; setAcceptHoverEvents(enabled); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">acceptHoverEvents</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAcceptHoverEvents</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">acceptTouchEvents</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAcceptTouchEvents</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">filtersChildEvents</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFiltersChildEvents</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">handlesChildEvents</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHandlesChildEvents</span><span class="params">(<span class="keyword">bool</span> enabled)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isActive</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setActive</span><span class="params">(<span class="keyword">bool</span> active)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasFocus</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFocus</span><span class="params">(Qt::FocusReason focusReason = Qt::OtherFocusReason)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearFocus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">focusProxy</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFocusProxy</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">focusItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">focusScopeItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">grabMouse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ungrabMouse</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">grabKeyboard</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ungrabKeyboard</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Positioning in scene coordinates</span></span><br><span class="line">    <span class="function">QPointF <span class="title">pos</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> qreal <span class="title">x</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> pos().x(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setX</span><span class="params">(qreal x)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> qreal <span class="title">y</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> pos().y(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setY</span><span class="params">(qreal y)</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">scenePos</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPos</span><span class="params">(<span class="keyword">const</span> QPointF &amp;pos)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setPos</span><span class="params">(qreal x, qreal y)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">moveBy</span><span class="params">(qreal dx, qreal dy)</span> </span>&#123; setPos(pos().x() + dx, pos().y() + dy); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF(), <span class="keyword">int</span> xmargin = <span class="number">50</span>, <span class="keyword">int</span> ymargin = <span class="number">50</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">ensureVisible</span><span class="params">(qreal x, qreal y, qreal w, qreal h, <span class="keyword">int</span> xmargin = <span class="number">50</span>, <span class="keyword">int</span> ymargin = <span class="number">50</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Local transformation</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use transform() instead"</span>)</span><br><span class="line">    <span class="function">QMatrix <span class="title">matrix</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use sceneTransform() instead"</span>)</span><br><span class="line">    <span class="function">QMatrix <span class="title">sceneMatrix</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use setTransform() instead"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMatrix</span><span class="params">(<span class="keyword">const</span> QMatrix &amp;matrix, <span class="keyword">bool</span> combine = <span class="literal">false</span>)</span></span>;</span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use resetTransform() instead"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetMatrix</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">QTransform <span class="title">transform</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QTransform <span class="title">sceneTransform</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QTransform <span class="title">deviceTransform</span><span class="params">(<span class="keyword">const</span> QTransform &amp;viewportTransform)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QTransform <span class="title">itemTransform</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *other, <span class="keyword">bool</span> *ok = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransform</span><span class="params">(<span class="keyword">const</span> QTransform &amp;matrix, <span class="keyword">bool</span> combine = <span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetTransform</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(qreal angle)</span> </span>&#123; setTransform(QTransform().rotate(angle), <span class="literal">true</span>); &#125;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">scale</span><span class="params">(qreal sx, qreal sy)</span> </span>&#123; setTransform(QTransform::fromScale(sx, sy), <span class="literal">true</span>); &#125;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">shear</span><span class="params">(qreal sh, qreal sv)</span> </span>&#123; setTransform(QTransform().shear(sh, sv), <span class="literal">true</span>); &#125;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(qreal dx, qreal dy)</span> </span>&#123; setTransform(QTransform::fromTranslate(dx, dy), <span class="literal">true</span>); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRotation</span><span class="params">(qreal angle)</span></span>;</span><br><span class="line">    <span class="function">qreal <span class="title">rotation</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setScale</span><span class="params">(qreal scale)</span></span>;</span><br><span class="line">    <span class="function">qreal <span class="title">scale</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    QList&lt;QGraphicsTransform *&gt; transformations() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransformations</span><span class="params">(<span class="keyword">const</span> QList&lt;QGraphicsTransform *&gt; &amp;transformations)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPointF <span class="title">transformOriginPoint</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransformOriginPoint</span><span class="params">(<span class="keyword">const</span> QPointF &amp;origin)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setTransformOriginPoint</span><span class="params">(qreal ax, qreal ay)</span></span></span><br><span class="line"><span class="function">    </span>&#123; setTransformOriginPoint(QPointF(ax,ay)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">advance</span><span class="params">(<span class="keyword">int</span> phase)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Stacking order</span></span><br><span class="line">    <span class="function">qreal <span class="title">zValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setZValue</span><span class="params">(qreal z)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stackBefore</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *sibling)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hit test</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">childrenBoundingRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">sceneBoundingRect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isClipped</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">clipPath</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">collidesWithItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *other, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">collidesWithPath</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    QList&lt;QGraphicsItem *&gt; collidingItems(Qt::ItemSelectionMode mode = Qt::IntersectsItemShape) <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscured</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF())</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isObscured</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRegion <span class="title">boundingRegion</span><span class="params">(<span class="keyword">const</span> QTransform &amp;itemToDeviceTransform)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">qreal <span class="title">boundingRegionGranularity</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBoundingRegionGranularity</span><span class="params">(qreal granularity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Drawing</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect = QRectF())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(qreal x, qreal y, qreal width, qreal height)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scroll</span><span class="params">(qreal dx, qreal dy, <span class="keyword">const</span> QRectF &amp;rect = QRectF())</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Coordinate mapping</span></span><br><span class="line">    <span class="function">QPointF <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">mapToParent</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToParent</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectToParent</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectToScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToParent</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapToParent</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapToScene</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">mapFromParent</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPointF <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromParent</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectFromParent</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QRectF <span class="title">mapRectFromScene</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromParent</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPolygonF <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, <span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapFromParent</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">mapFromScene</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapToParent</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapToScene</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapToParent</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapToScene</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectToItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectToParent</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectToScene</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapFromParent</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPointF <span class="title">mapFromScene</span><span class="params">(qreal x, qreal y)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapFromParent</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QPolygonF <span class="title">mapFromScene</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectFromItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item, qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectFromParent</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QRectF <span class="title">mapRectFromScene</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isAncestorOf</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *child)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QGraphicsItem *<span class="title">commonAncestorItem</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *other)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isUnderMouse</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Custom data</span></span><br><span class="line">    <span class="function">QVariant <span class="title">data</span><span class="params">(<span class="keyword">int</span> key)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">const</span> QVariant &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">InputMethodHints <span class="title">inputMethodHints</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInputMethodHints</span><span class="params">(Qt::InputMethodHints hints)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123;</span><br><span class="line">        Type = <span class="number">1</span>,</span><br><span class="line">        UserType = <span class="number">65536</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">installSceneEventFilter</span><span class="params">(QGraphicsItem *filterItem)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeSceneEventFilter</span><span class="params">(QGraphicsItem *filterItem)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateMicroFocus</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">sceneEventFilter</span><span class="params">(QGraphicsItem *watched, QEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">sceneEvent</span><span class="params">(QEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">contextMenuEvent</span><span class="params">(QGraphicsSceneContextMenuEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">focusInEvent</span><span class="params">(QFocusEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">focusOutEvent</span><span class="params">(QFocusEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoverEnterEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoverMoveEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">hoverLeaveEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">wheelEvent</span><span class="params">(QGraphicsSceneWheelEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">inputMethodEvent</span><span class="params">(QInputMethodEvent *event)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">inputMethodQuery</span><span class="params">(Qt::InputMethodQuery query)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">itemChange</span><span class="params">(GraphicsItemChange change, <span class="keyword">const</span> QVariant &amp;value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> Extension &#123;</span><br><span class="line">        UserExtension = <span class="number">0x80000000</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QGraphicsItem(QGraphicsItemPrivate &amp;dd, QGraphicsItem *parent);</span><br><span class="line">    QScopedPointer&lt;QGraphicsItemPrivate&gt; d_ptr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToIndex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeFromIndex</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">prepareGeometryChange</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsItem)</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemGroup</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScene</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsScenePrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneFindItemBspTreeVisitor</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneBspTree</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsView</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsViewPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsObject</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidget</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsWidgetPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsProxyWidgetPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneIndex</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneIndexPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneBspTreeIndex</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSceneBspTreeIndexPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemEffectSourcePrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsTransformPrivate</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_GESTURES</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGestureManager</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> :</span>:tst_QGraphicsItem;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">qt_closestLeaf</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *, <span class="keyword">const</span> QGraphicsItem *)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">qt_closestItemFirst</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *, <span class="keyword">const</span> QGraphicsItem *)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QGraphicsItem::GraphicsItemFlags)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> Q_CLANG_QDOC</span></span><br><span class="line">Q_DECLARE_INTERFACE(QGraphicsItem, <span class="string">"org.qt-project.Qt.QGraphicsItem"</span>)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsItem::setPos(qreal ax, qreal ay)</span><br><span class="line">&#123; setPos(QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsItem::ensureVisible(qreal ax, qreal ay, qreal w, qreal h, <span class="keyword">int</span> xmargin, <span class="keyword">int</span> ymargin)</span><br><span class="line">&#123; ensureVisible(QRectF(ax, ay, w, h), xmargin, ymargin); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsItem::update(qreal ax, qreal ay, qreal width, qreal height)</span><br><span class="line">&#123; update(QRectF(ax, ay, width, height)); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QGraphicsItem::isObscured(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> isObscured(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapToItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToItem(item, QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapToParent(qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToParent(QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapToScene(qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToScene(QPointF(ax, ay));  &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapFromItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromItem(item, QPointF(ax, ay)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapFromParent(qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromParent(QPointF(ax, ay));  &#125;</span><br><span class="line"><span class="keyword">inline</span> QPointF QGraphicsItem::mapFromScene(qreal ax, qreal ay) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromScene(QPointF(ax, ay));  &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapToItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToItem(item, QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapToParent(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToParent(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapToScene(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapToScene(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectToItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectToItem(item, QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectToParent(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectToParent(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectToScene(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectToScene(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapFromItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromItem(item, QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapFromParent(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromParent(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QPolygonF QGraphicsItem::mapFromScene(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapFromScene(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectFromItem(<span class="keyword">const</span> QGraphicsItem *item, qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectFromItem(item, QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectFromParent(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectFromParent(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"><span class="keyword">inline</span> QRectF QGraphicsItem::mapRectFromScene(qreal ax, qreal ay, qreal w, qreal h) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> mapRectFromScene(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsObject</span> :</span> <span class="keyword">public</span> QObject, <span class="keyword">public</span> QGraphicsItem</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(QGraphicsObject* parent READ parentObject WRITE setParentItem NOTIFY parentChanged DESIGNABLE <span class="literal">false</span>)</span><br><span class="line">    Q_PROPERTY(qreal opacity READ opacity WRITE setOpacity NOTIFY opacityChanged FINAL)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> enabled READ isEnabled WRITE setEnabled NOTIFY enabledChanged)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> visible READ isVisible WRITE setVisible NOTIFY visibleChanged FINAL)</span><br><span class="line">    Q_PROPERTY(QPointF pos READ pos WRITE setPos FINAL)</span><br><span class="line">    Q_PROPERTY(qreal x READ x WRITE setX NOTIFY xChanged FINAL)</span><br><span class="line">    Q_PROPERTY(qreal y READ y WRITE setY NOTIFY yChanged FINAL)</span><br><span class="line">    Q_PROPERTY(qreal z READ zValue WRITE setZValue NOTIFY zChanged FINAL)</span><br><span class="line">    Q_PROPERTY(qreal rotation READ rotation WRITE setRotation NOTIFY rotationChanged)</span><br><span class="line">    Q_PROPERTY(qreal scale READ scale WRITE setScale NOTIFY scaleChanged)</span><br><span class="line">    Q_PROPERTY(QPointF transformOriginPoint READ transformOriginPoint WRITE setTransformOriginPoint)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(graphicseffect)</span></span><br><span class="line">    Q_PROPERTY(QGraphicsEffect *effect READ graphicsEffect WRITE setGraphicsEffect)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), QDeclarativeListProperty&lt;QGraphicsObject&gt; children READ childrenList DESIGNABLE <span class="literal">false</span> NOTIFY childrenChanged)</span><br><span class="line">    Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), qreal width READ width WRITE setWidth NOTIFY widthChanged RESET resetWidth FINAL)</span><br><span class="line">    Q_PRIVATE_PROPERTY(QGraphicsItem::d_func(), qreal height READ height WRITE setHeight NOTIFY heightChanged RESET resetHeight FINAL)</span><br><span class="line">    Q_CLASSINFO(<span class="string">"DefaultProperty"</span>, <span class="string">"children"</span>)</span><br><span class="line">    Q_INTERFACES(QGraphicsItem)</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsObject</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsObject();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> QObject::children;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_GESTURES</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">grabGesture</span><span class="params">(Qt::GestureType type, Qt::GestureFlags flags = Qt::GestureFlags())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ungrabGesture</span><span class="params">(Qt::GestureType type)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateMicroFocus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">parentChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">opacityChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visibleChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">enabledChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">xChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">yChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">zChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rotationChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scaleChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">childrenChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">widthChanged</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">heightChanged</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QGraphicsObject(QGraphicsItemPrivate &amp;dd, QGraphicsItem *parent);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *ev)</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItem</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemPrivate</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractGraphicsShapeItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QAbstractGraphicsShapeItem</span> :</span> <span class="keyword">public</span> QGraphicsItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractGraphicsShapeItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QAbstractGraphicsShapeItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPen</span><span class="params">(<span class="keyword">const</span> QPen &amp;pen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QBrush <span class="title">brush</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setBrush</span><span class="params">(<span class="keyword">const</span> QBrush &amp;brush)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractGraphicsShapeItem(QAbstractGraphicsShapeItemPrivate &amp;dd,</span><br><span class="line">                               QGraphicsItem *parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QAbstractGraphicsShapeItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QAbstractGraphicsShapeItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPathItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsPathItem</span> :</span> <span class="keyword">public</span> QAbstractGraphicsShapeItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPathItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPathItem</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsPathItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QPainterPath <span class="title">path</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPath</span><span class="params">(<span class="keyword">const</span> QPainterPath &amp;path)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsPathItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsPathItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsRectItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsRectItem</span> :</span> <span class="keyword">public</span> QAbstractGraphicsShapeItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsRectItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsRectItem</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsRectItem</span><span class="params">(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsRectItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">rect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setRect</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsRectItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsRectItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsRectItem::setRect(qreal ax, qreal ay, qreal w, qreal h)</span><br><span class="line">&#123; setRect(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsEllipseItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsEllipseItem</span> :</span> <span class="keyword">public</span> QAbstractGraphicsShapeItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsEllipseItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsEllipseItem</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsEllipseItem</span><span class="params">(qreal x, qreal y, qreal w, qreal h, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsEllipseItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">rect</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRect</span><span class="params">(<span class="keyword">const</span> QRectF &amp;rect)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setRect</span><span class="params">(qreal x, qreal y, qreal w, qreal h)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">startAngle</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStartAngle</span><span class="params">(<span class="keyword">int</span> angle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">spanAngle</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSpanAngle</span><span class="params">(<span class="keyword">int</span> angle)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">4</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsEllipseItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsEllipseItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsEllipseItem::setRect(qreal ax, qreal ay, qreal w, qreal h)</span><br><span class="line">&#123; setRect(QRectF(ax, ay, w, h)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPolygonItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsPolygonItem</span> :</span> <span class="keyword">public</span> QAbstractGraphicsShapeItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPolygonItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPolygonItem</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsPolygonItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QPolygonF <span class="title">polygon</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPolygon</span><span class="params">(<span class="keyword">const</span> QPolygonF &amp;polygon)</span></span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">FillRule <span class="title">fillRule</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFillRule</span><span class="params">(Qt::FillRule rule)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsPolygonItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsPolygonItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsLineItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsLineItem</span> :</span> <span class="keyword">public</span> QGraphicsItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsLineItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsLineItem</span><span class="params">(<span class="keyword">const</span> QLineF &amp;line, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsLineItem</span><span class="params">(qreal x1, qreal y1, qreal x2, qreal y2, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsLineItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QPen <span class="title">pen</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPen</span><span class="params">(<span class="keyword">const</span> QPen &amp;pen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QLineF <span class="title">line</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setLine</span><span class="params">(<span class="keyword">const</span> QLineF &amp;line)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setLine</span><span class="params">(qreal x1, qreal y1, qreal x2, qreal y2)</span></span></span><br><span class="line"><span class="function">    </span>&#123; setLine(QLineF(x1, y1, x2, y2)); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">6</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsLineItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsLineItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsPixmapItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsPixmapItem</span> :</span> <span class="keyword">public</span> QGraphicsItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> ShapeMode &#123;</span><br><span class="line">        MaskShape,</span><br><span class="line">        BoundingRectShape,</span><br><span class="line">        HeuristicMaskShape</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPixmapItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsPixmapItem</span><span class="params">(<span class="keyword">const</span> QPixmap &amp;pixmap, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsPixmapItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QPixmap <span class="title">pixmap</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPixmap</span><span class="params">(<span class="keyword">const</span> QPixmap &amp;pixmap)</span></span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">TransformationMode <span class="title">transformationMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTransformationMode</span><span class="params">(Qt::TransformationMode mode)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QPointF <span class="title">offset</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOffset</span><span class="params">(<span class="keyword">const</span> QPointF &amp;offset)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setOffset</span><span class="params">(qreal x, qreal y)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">7</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ShapeMode <span class="title">shapeMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setShapeMode</span><span class="params">(ShapeMode mode)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsPixmapItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsPixmapItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> QGraphicsPixmapItem::setOffset(qreal ax, qreal ay)</span><br><span class="line">&#123; setOffset(QPointF(ax, ay)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsTextItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QTextDocument</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QTextCursor</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsTextItem</span> :</span> <span class="keyword">public</span> QGraphicsObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    QDOC_PROPERTY(<span class="keyword">bool</span> openExternalLinks READ openExternalLinks WRITE setOpenExternalLinks)</span><br><span class="line">    QDOC_PROPERTY(QTextCursor textCursor READ textCursor WRITE setTextCursor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsTextItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsTextItem</span><span class="params">(<span class="keyword">const</span> QString &amp;text, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsTextItem();</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">toHtml</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHtml</span><span class="params">(<span class="keyword">const</span> QString &amp;html)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QString <span class="title">toPlainText</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPlainText</span><span class="params">(<span class="keyword">const</span> QString &amp;text)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(<span class="keyword">const</span> QFont &amp;font)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDefaultTextColor</span><span class="params">(<span class="keyword">const</span> QColor &amp;c)</span></span>;</span><br><span class="line">    <span class="function">QColor <span class="title">defaultTextColor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">8</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextWidth</span><span class="params">(qreal width)</span></span>;</span><br><span class="line">    <span class="function">qreal <span class="title">textWidth</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">adjustSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDocument</span><span class="params">(QTextDocument *document)</span></span>;</span><br><span class="line">    <span class="function">QTextDocument *<span class="title">document</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextInteractionFlags</span><span class="params">(Qt::TextInteractionFlags flags)</span></span>;</span><br><span class="line">    Qt::<span class="function">TextInteractionFlags <span class="title">textInteractionFlags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTabChangesFocus</span><span class="params">(<span class="keyword">bool</span> b)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">tabChangesFocus</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOpenExternalLinks</span><span class="params">(<span class="keyword">bool</span> open)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">openExternalLinks</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextCursor</span><span class="params">(<span class="keyword">const</span> QTextCursor &amp;cursor)</span></span>;</span><br><span class="line">    <span class="function">QTextCursor <span class="title">textCursor</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkActivated</span><span class="params">(<span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkHovered</span><span class="params">(<span class="keyword">const</span> QString &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">sceneEvent</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QGraphicsSceneMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextMenuEvent</span><span class="params">(QGraphicsSceneContextMenuEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyReleaseEvent</span><span class="params">(QKeyEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusInEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusOutEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QGraphicsSceneDragDropEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inputMethodEvent</span><span class="params">(QInputMethodEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoverEnterEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoverMoveEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hoverLeaveEvent</span><span class="params">(QGraphicsSceneHoverEvent *event)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QVariant <span class="title">inputMethodQuery</span><span class="params">(Qt::InputMethodQuery query)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsTextItem)</span><br><span class="line">    Q_PRIVATE_SLOT(dd, <span class="keyword">void</span> _q_updateBoundingRect(<span class="keyword">const</span> QSizeF &amp;))</span><br><span class="line">    Q_PRIVATE_SLOT(dd, <span class="keyword">void</span> _q_update(QRectF))</span><br><span class="line">    Q_PRIVATE_SLOT(dd, <span class="keyword">void</span> _q_ensureVisible(QRectF))</span><br><span class="line">    QGraphicsTextItemPrivate *dd;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QGraphicsTextItemPrivate</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsSimpleTextItemPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsSimpleTextItem</span> :</span> <span class="keyword">public</span> QAbstractGraphicsShapeItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsSimpleTextItem</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsSimpleTextItem</span><span class="params">(<span class="keyword">const</span> QString &amp;text, QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsSimpleTextItem();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setText</span><span class="params">(<span class="keyword">const</span> QString &amp;text)</span></span>;</span><br><span class="line">    <span class="function">QString <span class="title">text</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setFont</span><span class="params">(<span class="keyword">const</span> QFont &amp;font)</span></span>;</span><br><span class="line">    <span class="function">QFont <span class="title">font</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">shape</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">contains</span><span class="params">(<span class="keyword">const</span> QPointF &amp;point)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">9</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">supportsExtension</span><span class="params">(Extension extension)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setExtension</span><span class="params">(Extension extension, <span class="keyword">const</span> QVariant &amp;variant)</span> override</span>;</span><br><span class="line">    <span class="function">QVariant <span class="title">extension</span><span class="params">(<span class="keyword">const</span> QVariant &amp;variant)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsSimpleTextItem)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsSimpleTextItem)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QGraphicsItemGroupPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QGraphicsItemGroup</span> :</span> <span class="keyword">public</span> QGraphicsItem</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QGraphicsItemGroup</span><span class="params">(QGraphicsItem *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QGraphicsItemGroup();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addToGroup</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeFromGroup</span><span class="params">(QGraphicsItem *item)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QRectF <span class="title">boundingRect</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter, <span class="keyword">const</span> QStyleOptionGraphicsItem *option, QWidget *widget = <span class="literal">nullptr</span>)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isObscuredBy</span><span class="params">(<span class="keyword">const</span> QGraphicsItem *item)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QPainterPath <span class="title">opaqueArea</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> &#123; Type = <span class="number">10</span> &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">type</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QGraphicsItemGroup)</span><br><span class="line">    Q_DECLARE_PRIVATE(QGraphicsItemGroup)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">qgraphicsitem_cast</span>(<span class="title">QGraphicsItem</span> *<span class="title">item</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type Item;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(Item::Type) == <span class="keyword">int</span>(QGraphicsItem::Type)</span><br><span class="line">        || (item &amp;&amp; <span class="keyword">int</span>(Item::Type) == item-&gt;type()) ? <span class="keyword">static_cast</span>&lt;T&gt;(item) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">inline</span> <span class="title">T</span> <span class="title">qgraphicsitem_cast</span>(<span class="title">const</span> <span class="title">QGraphicsItem</span> *<span class="title">item</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">typename</span> <span class="built_in">std</span>::remove_cv&lt;<span class="keyword">typename</span> <span class="built_in">std</span>::remove_pointer&lt;T&gt;::type&gt;::type Item;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">int</span>(Item::Type) == <span class="keyword">int</span>(QGraphicsItem::Type)</span><br><span class="line">        || (item &amp;&amp; <span class="keyword">int</span>(Item::Type) == item-&gt;type()) ? <span class="keyword">static_cast</span>&lt;T&gt;(item) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_DEBUG_STREAM</span></span><br><span class="line">Q_WIDGETS_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug debug, QGraphicsItem *item);</span><br><span class="line">Q_WIDGETS_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug debug, QGraphicsObject *item);</span><br><span class="line">Q_WIDGETS_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug debug, QGraphicsItem::GraphicsItemChange change);</span><br><span class="line">Q_WIDGETS_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug debug, QGraphicsItem::GraphicsItemFlag flag);</span><br><span class="line">Q_WIDGETS_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug debug, QGraphicsItem::GraphicsItemFlags flags);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(QGraphicsItem *)</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QGRAPHICSITEM_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2图形视图</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtGraphics" scheme="http://bugnull.com/tags/QtGraphics/"/>
    
  </entry>
  
  <entry>
    <title>QAbstractitemView</title>
    <link href="http://bugnull.com/QT/qabstractitemview/"/>
    <id>http://bugnull.com/QT/qabstractitemview/</id>
    <published>2022-11-06T15:27:55.169Z</published>
    <updated>2022-09-15T16:22:31.419Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QAbstractItemView"><a href="#QAbstractItemView" class="headerlink" title="QAbstractItemView"></a>QAbstractItemView</h3><p>给view提供基础方法的抽象类，可通过信号与槽和model进行交互</p><blockquote><p>Header:  #include <qabstractitemview><br>qmake: QT += widgets Inherits: QAbstractScrollArea Inherited By: QColumnView, QHeaderView, QListView, QTableView, and QTreeView</qabstractitemview></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QABSTRACTITEMVIEW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QABSTRACTITEMVIEW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qtwidgetsglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qabstractscrollarea.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qabstractitemmodel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qitemselectionmodel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qabstractitemdelegate.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tst_QAbstractItemView</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">tst_QTreeView</span>;</span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(itemviews);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMenu</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QDrag</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemViewPrivate</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QAbstractItemView</span> :</span> <span class="keyword">public</span> QAbstractScrollArea</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> autoScroll READ hasAutoScroll WRITE setAutoScroll)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">int</span> autoScrollMargin READ autoScrollMargin WRITE setAutoScrollMargin)</span><br><span class="line">    Q_PROPERTY(EditTriggers editTriggers READ editTriggers WRITE setEditTriggers)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> tabKeyNavigation READ tabKeyNavigation WRITE setTabKeyNavigation)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop) </span></span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> showDropIndicator READ showDropIndicator WRITE setDropIndicatorShown)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> dragEnabled READ dragEnabled WRITE setDragEnabled)</span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> dragDropOverwriteMode READ dragDropOverwriteMode WRITE setDragDropOverwriteMode)</span><br><span class="line">    Q_PROPERTY(DragDropMode dragDropMode READ dragDropMode WRITE setDragDropMode)</span><br><span class="line">    Q_PROPERTY(Qt::DropAction defaultDropAction READ defaultDropAction WRITE setDefaultDropAction)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    Q_PROPERTY(<span class="keyword">bool</span> alternatingRowColors READ alternatingRowColors WRITE setAlternatingRowColors)</span><br><span class="line">    Q_PROPERTY(SelectionMode selectionMode READ selectionMode WRITE setSelectionMode)</span><br><span class="line">    Q_PROPERTY(SelectionBehavior selectionBehavior READ selectionBehavior WRITE setSelectionBehavior)</span><br><span class="line">    Q_PROPERTY(QSize iconSize READ iconSize WRITE setIconSize NOTIFY iconSizeChanged)</span><br><span class="line">    Q_PROPERTY(Qt::TextElideMode textElideMode READ textElideMode WRITE setTextElideMode)</span><br><span class="line">    Q_PROPERTY(ScrollMode verticalScrollMode READ verticalScrollMode WRITE setVerticalScrollMode RESET resetVerticalScrollMode)</span><br><span class="line">    Q_PROPERTY(ScrollMode horizontalScrollMode READ horizontalScrollMode WRITE setHorizontalScrollMode RESET resetHorizontalScrollMode)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">enum</span> SelectionMode &#123; </span><br><span class="line">        NoSelection,</span><br><span class="line">        SingleSelection,</span><br><span class="line">        MultiSelection,</span><br><span class="line">        ExtendedSelection,</span><br><span class="line">        ContiguousSelection</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(SelectionMode)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> SelectionBehavior &#123;</span><br><span class="line">        SelectItems,</span><br><span class="line">        SelectRows,</span><br><span class="line">        SelectColumns</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(SelectionBehavior)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> ScrollHint &#123;</span><br><span class="line">        EnsureVisible,</span><br><span class="line">        PositionAtTop,</span><br><span class="line">        PositionAtBottom,</span><br><span class="line">        PositionAtCenter</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(ScrollHint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> EditTrigger &#123;</span><br><span class="line">        NoEditTriggers = <span class="number">0</span>,</span><br><span class="line">        CurrentChanged = <span class="number">1</span>,</span><br><span class="line">        DoubleClicked = <span class="number">2</span>,</span><br><span class="line">        SelectedClicked = <span class="number">4</span>,</span><br><span class="line">        EditKeyPressed = <span class="number">8</span>,</span><br><span class="line">        AnyKeyPressed = <span class="number">16</span>,</span><br><span class="line">        AllEditTriggers = <span class="number">31</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    Q_DECLARE_FLAGS(EditTriggers, EditTrigger)</span><br><span class="line">    Q_FLAG(EditTriggers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> ScrollMode &#123;</span><br><span class="line">        ScrollPerItem,</span><br><span class="line">        ScrollPerPixel</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(ScrollMode)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractItemView</span><span class="params">(QWidget *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QAbstractItemView();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setModel</span><span class="params">(QAbstractItemModel *model)</span></span>;</span><br><span class="line">    <span class="function">QAbstractItemModel *<span class="title">model</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setSelectionModel</span><span class="params">(QItemSelectionModel *selectionModel)</span></span>;</span><br><span class="line">    <span class="function">QItemSelectionModel *<span class="title">selectionModel</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setItemDelegate</span><span class="params">(QAbstractItemDelegate *delegate)</span></span>;</span><br><span class="line">    <span class="function">QAbstractItemDelegate *<span class="title">itemDelegate</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelectionMode</span><span class="params">(QAbstractItemView::SelectionMode mode)</span></span>;</span><br><span class="line">    QAbstractItemView::<span class="function">SelectionMode <span class="title">selectionMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSelectionBehavior</span><span class="params">(QAbstractItemView::SelectionBehavior behavior)</span></span>;</span><br><span class="line">    QAbstractItemView::<span class="function">SelectionBehavior <span class="title">selectionBehavior</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QModelIndex <span class="title">currentIndex</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QModelIndex <span class="title">rootIndex</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setEditTriggers</span><span class="params">(EditTriggers triggers)</span></span>;</span><br><span class="line">    <span class="function">EditTriggers <span class="title">editTriggers</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVerticalScrollMode</span><span class="params">(ScrollMode mode)</span></span>;</span><br><span class="line">    <span class="function">ScrollMode <span class="title">verticalScrollMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetVerticalScrollMode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHorizontalScrollMode</span><span class="params">(ScrollMode mode)</span></span>;</span><br><span class="line">    <span class="function">ScrollMode <span class="title">horizontalScrollMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetHorizontalScrollMode</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAutoScroll</span><span class="params">(<span class="keyword">bool</span> enable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasAutoScroll</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAutoScrollMargin</span><span class="params">(<span class="keyword">int</span> margin)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">autoScrollMargin</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTabKeyNavigation</span><span class="params">(<span class="keyword">bool</span> enable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">tabKeyNavigation</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDropIndicatorShown</span><span class="params">(<span class="keyword">bool</span> enable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">showDropIndicator</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDragEnabled</span><span class="params">(<span class="keyword">bool</span> enable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dragEnabled</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDragDropOverwriteMode</span><span class="params">(<span class="keyword">bool</span> overwrite)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dragDropOverwriteMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> DragDropMode &#123;</span><br><span class="line">        NoDragDrop,</span><br><span class="line">        DragOnly,</span><br><span class="line">        DropOnly,</span><br><span class="line">        DragDrop,</span><br><span class="line">        InternalMove</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(DragDropMode)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDragDropMode</span><span class="params">(DragDropMode behavior)</span></span>;</span><br><span class="line">    <span class="function">DragDropMode <span class="title">dragDropMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDefaultDropAction</span><span class="params">(Qt::DropAction dropAction)</span></span>;</span><br><span class="line">    Qt::<span class="function">DropAction <span class="title">defaultDropAction</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAlternatingRowColors</span><span class="params">(<span class="keyword">bool</span> enable)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">alternatingRowColors</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setIconSize</span><span class="params">(<span class="keyword">const</span> QSize &amp;size)</span></span>;</span><br><span class="line">    <span class="function">QSize <span class="title">iconSize</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextElideMode</span><span class="params">(Qt::TextElideMode mode)</span></span>;</span><br><span class="line">    Qt::<span class="function">TextElideMode <span class="title">textElideMode</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">keyboardSearch</span><span class="params">(<span class="keyword">const</span> QString &amp;search)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QRect <span class="title">visualRect</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">scrollTo</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, ScrollHint hint = EnsureVisible)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QModelIndex <span class="title">indexAt</span><span class="params">(<span class="keyword">const</span> QPoint &amp;point)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QSize <span class="title">sizeHintForIndex</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">sizeHintForRow</span><span class="params">(<span class="keyword">int</span> row)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">sizeHintForColumn</span><span class="params">(<span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">openPersistentEditor</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closePersistentEditor</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPersistentEditorOpen</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setIndexWidget</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, QWidget *widget)</span></span>;</span><br><span class="line">    <span class="function">QWidget *<span class="title">indexWidget</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setItemDelegateForRow</span><span class="params">(<span class="keyword">int</span> row, QAbstractItemDelegate *delegate)</span></span>;</span><br><span class="line">    <span class="function">QAbstractItemDelegate *<span class="title">itemDelegateForRow</span><span class="params">(<span class="keyword">int</span> row)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setItemDelegateForColumn</span><span class="params">(<span class="keyword">int</span> column, QAbstractItemDelegate *delegate)</span></span>;</span><br><span class="line">    <span class="function">QAbstractItemDelegate *<span class="title">itemDelegateForColumn</span><span class="params">(<span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">QAbstractItemDelegate *<span class="title">itemDelegate</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QVariant <span class="title">inputMethodQuery</span><span class="params">(Qt::InputMethodQuery query)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> QAbstractScrollArea::update;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setRootIndex</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">doItemsLayout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">selectAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearSelection</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCurrentIndex</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scrollToTop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scrollToBottom</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;topLeft, <span class="keyword">const</span> QModelIndex &amp;bottomRight, <span class="keyword">const</span> QVector&lt;<span class="keyword">int</span>&gt; &amp;roles = QVector&lt;<span class="keyword">int</span>&gt;())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">rowsInserted</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">rowsAboutToBeRemoved</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">selectionChanged</span><span class="params">(<span class="keyword">const</span> QItemSelection &amp;selected, <span class="keyword">const</span> QItemSelection &amp;deselected)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">currentChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;current, <span class="keyword">const</span> QModelIndex &amp;previous)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">updateEditorData</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">updateEditorGeometries</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">updateGeometries</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">verticalScrollbarAction</span><span class="params">(<span class="keyword">int</span> action)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">horizontalScrollbarAction</span><span class="params">(<span class="keyword">int</span> action)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">verticalScrollbarValueChanged</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">horizontalScrollbarValueChanged</span><span class="params">(<span class="keyword">int</span> value)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">closeEditor</span><span class="params">(QWidget *editor, QAbstractItemDelegate::EndEditHint hint)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">commitData</span><span class="params">(QWidget *editor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">editorDestroyed</span><span class="params">(QObject *editor)</span></span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pressed</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clicked</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doubleClicked</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">activated</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">entered</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">viewportEntered</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">iconSizeChanged</span><span class="params">(<span class="keyword">const</span> QSize &amp;size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractItemView(QAbstractItemViewPrivate &amp;, QWidget *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">setHorizontalStepsPerItem</span><span class="params">(<span class="keyword">int</span> steps)</span></span>;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">int</span> <span class="title">horizontalStepsPerItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">setVerticalStepsPerItem</span><span class="params">(<span class="keyword">int</span> steps)</span></span>;</span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">int</span> <span class="title">verticalStepsPerItem</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> CursorAction &#123; MoveUp, MoveDown, MoveLeft, MoveRight,</span><br><span class="line">                        MoveHome, MoveEnd, MovePageUp, MovePageDown,</span><br><span class="line">                        MoveNext, MovePrevious &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QModelIndex <span class="title">moveCursor</span><span class="params">(CursorAction cursorAction,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   Qt::KeyboardModifiers modifiers)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">horizontalOffset</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">verticalOffset</span><span class="params">()</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">isIndexHidden</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setSelection</span><span class="params">(<span class="keyword">const</span> QRect &amp;rect, QItemSelectionModel::SelectionFlags command)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QRegion <span class="title">visualRegionForSelection</span><span class="params">(<span class="keyword">const</span> QItemSelection &amp;selection)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QModelIndexList <span class="title">selectedIndexes</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">edit</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, EditTrigger trigger, QEvent *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> QItemSelectionModel::<span class="function">SelectionFlags <span class="title">selectionCommand</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                 <span class="keyword">const</span> QEvent *event = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop)</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">startDrag</span><span class="params">(Qt::DropActions supportedActions)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QStyleOptionViewItem <span class="title">viewOptions</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> State &#123;</span><br><span class="line">        NoState,</span><br><span class="line">        DraggingState,</span><br><span class="line">        DragSelectingState,</span><br><span class="line">        EditingState,</span><br><span class="line">        ExpandingState,</span><br><span class="line">        CollapsingState,</span><br><span class="line">        AnimatingState</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function">State <span class="title">state</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setState</span><span class="params">(State state)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scheduleDelayedItemsLayout</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">executeDelayedItemsLayout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDirtyRegion</span><span class="params">(<span class="keyword">const</span> QRegion &amp;region)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scrollDirtyRegion</span><span class="params">(<span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span></span>;</span><br><span class="line">    <span class="function">QPoint <span class="title">dirtyRegionOffset</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startAutoScroll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stopAutoScroll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doAutoScroll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">focusNextPrevChild</span><span class="params">(<span class="keyword">bool</span> next)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">event</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">viewportEvent</span><span class="params">(QEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mousePressEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseMoveEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseReleaseEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mouseDoubleClickEvent</span><span class="params">(QMouseEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragEnterEvent</span><span class="params">(QDragEnterEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragMoveEvent</span><span class="params">(QDragMoveEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dragLeaveEvent</span><span class="params">(QDragLeaveEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dropEvent</span><span class="params">(QDropEvent *event)</span> override</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusInEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">focusOutEvent</span><span class="params">(QFocusEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">keyPressEvent</span><span class="params">(QKeyEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timerEvent</span><span class="params">(QTimerEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inputMethodEvent</span><span class="params">(QInputMethodEvent *event)</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">eventFilter</span><span class="params">(QObject *object, QEvent *event)</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(draganddrop)</span></span><br><span class="line">    <span class="keyword">enum</span> DropIndicatorPosition &#123; OnItem, AboveItem, BelowItem, OnViewport &#125;;</span><br><span class="line">    <span class="function">DropIndicatorPosition <span class="title">dropIndicatorPosition</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function">QSize <span class="title">viewportSizeHint</span><span class="params">()</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DECLARE_PRIVATE(QAbstractItemView)</span><br><span class="line">    Q_DISABLE_COPY(QAbstractItemView)</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_columnsAboutToBeRemoved(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_columnsRemoved(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_columnsInserted(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_rowsInserted(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_rowsRemoved(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_columnsMoved(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_rowsMoved(<span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">const</span> QModelIndex&amp;, <span class="keyword">int</span>))</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_modelDestroyed())</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_layoutChanged())</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_headerDataChanged())</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_CONFIG(gestures) &amp;&amp; QT_CONFIG(scroller)</span></span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_scrollerStateChanged())</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> :</span>:tst_QAbstractItemView;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> :</span>:tst_QTreeView;</span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QTreeViewPrivate</span>;</span> <span class="comment">// needed to compile with MSVC</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QListModeViewBase</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QListViewPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QAbstractSlider</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QAbstractItemView::EditTriggers)</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QABSTRACTITEMVIEW_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2模型视图与委托</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtMVD" scheme="http://bugnull.com/tags/QtMVD/"/>
    
  </entry>
  
  <entry>
    <title>QAbstractItemDelegate</title>
    <link href="http://bugnull.com/QT/qabstractitemdelegate/"/>
    <id>http://bugnull.com/QT/qabstractitemdelegate/</id>
    <published>2022-11-06T15:27:55.150Z</published>
    <updated>2022-09-15T16:24:24.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QAbstractItemDelegate"><a href="#QAbstractItemDelegate" class="headerlink" title="QAbstractItemDelegate"></a>QAbstractItemDelegate</h3><blockquote><p>Header:  #include <qabstractitemdelegate><br>qmake: QT += widgets Inherits: QObject Inherited By: QItemDelegate and QStyledItemDelegate</qabstractitemdelegate></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QABSTRACTITEMDELEGATE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QABSTRACTITEMDELEGATE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qtwidgetsglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtWidgets/qstyleoption.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(itemviews);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPainter</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QModelIndex</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemModel</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemView</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QHelpEvent</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemDelegatePrivate</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_WIDGETS_EXPORT</span> <span class="title">QAbstractItemDelegate</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> EndEditHint &#123;</span><br><span class="line">        NoHint,</span><br><span class="line">        EditNextItem,</span><br><span class="line">        EditPreviousItem,</span><br><span class="line">        SubmitModelCache,</span><br><span class="line">        RevertModelCache</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractItemDelegate</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QAbstractItemDelegate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// painting</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(QPainter *painter,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QSize <span class="title">sizeHint</span><span class="params">(<span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// editing</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QWidget *<span class="title">createEditor</span><span class="params">(QWidget *parent,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">destroyEditor</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setEditorData</span><span class="params">(QWidget *editor, <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setModelData</span><span class="params">(QWidget *editor,</span></span></span><br><span class="line"><span class="function"><span class="params">                              QAbstractItemModel *model,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">updateEditorGeometry</span><span class="params">(QWidget *editor,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                                      <span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for non-widget editors</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">editorEvent</span><span class="params">(QEvent *event,</span></span></span><br><span class="line"><span class="function"><span class="params">                             QAbstractItemModel *model,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 13)</span></span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use QFontMetrics::elidedText() instead"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">static</span> QString <span class="title">elidedText</span><span class="params">(<span class="keyword">const</span> QFontMetrics &amp;fontMetrics, <span class="keyword">int</span> width,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Qt::TextElideMode mode, <span class="keyword">const</span> QString &amp;text)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">helpEvent</span><span class="params">(QHelpEvent *event,</span></span></span><br><span class="line"><span class="function"><span class="params">                           QAbstractItemView *view,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QStyleOptionViewItem &amp;option,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> QVector&lt;<span class="keyword">int</span>&gt; paintingRoles() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commitData</span><span class="params">(QWidget *editor)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">closeEditor</span><span class="params">(QWidget *editor, QAbstractItemDelegate::EndEditHint hint = NoHint)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sizeHintChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractItemDelegate(QObjectPrivate &amp;, QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DECLARE_PRIVATE(QAbstractItemDelegate)</span><br><span class="line">    Q_DISABLE_COPY(QAbstractItemDelegate)</span><br><span class="line">    Q_PRIVATE_SLOT(d_func(), <span class="keyword">void</span> _q_commitDataAndCloseEditor(QWidget*))</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QABSTRACTITEMDELEGATE_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2模型视图与委托</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtMVD" scheme="http://bugnull.com/tags/QtMVD/"/>
    
  </entry>
  
  <entry>
    <title>QAbstractItemModel</title>
    <link href="http://bugnull.com/QT/qabstractitemmodel/"/>
    <id>http://bugnull.com/QT/qabstractitemmodel/</id>
    <published>2022-11-06T15:27:55.150Z</published>
    <updated>2022-09-15T16:28:11.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QAbstractItemModel"><a href="#QAbstractItemModel" class="headerlink" title="QAbstractItemModel"></a>QAbstractItemModel</h3><blockquote><p>Header:  #include <qabstractitemmodel><br>qmake: QT += core Inherits: QObject Inherited By: QAbstractListModel, QAbstractProxyModel, QAbstractTableModel, QConcatenateTablesProxyModel, QDirModel, QFileSystemModel, and QStandardItemModel</qabstractitemmodel></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QABSTRACTITEMMODEL_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> QABSTRACTITEMMODEL_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qvariant.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qobject.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qhash.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qvector.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">QT_REQUIRE_CONFIG(itemmodel);</span><br><span class="line"></span><br><span class="line">QT_BEGIN_NAMESPACE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemModel</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPersistentModelIndex</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QModelIndex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemModel</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Q_DECL_CONSTEXPR inline QModelIndex() noexcept : r(-1), c(-1), i(0), m(nullptr) &#123;&#125;</span><br><span class="line">    <span class="comment">// compiler-generated copy/move ctors/assignment operators are fine!</span></span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">row</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> r; &#125;</span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">column</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> c; &#125;</span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> quintptr <span class="title">internalId</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> i; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> *<span class="title">internalPointer</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(i); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">parent</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">sibling</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">siblingAtColumn</span><span class="params">(<span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">siblingAtRow</span><span class="params">(<span class="keyword">int</span> row)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 8)</span></span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use QAbstractItemModel::index"</span>) <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">child</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QVariant <span class="title">data</span><span class="params">(<span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="keyword">inline</span> Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">const</span> QAbstractItemModel *<span class="title">model</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> m; &#125;</span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">isValid</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> (r &gt;= <span class="number">0</span>) &amp;&amp; (c &gt;= <span class="number">0</span>) &amp;&amp; (m != <span class="literal">nullptr</span>); &#125;</span><br><span class="line">    Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> QModelIndex &amp;other) <span class="keyword">const</span> <span class="keyword">noexcept</span></span><br><span class="line">        &#123; <span class="keyword">return</span> (other.r == r) &amp;&amp; (other.i == i) &amp;&amp; (other.c == c) &amp;&amp; (other.m == m); &#125;</span><br><span class="line">    Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> QModelIndex &amp;other) <span class="keyword">const</span> <span class="keyword">noexcept</span></span><br><span class="line">        &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == other); &#125;</span><br><span class="line">    Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> QModelIndex &amp;other) <span class="keyword">const</span> <span class="keyword">noexcept</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>  r &lt;  other.r</span><br><span class="line">                || (r == other.r &amp;&amp; (c &lt;  other.c</span><br><span class="line">                                 || (c == other.c &amp;&amp; (i &lt;  other.i</span><br><span class="line">                                                  || (i == other.i &amp;&amp; <span class="built_in">std</span>::less&lt;<span class="keyword">const</span> QAbstractItemModel *&gt;()(m, other.m))))));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">QModelIndex</span><span class="params">(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn, <span class="keyword">void</span> *ptr, <span class="keyword">const</span> QAbstractItemModel *amodel)</span> <span class="keyword">noexcept</span></span></span><br><span class="line">        : r(arow), c(acolumn), i(reinterpret_cast&lt;quintptr&gt;(ptr)), m(amodel) &#123;&#125;</span><br><span class="line">    <span class="function">Q_DECL_CONSTEXPR <span class="keyword">inline</span> <span class="title">QModelIndex</span><span class="params">(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn, quintptr id, <span class="keyword">const</span> QAbstractItemModel *amodel)</span> <span class="keyword">noexcept</span></span></span><br><span class="line">        : r(arow), c(acolumn), i(id), m(amodel) &#123;&#125;</span><br><span class="line">    <span class="keyword">int</span> r, c;</span><br><span class="line">    quintptr i;</span><br><span class="line">    <span class="keyword">const</span> QAbstractItemModel *m;</span><br><span class="line">&#125;;</span><br><span class="line">Q_DECLARE_TYPEINFO(QModelIndex, Q_MOVABLE_TYPE);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_DEBUG_STREAM</span></span><br><span class="line">Q_CORE_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug, <span class="keyword">const</span> QModelIndex &amp;);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QPersistentModelIndexData</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// qHash is a friend, but we can't use default arguments for friends (§8.3.6.4)</span></span><br><span class="line"><span class="function">uint <span class="title">qHash</span><span class="params">(<span class="keyword">const</span> QPersistentModelIndex &amp;index, uint seed = <span class="number">0</span>)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QPersistentModelIndex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    QPersistentModelIndex();</span><br><span class="line">    QPersistentModelIndex(<span class="keyword">const</span> QModelIndex &amp;index);</span><br><span class="line">    QPersistentModelIndex(<span class="keyword">const</span> QPersistentModelIndex &amp;other);</span><br><span class="line">    ~QPersistentModelIndex();</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> QPersistentModelIndex &amp;other) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> QPersistentModelIndex &amp;other) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> QPersistentModelIndex &amp;other) <span class="keyword">const</span></span><br><span class="line">    &#123; <span class="keyword">return</span> !<span class="keyword">operator</span>==(other); &#125;</span><br><span class="line">    QPersistentModelIndex &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> QPersistentModelIndex &amp;other);</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="title">QPersistentModelIndex</span><span class="params">(QPersistentModelIndex &amp;&amp;other)</span> <span class="keyword">noexcept</span></span></span><br><span class="line">        : d(other.d) &#123; other.d = nullptr; &#125;</span><br><span class="line">    <span class="keyword">inline</span> QPersistentModelIndex &amp;<span class="keyword">operator</span>=(QPersistentModelIndex &amp;&amp;other) <span class="keyword">noexcept</span></span><br><span class="line">    &#123; qSwap(d, other.d); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(QPersistentModelIndex &amp;other)</span> <span class="keyword">noexcept</span> </span>&#123; qSwap(d, other.d); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> QModelIndex &amp;other) <span class="keyword">const</span>;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(<span class="keyword">const</span> QModelIndex &amp;other) <span class="keyword">const</span>;</span><br><span class="line">    QPersistentModelIndex &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> QModelIndex &amp;other);</span><br><span class="line">    <span class="keyword">operator</span> <span class="keyword">const</span> QModelIndex&amp;() <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">row</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">column</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> *<span class="title">internalPointer</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">quintptr <span class="title">internalId</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QModelIndex <span class="title">parent</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">QModelIndex <span class="title">sibling</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 8)</span></span><br><span class="line">    QT_DEPRECATED_X(<span class="string">"Use QAbstractItemModel::index"</span>) <span class="function">QModelIndex <span class="title">child</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function">QVariant <span class="title">data</span><span class="params">(<span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> QAbstractItemModel *<span class="title">model</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValid</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    QPersistentModelIndexData *d;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> uint <span class="title">qHash</span><span class="params">(<span class="keyword">const</span> QPersistentModelIndex &amp;, uint seed)</span> <span class="keyword">noexcept</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_DEBUG_STREAM</span></span><br><span class="line">    <span class="keyword">friend</span> Q_CORE_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug, <span class="keyword">const</span> QPersistentModelIndex &amp;);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line">Q_DECLARE_SHARED(QPersistentModelIndex)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> uint <span class="title">qHash</span><span class="params">(<span class="keyword">const</span> QPersistentModelIndex &amp;index, uint seed)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> qHash(index.d, seed); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> QT_NO_DEBUG_STREAM</span></span><br><span class="line">Q_CORE_EXPORT QDebug <span class="keyword">operator</span>&lt;&lt;(QDebug, <span class="keyword">const</span> QPersistentModelIndex &amp;);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">QList</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> QList&lt;QModelIndex&gt; QModelIndexList;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QMimeData</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemModelPrivate</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QTransposeProxyModelPrivate</span>;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">Key</span>, <span class="title">class</span> <span class="title">T</span>&gt; <span class="title">class</span> <span class="title">QMap</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QAbstractItemModel</span> :</span> <span class="keyword">public</span> QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QPersistentModelIndexData</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QAbstractItemViewPrivate</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QIdentityProxyModel</span>;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">QTransposeProxyModelPrivate</span>;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractItemModel</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~QAbstractItemModel();</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">bool</span> <span class="title">hasIndex</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QModelIndex <span class="title">index</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QModelIndex <span class="title">parent</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;child)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QModelIndex <span class="title">sibling</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;idx)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">rowCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">columnCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">hasChildren</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QVariant <span class="title">data</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">setData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> role = Qt::EditRole)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QVariant <span class="title">headerData</span><span class="params">(<span class="keyword">int</span> section, Qt::Orientation orientation,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> role = Qt::DisplayRole)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">setHeaderData</span><span class="params">(<span class="keyword">int</span> section, Qt::Orientation orientation, <span class="keyword">const</span> QVariant &amp;value,</span></span></span><br><span class="line"><span class="function"><span class="params">                               <span class="keyword">int</span> role = Qt::EditRole)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> QMap&lt;<span class="keyword">int</span>, QVariant&gt; itemData(<span class="keyword">const</span> QModelIndex &amp;index) <span class="keyword">const</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">setItemData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, <span class="keyword">const</span> QMap&lt;<span class="keyword">int</span>, QVariant&gt; &amp;roles)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">clearItemData</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QStringList <span class="title">mimeTypes</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QMimeData *<span class="title">mimeData</span><span class="params">(<span class="keyword">const</span> QModelIndexList &amp;indexes)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">canDropMimeData</span><span class="params">(<span class="keyword">const</span> QMimeData *data, Qt::DropAction action,</span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">dropMimeData</span><span class="params">(<span class="keyword">const</span> QMimeData *data, Qt::DropAction action,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent)</span></span>;</span><br><span class="line">    <span class="keyword">virtual</span> Qt::<span class="function">DropActions <span class="title">supportedDropActions</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> Qt::<span class="function">DropActions <span class="title">supportedDragActions</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">setSupportedDragActions</span><span class="params">(Qt::DropActions actions)</span></span></span><br><span class="line"><span class="function">    </span>&#123; doSetSupportedDragActions(actions); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">insertRows</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">insertColumns</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">removeRows</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">removeColumns</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">int</span> count, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">moveRows</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceRow, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">moveColumns</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceColumn, <span class="keyword">int</span> count,</span></span></span><br><span class="line"><span class="function"><span class="params">                             <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">insertRow</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">insertColumn</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">removeRow</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">removeColumn</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">moveRow</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceRow,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">moveColumn</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceColumn,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fetchMore</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">canFetchMore</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    Q_INVOKABLE <span class="keyword">virtual</span> Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> column, Qt::SortOrder order = Qt::AscendingOrder)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QModelIndex <span class="title">buddy</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">Q_INVOKABLE <span class="keyword">virtual</span> QModelIndexList <span class="title">match</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;start, <span class="keyword">int</span> role,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              <span class="keyword">const</span> QVariant &amp;value, <span class="keyword">int</span> hits = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Qt::MatchFlags flags =</span></span></span><br><span class="line"><span class="function"><span class="params">                                              Qt::MatchFlags(Qt::MatchStartsWith|Qt::MatchWrap))</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> QSize <span class="title">span</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> QHash&lt;<span class="keyword">int</span>,QByteArray&gt; roleNames() <span class="keyword">const</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> QObject::parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> LayoutChangeHint</span><br><span class="line">    &#123;</span><br><span class="line">        NoLayoutChangeHint,</span><br><span class="line">        VerticalSortHint,</span><br><span class="line">        HorizontalSortHint</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(LayoutChangeHint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">CheckIndexOption</span> &#123;</span></span><br><span class="line">        NoOption         = <span class="number">0x0000</span>,</span><br><span class="line">        IndexIsValid     = <span class="number">0x0001</span>,</span><br><span class="line">        DoNotUseParent   = <span class="number">0x0002</span>,</span><br><span class="line">        ParentIsInvalid  = <span class="number">0x0004</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    Q_ENUM(CheckIndexOption)</span><br><span class="line">    Q_DECLARE_FLAGS(CheckIndexOptions, CheckIndexOption)</span><br><span class="line"></span><br><span class="line">    <span class="function">Q_REQUIRED_RESULT <span class="keyword">bool</span> <span class="title">checkIndex</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index, CheckIndexOptions options = CheckIndexOption::NoOption)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">Q_SIGNALS:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;topLeft, <span class="keyword">const</span> QModelIndex &amp;bottomRight, <span class="keyword">const</span> QVector&lt;<span class="keyword">int</span>&gt; &amp;roles = QVector&lt;<span class="keyword">int</span>&gt;())</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">headerDataChanged</span><span class="params">(Qt::Orientation orientation, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layoutChanged</span><span class="params">(<span class="keyword">const</span> QList&lt;QPersistentModelIndex&gt; &amp;parents = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint hint = QAbstractItemModel::NoLayoutChangeHint)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">layoutAboutToBeChanged</span><span class="params">(<span class="keyword">const</span> QList&lt;QPersistentModelIndex&gt; &amp;parents = QList&lt;QPersistentModelIndex&gt;(), QAbstractItemModel::LayoutChangeHint hint = QAbstractItemModel::NoLayoutChangeHint)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsAboutToBeInserted</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsInserted</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsAboutToBeRemoved</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsRemoved</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsAboutToBeInserted</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsInserted</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsAboutToBeRemoved</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsRemoved</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modelAboutToBeReset</span><span class="params">(QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modelReset</span><span class="params">(QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsAboutToBeMoved</span><span class="params">( <span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceStart, <span class="keyword">int</span> sourceEnd, <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationRow, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rowsMoved</span><span class="params">( <span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">const</span> QModelIndex &amp;destination, <span class="keyword">int</span> row, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsAboutToBeMoved</span><span class="params">( <span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceStart, <span class="keyword">int</span> sourceEnd, <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationColumn, QPrivateSignal)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">columnsMoved</span><span class="params">( <span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">const</span> QModelIndex &amp;destination, <span class="keyword">int</span> column, QPrivateSignal)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Q_SLOTS:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">submit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">revert</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Q_SLOTS:</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_VERSION &gt;= QT_VERSION_CHECK(6, 0, 0)</span></span><br><span class="line">    <span class="keyword">virtual</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resetInternalData</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractItemModel(QAbstractItemModelPrivate &amp;dd, QObject *parent = <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">createIndex</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">void</span> *data = <span class="literal">nullptr</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> QModelIndex <span class="title">createIndex</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, quintptr id)</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">encodeData</span><span class="params">(<span class="keyword">const</span> QModelIndexList &amp;indexes, QDataStream &amp;stream)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">decodeData</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent, QDataStream &amp;stream)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginInsertRows</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endInsertRows</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginRemoveRows</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endRemoveRows</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">beginMoveRows</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceFirst, <span class="keyword">int</span> sourceLast, <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationRow)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endMoveRows</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginInsertColumns</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endInsertColumns</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginRemoveColumns</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent, <span class="keyword">int</span> first, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endRemoveColumns</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">beginMoveColumns</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceFirst, <span class="keyword">int</span> sourceLast, <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationColumn)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endMoveColumns</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5,0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        beginResetModel();</span><br><span class="line">        endResetModel();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beginResetModel</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">endResetModel</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePersistentIndex</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;from, <span class="keyword">const</span> QModelIndex &amp;to)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePersistentIndexList</span><span class="params">(<span class="keyword">const</span> QModelIndexList &amp;from, <span class="keyword">const</span> QModelIndexList &amp;to)</span></span>;</span><br><span class="line">    <span class="function">QModelIndexList <span class="title">persistentIndexList</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5,0)</span></span><br><span class="line">    <span class="function">QT_DEPRECATED <span class="keyword">void</span> <span class="title">setRoleNames</span><span class="params">(<span class="keyword">const</span> QHash&lt;<span class="keyword">int</span>,QByteArray&gt; &amp;theRoleNames)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        doSetRoleNames(theRoleNames);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSetRoleNames</span><span class="params">(<span class="keyword">const</span> QHash&lt;<span class="keyword">int</span>,QByteArray&gt; &amp;roleNames)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSetSupportedDragActions</span><span class="params">(Qt::DropActions actions)</span></span>;</span><br><span class="line"></span><br><span class="line">    Q_DECLARE_PRIVATE(QAbstractItemModel)</span><br><span class="line">    Q_DISABLE_COPY(QAbstractItemModel)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Q_DECLARE_OPERATORS_FOR_FLAGS(QAbstractItemModel::CheckIndexOptions)</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::insertRow(<span class="keyword">int</span> arow, <span class="keyword">const</span> QModelIndex &amp;aparent)</span><br><span class="line">&#123; <span class="keyword">return</span> insertRows(arow, <span class="number">1</span>, aparent); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::insertColumn(<span class="keyword">int</span> acolumn, <span class="keyword">const</span> QModelIndex &amp;aparent)</span><br><span class="line">&#123; <span class="keyword">return</span> insertColumns(acolumn, <span class="number">1</span>, aparent); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::removeRow(<span class="keyword">int</span> arow, <span class="keyword">const</span> QModelIndex &amp;aparent)</span><br><span class="line">&#123; <span class="keyword">return</span> removeRows(arow, <span class="number">1</span>, aparent); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::removeColumn(<span class="keyword">int</span> acolumn, <span class="keyword">const</span> QModelIndex &amp;aparent)</span><br><span class="line">&#123; <span class="keyword">return</span> removeColumns(acolumn, <span class="number">1</span>, aparent); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::moveRow(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceRow,</span><br><span class="line">                                        <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span><br><span class="line">&#123; <span class="keyword">return</span> moveRows(sourceParent, sourceRow, <span class="number">1</span>, destinationParent, destinationChild); &#125;</span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> QAbstractItemModel::moveColumn(<span class="keyword">const</span> QModelIndex &amp;sourceParent, <span class="keyword">int</span> sourceColumn,</span><br><span class="line">                                           <span class="keyword">const</span> QModelIndex &amp;destinationParent, <span class="keyword">int</span> destinationChild)</span><br><span class="line">&#123; <span class="keyword">return</span> moveColumns(sourceParent, sourceColumn, <span class="number">1</span>, destinationParent, destinationChild); &#125;</span><br><span class="line"><span class="keyword">inline</span> QModelIndex QAbstractItemModel::createIndex(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn, <span class="keyword">void</span> *adata) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> QModelIndex(arow, acolumn, adata, <span class="keyword">this</span>); &#125;</span><br><span class="line"><span class="keyword">inline</span> QModelIndex QAbstractItemModel::createIndex(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn, quintptr aid) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> QModelIndex(arow, acolumn, aid, <span class="keyword">this</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QAbstractTableModel</span> :</span> <span class="keyword">public</span> QAbstractItemModel</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractTableModel</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QAbstractTableModel();</span><br><span class="line"></span><br><span class="line">    <span class="function">QModelIndex <span class="title">index</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QModelIndex <span class="title">sibling</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;idx)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dropMimeData</span><span class="params">(<span class="keyword">const</span> QMimeData *data, Qt::DropAction action,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> QObject::parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractTableModel(QAbstractItemModelPrivate &amp;dd, QObject *parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QAbstractTableModel)</span><br><span class="line">    <span class="function">QModelIndex <span class="title">parent</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;child)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasChildren</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Q_CORE_EXPORT</span> <span class="title">QAbstractListModel</span> :</span> <span class="keyword">public</span> QAbstractItemModel</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">QAbstractListModel</span><span class="params">(QObject *parent = <span class="literal">nullptr</span>)</span></span>;</span><br><span class="line">    ~QAbstractListModel();</span><br><span class="line"></span><br><span class="line">    <span class="function">QModelIndex <span class="title">index</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column = <span class="number">0</span>, <span class="keyword">const</span> QModelIndex &amp;parent = QModelIndex())</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function">QModelIndex <span class="title">sibling</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;idx)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dropMimeData</span><span class="params">(<span class="keyword">const</span> QMimeData *data, Qt::DropAction action,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">int</span> row, <span class="keyword">int</span> column, <span class="keyword">const</span> QModelIndex &amp;parent)</span> override</span>;</span><br><span class="line"></span><br><span class="line">    Qt::<span class="function">ItemFlags <span class="title">flags</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> QObject::parent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    QAbstractListModel(QAbstractItemModelPrivate &amp;dd, QObject *parent);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Q_DISABLE_COPY(QAbstractListModel)</span><br><span class="line">    <span class="function">QModelIndex <span class="title">parent</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;child)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">columnCount</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">hasChildren</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;parent)</span> <span class="keyword">const</span> override</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// inline implementations</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QModelIndex QModelIndex::parent() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? m-&gt;parent(*<span class="keyword">this</span>) : QModelIndex(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QModelIndex QModelIndex::sibling(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? (r == arow &amp;&amp; c == acolumn) ? *<span class="keyword">this</span> : m-&gt;sibling(arow, acolumn, *<span class="keyword">this</span>) : QModelIndex(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QModelIndex QModelIndex::siblingAtColumn(<span class="keyword">int</span> acolumn) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? (c == acolumn) ? *<span class="keyword">this</span> : m-&gt;sibling(r, acolumn, *<span class="keyword">this</span>) : QModelIndex(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QModelIndex QModelIndex::siblingAtRow(<span class="keyword">int</span> arow) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? (r == arow) ? *<span class="keyword">this</span> : m-&gt;sibling(arow, c, *<span class="keyword">this</span>) : QModelIndex(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> QT_DEPRECATED_SINCE(5, 8)</span></span><br><span class="line"><span class="keyword">inline</span> QModelIndex QModelIndex::child(<span class="keyword">int</span> arow, <span class="keyword">int</span> acolumn) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? m-&gt;index(arow, acolumn, *<span class="keyword">this</span>) : QModelIndex(); &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> QVariant QModelIndex::data(<span class="keyword">int</span> arole) <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? m-&gt;data(*<span class="keyword">this</span>, arole) : QVariant(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> Qt::ItemFlags QModelIndex::flags() <span class="keyword">const</span></span><br><span class="line">&#123; <span class="keyword">return</span> m ? m-&gt;flags(*<span class="keyword">this</span>) : Qt::ItemFlags(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> uint <span class="title">qHash</span><span class="params">(<span class="keyword">const</span> QModelIndex &amp;index)</span> <span class="keyword">noexcept</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="keyword">return</span> uint((uint(index.row()) &lt;&lt; <span class="number">4</span>) + index.column() + index.internalId()); &#125;</span><br><span class="line"></span><br><span class="line">QT_END_NAMESPACE</span><br><span class="line"></span><br><span class="line">Q_DECLARE_METATYPE(QModelIndexList)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// QABSTRACTITEMMODEL_H</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Qt5.15.2模型视图与委托</summary>
    
    
    
    <category term="QT" scheme="http://bugnull.com/categories/QT/"/>
    
    
    <category term="QT基础" scheme="http://bugnull.com/tags/QT基础/"/>
    
    <category term="QtMVD" scheme="http://bugnull.com/tags/QtMVD/"/>
    
  </entry>
  
  <entry>
    <title>枚举名与字符串相互转换</title>
    <link href="http://bugnull.com/C/%E6%9E%9A%E4%B8%BE%E5%90%8D%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/"/>
    <id>http://bugnull.com/C/%E6%9E%9A%E4%B8%BE%E5%90%8D%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%BA%92%E8%BD%AC%E6%8D%A2/</id>
    <published>2022-11-06T15:27:55.103Z</published>
    <updated>2022-09-11T06:22:54.663Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.bilibili.com/video/BV1Ur4y1V7Kh?spm_id_from=333.999.0.0&amp;vd_source=3d0c7cbd0c95f2308054440260ab6f64" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Ur4y1V7Kh?spm_id_from=333.999.0.0&amp;vd_source=3d0c7cbd0c95f2308054440260ab6f64</a></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> scienum &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> details &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">T</span> <span class="title">N</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">const</span> <span class="title">char</span> *<span class="title">get_enum_name_static</span>() &#123;</span> <span class="comment">//关键 根据宏获取函数名字符串</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line">    <span class="keyword">return</span> __FUNCSIG__; <span class="comment">//return "void __cdecl get_enum_name_static&lt;int&gt;(void)"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> __PRETTY_FUNCTION__; <span class="comment">//return "void get_enum_name_static() [with T = int]"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">bool</span> Cond&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_enable_if</span> &#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">my_enable_if</span>&lt;true&gt; &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">void</span> type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> Beg, <span class="keyword">int</span> End, <span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt; //模板特化 用于结束循环</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">my_enable_if</span>&lt;Beg == End&gt;:</span>:<span class="function">type <span class="title">static_for</span><span class="params">(F <span class="keyword">const</span> &amp;func)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">int</span> Beg, <span class="keyword">int</span> End, <span class="class"><span class="keyword">class</span> <span class="title">F</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">typename</span> <span class="title">my_enable_if</span>&lt;Beg != End&gt;:</span>:<span class="function">type <span class="title">static_for</span><span class="params">(F <span class="keyword">const</span> &amp;func)</span> </span>&#123;</span><br><span class="line">    func.<span class="keyword">template</span> call&lt;Beg&gt;();</span><br><span class="line">    static_for&lt;Beg + <span class="number">1</span>, End&gt;(func);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">struct</span> <span class="title">get_enum_name_functor</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s;</span><br><span class="line"></span><br><span class="line">    get_enum_name_functor(<span class="keyword">int</span> n, <span class="built_in">std</span>::<span class="built_in">string</span> &amp;s) : n(n), s(s) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">int</span> I&gt;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == I) s = details::get_enum_name_static&lt;T, (T)I&gt;(); <span class="comment">//I需要编译期能确定的，这里不能通过call(int I)调用，虽然前面调用的Beg是编译期确定的值。</span></span><br><span class="line">        <span class="comment">//这里可以使用std::integral_constant&lt;Beg&gt; 其中里面有个value成员是constexpr的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">T</span> <span class="title">Beg</span>, <span class="title">T</span> <span class="title">End</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">std</span>:</span>:<span class="function"><span class="built_in">string</span> <span class="title">get_enum_name</span><span class="params">(T n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">    details::static_for&lt;Beg, End + <span class="number">1</span>&gt;(details::get_enum_name_functor&lt;T&gt;(n, s));</span><br><span class="line">    <span class="keyword">if</span> (s.empty())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER)<span class="comment">//下面是裁剪字符串了</span></span></span><br><span class="line">    <span class="keyword">size_t</span> pos = s.find(<span class="string">','</span>);</span><br><span class="line">    pos += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">size_t</span> pos2 = s.find(<span class="string">'&gt;'</span>, pos);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">size_t</span> pos = s.find(<span class="string">"N = "</span>);</span><br><span class="line">    pos += <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">size_t</span> pos2 = s.find_first_of(<span class="string">";]"</span>, pos);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    s = s.substr(pos, pos2 - pos);</span><br><span class="line">    <span class="keyword">size_t</span> pos3 = s.find(<span class="string">"::"</span>);</span><br><span class="line">    <span class="keyword">if</span> (pos3 != s.npos)</span><br><span class="line">        s = s.substr(pos3 + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">std</span>:</span>:<span class="function"><span class="built_in">string</span> <span class="title">get_enum_name</span><span class="params">(T n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get_enum_name&lt;T, (T)<span class="number">0</span>, (T)<span class="number">256</span>&gt;(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>, <span class="title">T</span> <span class="title">Beg</span>, <span class="title">T</span> <span class="title">End</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">enum_from_name</span>(<span class="title">std</span>:</span>:<span class="built_in">string</span> <span class="keyword">const</span> &amp;s) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (<span class="keyword">int</span>)Beg; i &lt; (<span class="keyword">int</span>)End; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s == get_enum_name((T)i)) &#123;</span><br><span class="line">            <span class="keyword">return</span> (T)i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">enum_from_name</span>(<span class="title">std</span>:</span>:<span class="built_in">string</span> <span class="keyword">const</span> &amp;s) &#123;</span><br><span class="line">    <span class="keyword">return</span> enum_from_name&lt;T, (T)<span class="number">0</span>, (T)<span class="number">256</span>&gt;(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于数据的类型转换</summary>
    
    
    
    <category term="C++" scheme="http://bugnull.com/categories/C/"/>
    
    
    <category term="Cpp基础" scheme="http://bugnull.com/tags/Cpp基础/"/>
    
  </entry>
  
  <entry>
    <title>什么是微服务架构</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84/</id>
    <published>2022-09-29T13:25:57.505Z</published>
    <updated>2022-08-29T16:05:19.497Z</updated>
    
    <content type="html"><![CDATA[<h3 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h3><p>微服务架构是一种架构模式或者架构风格，<strong>它提倡将单一应用程序划分成一组小的服务</strong>，每个服务运行在其独立的<strong>进程中</strong>，服务间互相协调、互相配合，为用户提供最终价值。服务间采用轻量级通信机制（通常基于HTTP的RESTful API）。每个服务都围绕着具体业务进行构建，并且能独立部署到生产环境。应尽量避免统一的、集中式的服务管理机制，对具体的服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有非常轻量的集中式管理来协调这些服务，可以使用不同的语言，也可以使用不同的数据存储。</p><p>由All in one，拆分成不同的模块（进程），一个服务做一件事，进行解耦。</p>]]></content>
    
    
    <summary type="html">记录微服务的理解</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>集线器与交换机基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E9%9B%86%E7%BA%BF%E5%99%A8%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E9%9B%86%E7%BA%BF%E5%99%A8%E4%B8%8E%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.490Z</published>
    <updated>2022-08-30T13:07:34.216Z</updated>
    
    <content type="html"><![CDATA[<p>总线型使用大量机械接头和无源电缆并不可靠</p><p><img src="/网络/集线器与交换机基本概念/总线型以太网和集线器HUB的星型以太网.png" alt="总线型与星型"></p><p>可以使用集线器HUB在物理层扩展以太网，将多个碰撞域（冲突域）合并成一个更大的冲突域，在一系中的一台主机要发送给二系中一台主机，该帧信号会传输到整个网络的各个主机。</p><p>交换机会把单播帧转发到目的主机（忽略ARP过程，假设交换机的帧交换表已“学习好了”）<br><img src="/网络/集线器与交换机基本概念/集线器与交换机SWITCH的区别.png" alt="集线器与交换机"></p><p>集线器一般使用CSMA/CD争取总线资源，只能半双工，而交换机可以进行全双工，同时进行收发工作。<br><img src="/网络/集线器与交换机基本概念/交换机工作状态.png" alt="交换机工作状态"></p><p><img src="/网络/集线器与交换机基本概念/对比集线器和交换机.png" alt="交换机工作状态"></p><p>交换机工作在数据链路层（也包括物理层—），集线器工作在物理层，前者性能快<br><img src="/网络/集线器与交换机基本概念/集线器与交换机小结.png" alt="交换机工作状态"></p><p>以太网交换机收到帧后，在帧交换表中查找帧的目的MAC地址所对应的接口号，然后通过该接口转发帧。是即插即用设备，刚上电内部帧交换表是空的，随通信进行处学习算法，自动逐渐建立起帧交换表。</p><p>盲目泛洪类似广播，登录会在发送方时登记，每条记录都有时效，到期自动删除，MAC与交换机接口关系不是永久性的，更换主机、更换网卡。ARP高速缓存表中IP与MAC对应关系同样会到期自动删除。<br><img src="/网络/集线器与交换机基本概念/交换机自学习过程.png" alt="交换机自学习"></p><p><img src="/网络/集线器与交换机基本概念/交换机网络环路和广播风暴.png" alt="交换机自学习"></p><p>使用生成树协议，保证没有环路网络<br><img src="/网络/集线器与交换机基本概念/生成树协议STP.png" alt="交换机自学习"></p><p>当交换机以太网足够大时，进行广播会有很大的开销<br>路由器工作在网络层，一般不转发广播，可以将交换机以太网分割成小的广播域<br><img src="/网络/集线器与交换机基本概念/广播频繁.png" alt="虚拟VLAN"></p><p><img src="/网络/集线器与交换机基本概念/虚拟局域网VLAN.png" alt="虚拟VLAN"></p><p><img src="/网络/集线器与交换机基本概念/IEEE802-1Q帧.png" alt="虚拟局域网VLAN实现机制"></p><p>交换机端口类型有以下三种：Access Trunk Hybrid<br>交换机各端口的缺少VLAN ID  思科上称为Native VLAN 即本征VLAN  华为上称Port VLAN ID即端口VLAN ID,PVID</p><p><img src="/网络/集线器与交换机基本概念/Access端口打标签与去标签.png" alt="虚拟局域网VLAN实现机制"></p><p><img src="/网络/集线器与交换机基本概念/Trunk端口转发.png" alt="虚拟局域网VLAN实现机制"></p><p><img src="/网络/集线器与交换机基本概念/VLAN端口类型转发.png" alt="虚拟局域网VLAN实现机制"></p><p><img src="/网络/集线器与交换机基本概念/Hybrid端口转发.png" alt="虚拟局域网VLAN实现机制"></p>]]></content>
    
    
    <summary type="html">集线器与交换机概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>网络层基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.490Z</published>
    <updated>2022-08-30T12:30:07.030Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/网络/网络层基本概念/网络层概述.png" alt="网络层概述"></p><p><img src="/网络/网络层基本概念/面向连接的虚电路服务.png" alt="网络层提供的两种服务"><br><img src="/网络/网络层基本概念/无连接的数据报服务.png" alt="网络层提供的两种服务"><br><img src="/网络/网络层基本概念/虚电路与数据报服务对比.png" alt="网络层提供的两种服务"></p><p>32比特的IPV4地址不便阅读、记录、输入，因此采用点分十进制表示方法，8个一组，用.分开<br><img src="/网络/网络层基本概念/IPV4地址概述.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4地址分类.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4-A类地址.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4-B类地址.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4-C类地址.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4编址例题.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4编址例题2.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPV4小结.png" alt="IPV4"></p><p>增加子网时候，需要申请新的网络号，等待时间和钱，增加路由路中路由表记录数量，浪费原网络中剩余的IP。此时需要引入子网掩码，通过与运算，取出IPV4地址所在子网的网络地址<br><img src="/网络/网络层基本概念/子网掩码.png" alt="IPV4"><br><img src="/网络/网络层基本概念/子网掩码例题.png" alt="IPV4"></p><p><img src="/网络/网络层基本概念/无分类编址的IPV4.png" alt="IPV4"><br><img src="/网络/网络层基本概念/无分类编址的IPV4_2.png" alt="IPV4"><br><img src="/网络/网络层基本概念/无分类编址的IPV4_3.png" alt="IPV4"><br><img src="/网络/网络层基本概念/无分类编址的IPV4小结.png" alt="IPV4"></p><p>定长即使用同一个子网掩码来划分子网，只能划分出2^n个子网，从主机号借用的。容易造成IP地址浪费。使用不同的子网掩码来划分子网，更灵活，按需分配，子网数量可以不同，减少浪费。<br><img src="/网络/网络层基本概念/定长的子网掩码FLSM.png" alt="IPV4"><br><img src="/网络/网络层基本概念/变长的子网掩码VLSM.png" alt="IPV4"></p><p>路由器收到出错的数据报，丢弃后，向源主机发送ICMP数据报。<br><img src="/网络/网络层基本概念/IP数据报的发送和转发.png" alt="路由器"></p><p>产生环路，会使用TTL进行计算，为零时抛弃，或者加入黑洞路由，使用默认路由后，当不知道转发给哪里就会转发到默认路由<br><img src="/网络/网络层基本概念/静态路由配置及路由环路.png" alt="路由器"></p><p><img src="/网络/网络层基本概念/静态路由选择和动态路由选择.png" alt="路由器"></p><p>在两个自治系统中，内部使用的是IGP或IRP内部网关（路由）协议，之间使用的是EGP或ERP外部网关（路由）协议，仅表示协议，不表示实际使用什么算法<br><img src="/网络/网络层基本概念/因特网路由选择协议特点.png" alt="路由器"><br><img src="/网络/网络层基本概念/常见路由选择协议.png" alt="路由器"><br>路由器会定期发送自己的路由信息<br><img src="/网络/网络层基本概念/路由器基本结构.png" alt="路由器"><br><img src="/网络/网络层基本概念/路由信息协议RIP工作原理.png" alt="路由器"><br><img src="/网络/网络层基本概念/RIP更新规则.png" alt="路由器"><br><img src="/网络/网络层基本概念/RIP坏消息传播慢问题.png" alt="路由器"><br><img src="/网络/网络层基本概念/RIP小结.png" alt="路由器"></p><p><img src="/网络/网络层基本概念/基于LSDB进行最短路径优先SPF计算.png" alt="路由器"><br><img src="/网络/网络层基本概念/OSPF五种分组类型.png" alt="路由器"><br><img src="/网络/网络层基本概念/OSPF工作过程.png" alt="路由器"><br><img src="/网络/网络层基本概念/OSPF多点网络路由器邻居关系建立.png" alt="路由器"><br>减少信息洪泛，一个区域一般最多200个路由<br><img src="/网络/网络层基本概念/OSPF把自治系统再划分为更小的区域.png" alt="路由器"><br><img src="/网络/网络层基本概念/OSPF小结.png" alt="路由器"></p><p><img src="/网络/网络层基本概念/边界网关协议BGP.png" alt="路由器"><br><img src="/网络/网络层基本概念/BGP发言人.png" alt="路由器"><br><img src="/网络/网络层基本概念/BCP发言人构造的连通图.png" alt="路由器"><br>BGP-4报文封装在TCP报文段中<br><img src="/网络/网络层基本概念/BGP-4的四种报文.png" alt="路由器"><br><img src="/网络/网络层基本概念/封装报文的协议.png" alt="路由器"><br><img src="/网络/网络层基本概念/BGP小结.png" alt="路由器"></p><p><img src="/网络/网络层基本概念/IPV4数据报分片.png" alt="IPV4"><br><img src="/网络/网络层基本概念/IPv4数据报首部格式.png" alt="IPV4"></p><p><img src="/网络/网络层基本概念/ICMP网际控制报文.png" alt="ICMP"><br><img src="/网络/网络层基本概念/ICMP小结.png" alt="ICMP"></p><p>R1与R2之间类似点对点，也称IP隧道技术<br><img src="/网络/网络层基本概念/VPN虚拟专用网.png" alt="VPN"></p><p><img src="/网络/网络层基本概念/NAP网络地址转换.png" alt="NAP"><br><img src="/网络/网络层基本概念/NAPT网络地址与端口号转换.png" alt="NAPT"><br><img src="/网络/网络层基本概念/VPN与NAT小结.png" alt="NAPT"></p>]]></content>
    
    
    <summary type="html">网络层基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>运输层基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E8%BF%90%E8%BE%93%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.490Z</published>
    <updated>2022-08-30T12:30:24.567Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/网络/运输层基本概念/运输层概念.png" alt="运输层"><br><img src="/网络/运输层基本概念/运输层概念小结.png" alt="运输层"><br><img src="/网络/运输层基本概念/端口号.png" alt="运输层"><br><img src="/网络/运输层基本概念/分用与复用.png" alt="运输层"><br><img src="/网络/运输层基本概念/应用层常用协议端口号.png" alt="运输层"></p><p>UDP无连接，TCP三次握手、四次挥手<br><img src="/网络/运输层基本概念/UDP与TCP对比1.png" alt="运输层"><br><img src="/网络/运输层基本概念/UDP与TCP对比2.png" alt="运输层"><br><img src="/网络/运输层基本概念/UDP与TCP对比3.png" alt="运输层"><br><img src="/网络/运输层基本概念/UDP与TCP对比4.png" alt="运输层"><br>TCP规定，即使接收窗口为0，也要接收零窗口探测报文、确认报文、带有紧急数据的报文<br><img src="/网络/运输层基本概念/TCP流量控制.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP流量控制过程1.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP流量控制例题.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP拥塞控制.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP拥塞控制过程.png" alt="运输层"></p><p>慢开始会以2倍数增长拥塞窗口，拥塞避免是线性增加1<br><img src="/网络/运输层基本概念/TCP的拥塞算法慢开始与拥塞避免.png" alt="运输层"><br>不等超时，就进行重传，需要接收连续三个确认<br><img src="/网络/运输层基本概念/TCP的拥塞算法慢开始与拥塞避免的不足.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP拥塞算法快重传.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP拥塞算法快恢复.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP拥塞控制综合.png" alt="运输层"></p><p><img src="/网络/运输层基本概念/TCP超时重传时间的选择.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP超时重传时间计算公式.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP超时重传往返时间.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP超时重传时间出错纠正方法.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP超时重传时间例题.png" alt="运输层"></p><p>不推荐发送窗口前沿收缩，有可能这些数据已经发送了<br><img src="/网络/运输层基本概念/TCP可靠传输的实现滑动窗口滑动.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP可靠传输的实现滑动窗口状态.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP可靠传输的实现滑动窗口过程.png" alt="运输层"></p><p><img src="/网络/运输层基本概念/TCP连接的三个阶段.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP连接建立解决的问题.png" alt="运输层"><br>建立连接前，服务器会先创建传输控制块（TCP连接表、指向发送和接收缓存的指针、指向重传队列的指针、当前的发送和接收序号、。。。），然后进行LISTEN<br>客户端要发起连接时，也先创建传输控制块<br>第三次握手是为了防止多连接，而消耗掉服务器资源<br>SYN=1的报文段不能携带数据，但要消耗一个序号、普通确认报文如果不带数据，则不消耗序号<br>x客户端选择作为初始序号，y为服务端选择的初始序号<br><img src="/网络/运输层基本概念/TCP三次握手连接过程.png" alt="运输层"></p><p>FIN=1的报文段不能携带数据，但要消耗一个序号。v等于TCP客户进程之前收到的最后一个字节序号+1。u等于TCP客户进程之前已传送过数据的最后一个字节序号+1。<br><img src="/网络/运输层基本概念/TCP四次挥手过程.png" alt="运输层"><br><img src="/网络/运输层基本概念/TCP保活机制.png" alt="运输层"></p>]]></content>
    
    
    <summary type="html">运输层基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>应用层基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E5%BA%94%E7%94%A8%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.490Z</published>
    <updated>2022-08-30T12:30:37.121Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/网络/应用层基本概念/应用层概念.png" alt="应用层"><br><img src="/网络/应用层基本概念/CS方式.png" alt="应用层"><br><img src="/网络/应用层基本概念/P2P方式.png" alt="应用层"><br><img src="/网络/应用层基本概念/DHCP动态主机配置协议.png" alt="应用层"><br>请求中会带有《事务ID》，用带确保是自己发出而得到的回应<br><img src="/网络/应用层基本概念/DHCP过程.png" alt="应用层"><br>路由器不会转发广播，需要在上面配置DHCP服务器IP，才能进行单播传送<br><img src="/网络/应用层基本概念/DHCP中继代理.png" alt="应用层"><br><img src="/网络/应用层基本概念/DHCP小结.png" alt="应用层"></p><p>DNS服务器，用于查找域名-&gt;IP  使用UDP 端口53<br><img src="/网络/应用层基本概念/域名结构.png" alt="应用层"><br><img src="/网络/应用层基本概念/域名服务器类别.png" alt="应用层"><br><img src="/网络/应用层基本概念/域名查询方式.png" alt="应用层"><br><img src="/网络/应用层基本概念/域名缓存.png" alt="应用层"></p><p><img src="/网络/应用层基本概念/FTP概念.png" alt="应用层"><br>控制连接会保持打开，数据连接传输完成就关闭<br><img src="/网络/应用层基本概念/FTP工作原理.png" alt="应用层"></p><p>基于TCP<br><img src="/网络/应用层基本概念/电子邮件概念.png" alt="应用层"><br><img src="/网络/应用层基本概念/SMTP工作原理.png" alt="应用层"><br>STMP只能传输ASCII，因而引进了MIME，将图片、文件转为ASCII或者将ASCII进行逆转换。MIME同样应用于HTTP<br><img src="/网络/应用层基本概念/SMTP补充.png" alt="应用层"><br><img src="/网络/应用层基本概念/POP3邮局协议.png" alt="应用层"><br><img src="/网络/应用层基本概念/基于万维网的电子邮件.png" alt="应用层"></p><p><img src="/网络/应用层基本概念/WWW万维网概念.png" alt="应用层"><br><img src="/网络/应用层基本概念/URL的组成.png" alt="应用层"><br><img src="/网络/应用层基本概念/HTTP请求报文.png" alt="应用层"><br><img src="/网络/应用层基本概念/HTTP响应报文.png" alt="应用层"><br><img src="/网络/应用层基本概念/Cookie概念.png" alt="应用层"><br><img src="/网络/应用层基本概念/Cookie工作流程.png" alt="应用层"><br><img src="/网络/应用层基本概念/WWW缓存与代理服务器.png" alt="应用层"><br><img src="/网络/应用层基本概念/HTTP请求例题.png" alt="应用层"><br><img src="/网络/应用层基本概念/WWW小结.png" alt="应用层"></p>]]></content>
    
    
    <summary type="html">应用层基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>数据链路层基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.474Z</published>
    <updated>2022-08-30T12:29:01.150Z</updated>
    
    <content type="html"><![CDATA[<p>封装成帧：在链路层会对IP数据报文添加帧头和帧尾</p><ul><li>帧头和帧尾包含重要的控制信息</li><li>帧头和帧尾作为帧定界，可以通过物理层交付的比特流中提取一个个的帧（PPP帧），并不是所有都包含帧定界标志（以太网V2 MAC帧），而物理层会在传输前增加8字节前导码（前7位是同步码，作为时钟同步，之后一字节作为定界符）再转为电信号发送，以太网规定帧间间隔（96比特时间）</li><li>透明传输，指数据链路层对上层交付的传输数据没有任何限制，若数据中存在帧尾字段，链路层会在该位置做字符标记（在前增加esc  ascill=27）做比特处理（每5位1后插入1个0）等，以防止在解析时提前结束帧（字符填充或者零比特填充）</li></ul><p>差错检测：比特在实际传输过程中可能会产生差错，称为比特差错或误码。一段时间内，传输错误的比特占总传输比特的比率为误码率BER。检错后一般进行重传来纠正传输中的差错或者仅仅是德育检测到差错的帧，取决于是可靠传输还是不可靠传输</p><ul><li>在以太网V2 MAC帧中，帧尾包含4字节的帧检验序列FCS字段，检测是否有误码</li><li>在PPP帧中，帧尾包含2字节FCS</li><li>奇偶校验，在待发送数据后面添加1位奇偶校验，使整个数据（包括校验位）中1的个数为奇数或者偶数，漏检率高</li><li>循环冗余校验，约定一个生成多项式，基于数据和多项式计算出冗余码，添加到数据后面一起传输，漏检率非常低，易于硬件实现，广泛用于数据链路层<br><img src="/网络/数据链路层基本概念/循环冗余校验.png" alt="循环冗余检验CRC"><br><img src="/网络/数据链路层基本概念/循环冗余计算过程.png" alt="循环冗余检验CRC"></li><li>检测码只能检测出是否出错，不能定位，无法纠正错误，可以使用冗余信息更多的纠错码进行前向纠错，开销较大</li></ul><p>可靠传输：根据数据链路层向上层提供的服务类型，其可靠性不一定由数据链路层实现，其它各层均可选择实现可靠传输</p><ul><li>不可靠传输服务：仅仅丢弃有误码的帧</li><li>可靠传输服务：想办法实现发送端发送什么，接收端就收到什么</li><li>有线误码率低，不要求数据链路层向上提供可靠传输。即使出现误码，可靠传输的问题由其上层处理。</li><li>无线链路易受干扰，误码率比较高，因此要求数据链路层必须向上层提供可靠传输服务。</li><li><p>传输差错类型，比特差错、分组丢失、分组失序、分组重复，分组表示的是帧<br><img src="/网络/数据链路层基本概念/各层对可靠及不可靠传输类型.png" alt="各层可靠性类型"></p><p>可靠传输实现机制的原理，不仅限于数据链路层</p></li><li>停止-等待协议SW（自动请求重传ARQ）<br><img src="/网络/数据链路层基本概念/停止-等待.png" alt="传输机制"><br><img src="/网络/数据链路层基本概念/停止-等待信道利用率.png" alt="传输机制"></li><li>回退N帧协议GBN（连续ARQ，滑动窗口协议）<ul><li>制定比特给分组编号，发送窗口尺寸，表示一次发多个组，尺寸不能大于分组号-1，接收窗口尺寸为1，（若发送尺寸==分组数，则会接口窗口检测不到错误，依然把0号放置于0号，认为正确，实际是忽略了一个组），接收窗口只能等于1，只能按序接收，数据分组内出现误码后面的分组都会丢弃。</li><li>由停止-等待发送1个改为多个，串行改并行</li><li>累积确认，在接收到前N组时，可以直接发送ACKn表示已经接收到N组数据，减少资源占用</li><li>当多个到达接收方时，出现误码，不仅会丢弃该帧，还会把序号不匹配的丢弃，重新发送多个已经接收到最大序号的ACKn<br><img src="/网络/数据链路层基本概念/回退N帧定义.png" alt="传输机制"><br><img src="/网络/数据链路层基本概念/回退N帧，发送与接收工作机制.png" alt="传输机制"></li></ul></li><li>选择重传协议SR<ul><li>对回退N帧进行扩展，发送滑动窗口&gt;=接收窗口&gt;=1，可进行多组分别确认，但是取消累积确认<br><img src="/网络/数据链路层基本概念/选择重传协议定义.png" alt="传输机制"><br><img src="/网络/数据链路层基本概念/选择重传协议工作机制.png" alt="传输机制"></li></ul></li></ul><p>点对点协议PPP：目前使用最广泛的点对点数据链路层协议，向上不提供可靠传输<br>  <img src="/网络/数据链路层基本概念/点对点协议定义.png" alt="点对点协议"><br>  <img src="/网络/数据链路层基本概念/PPP帧格式.png" alt="点对点协议"></p><ul><li><p>实现透明传输，面向字节的异步链路，字节填充法，对特殊字符前插入转义字符，转义字符再插入转义字符。面向比特的同步链路，比特填充法，对于连续5位1的后面插入一个0。<br><img src="/网络/数据链路层基本概念/PPP工作状态.png" alt="点对点协议"></p><p><img src="/网络/数据链路层基本概念/媒体接入控制.png" alt="媒体接入控制"></p><p>信道复用：</p></li><li>频分复用FDM：根据频带划分出多个了频带（信道），频带间需要有隔离频带</li><li>时分复用TDM：将传输带宽资源按时隙轮流分配给不同用户，用户只能在对应的时隙进行通信，周期性出现，一周期就是一个TDM帧</li><li>波分复用WDM：即光的频分复用，将每路（1310nm波长，2.5Gb/s）变换到1550~1561.2nm，共8路，相隔1.6nm，在同一根光纤传输，光传输会损失，中间需要掺铒光纤放大器EDFA。</li><li><p>码分复用CDM：</p><p><img src="/网络/数据链路层基本概念/码分复用例子.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/静态划分信道小结.png" alt="媒体接入控制"></p><p>动态接入控制：<br>CSMA-CD适用于有线<br><img src="/网络/数据链路层基本概念/CSMA-CD概念.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD争用期.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD最小帧长.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD最大帧长.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD退避算法.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD信道利用率.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD发送流程.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CD接收流程.png" alt="媒体接入控制"><br>CSMA/CA适用于无线<br><img src="/网络/数据链路层基本概念/CSMA-CA与CD区别.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CA与CD应用.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CA帧间间隔IFS.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CA工作原理.png" alt="媒体接入控制"><br>等待DIFS表示有高优先级让其先传。等待SIFS表示最短帧间间隔，用来分隔属于一次对话的各帧。<br><img src="/网络/数据链路层基本概念/CSMA-CA退避算法.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CA退避算法例子.png" alt="媒体接入控制"><br><img src="/网络/数据链路层基本概念/CSMA-CA信道预约.png" alt="媒体接入控制"><br>请求发送RTS:帧包括源地址、目的地址及所需要时间 允许发送CTS:也包括此次通信时间<br><img src="/网络/数据链路层基本概念/CSMA-CA虚拟载波监听.png" alt="媒体接入控制"><br>解决A C互为隐蔽站的问题，C通过CTS知道B被占用的时间</p></li></ul>]]></content>
    
    
    <summary type="html">数据链路层基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>MAC、IP、ARP基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/mac%E3%80%81ip%E3%80%81arp%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/mac%E3%80%81ip%E3%80%81arp%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.474Z</published>
    <updated>2022-08-30T12:28:19.542Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/网络/mac、ip、arp基本概念/MAC、IP、ARP三者关系.png" alt="三者关系"><br><img src="/网络/mac、ip、arp基本概念/MAC地址定义.png" alt="三者关系"><br><img src="/网络/mac、ip、arp基本概念/MAC地址小结.png" alt="三者关系"><br>单播：表示只传给指定MAC地址，多播：表示该网络接口所在的多播地址，一个接口可以在多个多播地址，与帧的目的MAC地址符合，即接收该帧，广播：地址为FF:FF:FF:FF:FF:FF，所有人都接收<br><img src="/网络/mac、ip、arp基本概念/IP地址定义.png" alt="三者关系"><br><img src="/网络/mac、ip、arp基本概念/MAC与IP的关系与传输过程.png" alt="三者关系"></p><p><img src="/网络/mac、ip、arp基本概念/ARP地址解析协议过程.png" alt="三者关系"><br><img src="/网络/mac、ip、arp基本概念/ARP地址解析协议过程1.png" alt="三者关系"><br>ARP只能在同一个链路或者同一个网络上使用</p><p><img src="/网络/mac、ip、arp基本概念/MAC、IP、ARP三者关系小结.png" alt="三者关系"></p>]]></content>
    
    
    <summary type="html">MAC、IP、ARP基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>物理层基本概念</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2022-09-29T13:25:57.474Z</published>
    <updated>2022-08-30T12:22:44.851Z</updated>
    
    <content type="html"><![CDATA[<p>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流<br>物理层为数据链路层屏蔽了各种传输媒体的差异，使数据链路层只需要考虑如何完成本层的协议和服务，而不必考虑网络具体的传输媒体是什么</p><p>物理层协议主要任务：<br>机械特性：指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置<br>电气特性：指明在接口电缆的各条线上出现的电压范围<br>功能特性：指明某条线上出现的某一电平的电压表示何种意义<br>过程特性：指明对于不同功能的各种可能事的出现顺序</p><p>传输媒体（不同媒体对应不同的物理层协议）：<br>1、导引型：双绞线（网线）、同轴电缆、光纤、电力线<br>2、非导引型：微波通信（2~40GHz)、无线电波、红外线、可见光</p><p>传输方式<br>1、串行（远距离传输，如计算机网络）。并行（CPU与内存之间，通过总线进行传输）<br>2、同步：以稳定的比特流传输，字节间没有间隔，接收端在中间时刻进行检测0或1，此时会有时钟累计误差。需要保持时钟同步。外同步：在收发双方间添加一条单独的时钟信号线。内同步：发送端将时钟同步信号编码到发送数据中一起传输（曼彻斯特编码）。异步：以一个字节为单位传输，字节间异步，在字节前后增加头和尾作为判断。<br>3、单工：单向通信（收音机）。半双工：双向交替通信，可以相互通信但不能同时（对讲机）。全双工：双向同时通信（电话）</p><p><img src="/网络/物理层基本概念/调制与编码.png" alt="编码与调制"></p><p>常用编码：不归零编码（存在同步问题，需要额外传输时钟，不常用），归零编码（自同步，编码效率低，用零电频做隔断），曼彻斯特编码（用码元间跳变表示时钟，又表示数据），差分曼彻斯特编码</p><p><img src="/网络/物理层基本概念/常用编码.png" alt="常用编码方法"></p><p><img src="/网络/物理层基本概念/常用调制.png" alt="常用调制方法"></p><p>频率和相位是相关的，即频率是相位随时间的变化率。所以一次只能调制频率和相位中的一个。相位和振幅可以结合起来一起调制，称为正交振幅调制QAM。</p><p>信号在信道中传输会存在失帧的可能，其中因素娄：码元传输速率，信号传输距离，噪声干扰，传输媒体质量。</p><p><img src="/网络/物理层基本概念/信道极限容量.png" alt="奈氏准则和香农公式"></p>]]></content>
    
    
    <summary type="html">物理层基本概念小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络基础</title>
    <link href="http://bugnull.com/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
    <id>http://bugnull.com/%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</id>
    <published>2022-09-29T13:25:57.459Z</published>
    <updated>2022-08-30T12:21:57.549Z</updated>
    
    <content type="html"><![CDATA[<p>三种电路交换优缺点对比：<br>电路交换（比特流直达）<br>优点：通信时延小、有序、没有冲突、适用范围广、实时性强、控制简单<br>缺点：建立连接时间长、线路独占，使用效率低、灵活性差、难以规格化<br>报文交换（整组报文转发）<br>优点：无需建立连接、动态分配线路、线路可靠性、线路利用率高、多目标服务<br>缺点：转发时延、较大存储缓存空间、传输额外的信息量<br>分组交换<br>优点：无需建立连接、线路利用率高、简化存储管理、加速传输、减少出错和重发数据量<br>缺点：转发时延、传输额外的信息量、采用数据报服务时存在失序、丢失或者重复分组的问题；对于虚电路服务，存在呼叫建立、数据传输和虚电路释放三个过程。</p><p>时延=发送时延（分组长度/发送数率）+传播时延（信道长度/电磁波传播速率）+处理时延（硬件相关）</p><p>时延带宽积=传播时延*带宽</p><p>利用率：<br>信道利用率 用来表示信道百分之几的时间是有数据通过<br>网络利用率 全网络的信道利用率的加权平均<br>当前时延=空闲时延/(1-利用率)  当得用率达到50%以上时，则时延会增大，可以考虑扩容，增大线路的带宽。<br>尽量动态控制通信量，保持在合理范围内。</p><p>丢包：<br>接口、结点、链路、路径、网络丢包。<br>分组丢失：分组在传输过程中出现误码，被结点丢弃；到达一台队列已满的分组交换机时被丢弃。</p><p>OSI体系结构，七层协议<br>物理、数据链路、网络、运输、会话、表示、应用层<br>TCP/IP体系结构、四层协议<br>网络接口 网络接口<br>网际 IP将网络接口互联、向TCP、UDP提供网络互联服务(IP over everythins、Everything over IP)<br>运输 TCP(在IP服务的基础上，向应用层提供可靠性传输服务) UDP(…不可靠传输服务)<br>应用层 HTTP SMTP DNS RTP</p><p>原理体系结构（适用教学）<br>应用 解决通过应用进程的交互来实现特定网络应用的问题 应用进程间交互来完成特定的网络应用<br>运输 解决进程之间基于网络的通信问题 解决进程间、传输错误处理<br>网络 解决分组在多个网络上传输（路由）的问题 路由功能，如使用IP<br>数据链路 解决分组在一个网络（或链路）上传输的问题 如使用MAC标记主机<br>物理层 解决使用何种信号来传输比特的问题 硬件如网络网口、传输方式</p><p>由应用层向物理层转变 http（报文） -&gt; http+TCP（TCP报文段） -&gt; http+TCP+IP（IP数据报） -&gt; ETH+http+TCP+IP+ETH（帧） -&gt;  ….+前导码（比特流）</p><p>协议的三要素<br>语法 定义所交换信息的格式<br>语义 定义收发双方所要完成的操作<br>同步 定义收发双方的时序关系</p><p>协议数据单元PDU 对等层次之间传送的数据包称为该层的协议数据单元<br>服务数据单元SDU 同一系统内，层与层之间交换的数据包称为服务数据单元<br>多个SDU可以合成一个PDU，一个SDU可以划分为几个PDU</p>]]></content>
    
    
    <summary type="html">计算机网络基础小记</summary>
    
    
    
    <category term="网络" scheme="http://bugnull.com/categories/网络/"/>
    
    
    <category term="网络知识" scheme="http://bugnull.com/tags/网络知识/"/>
    
  </entry>
  
</feed>
